6c9f59dd102fcf2688c99ccf0315e6d8
"use strict";

function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByPlaceholderText = exports.queryAllByPlaceholderText = exports.getByPlaceholderText = exports.getAllByPlaceholderText = exports.findByPlaceholderText = exports.findAllByPlaceholderText = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
var queryAllByPlaceholderText = function queryAllByPlaceholderText() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  (0, _helpers.checkContainerType)(args[0]);
  return (0, _allUtils.queryAllByAttribute).apply(void 0, ['placeholder'].concat(args));
};
var getMultipleError = function getMultipleError(c, text) {
  return "Found multiple elements with the placeholder text of: ".concat(text);
};
var getMissingError = function getMissingError(c, text) {
  return "Unable to find an element with the placeholder text of: ".concat(text);
};
var queryAllByPlaceholderTextWithSuggestions = exports.queryAllByPlaceholderText = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByPlaceholderText, queryAllByPlaceholderText.name, 'queryAll');
var _ref = (0, _allUtils.buildQueries)(queryAllByPlaceholderText, getMultipleError, getMissingError),
  _ref2 = _slicedToArray(_ref, 5),
  queryByPlaceholderText = _ref2[0],
  getAllByPlaceholderText = _ref2[1],
  getByPlaceholderText = _ref2[2],
  findAllByPlaceholderText = _ref2[3],
  findByPlaceholderText = _ref2[4];
exports.findByPlaceholderText = findByPlaceholderText;
exports.findAllByPlaceholderText = findAllByPlaceholderText;
exports.getByPlaceholderText = getByPlaceholderText;
exports.getAllByPlaceholderText = getAllByPlaceholderText;
exports.queryByPlaceholderText = queryByPlaceholderText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc2xpY2VkVG9BcnJheSIsInIiLCJlIiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIlR5cGVFcnJvciIsImEiLCJfYXJyYXlMaWtlVG9BcnJheSIsInQiLCJ0b1N0cmluZyIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIkFycmF5IiwiZnJvbSIsInRlc3QiLCJsZW5ndGgiLCJuIiwibCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiaSIsInUiLCJmIiwibyIsIm5leHQiLCJPYmplY3QiLCJkb25lIiwicHVzaCIsInZhbHVlIiwiaXNBcnJheSIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInF1ZXJ5QnlQbGFjZWhvbGRlclRleHQiLCJxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0IiwiZ2V0QnlQbGFjZWhvbGRlclRleHQiLCJnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCIsImZpbmRCeVBsYWNlaG9sZGVyVGV4dCIsImZpbmRBbGxCeVBsYWNlaG9sZGVyVGV4dCIsIl9xdWVyeUhlbHBlcnMiLCJyZXF1aXJlIiwiX2hlbHBlcnMiLCJfYWxsVXRpbHMiLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIl9rZXkiLCJjaGVja0NvbnRhaW5lclR5cGUiLCJxdWVyeUFsbEJ5QXR0cmlidXRlIiwiYXBwbHkiLCJjb25jYXQiLCJnZXRNdWx0aXBsZUVycm9yIiwiYyIsInRleHQiLCJnZXRNaXNzaW5nRXJyb3IiLCJxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0V2l0aFN1Z2dlc3Rpb25zIiwid3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbiIsIl9yZWYiLCJidWlsZFF1ZXJpZXMiLCJfcmVmMiJdLCJzb3VyY2VzIjpbInBsYWNlaG9sZGVyLXRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlQbGFjZWhvbGRlclRleHQgPSBleHBvcnRzLnF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQgPSBleHBvcnRzLmdldEJ5UGxhY2Vob2xkZXJUZXh0ID0gZXhwb3J0cy5nZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCA9IGV4cG9ydHMuZmluZEJ5UGxhY2Vob2xkZXJUZXh0ID0gZXhwb3J0cy5maW5kQWxsQnlQbGFjZWhvbGRlclRleHQgPSB2b2lkIDA7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX2FsbFV0aWxzID0gcmVxdWlyZShcIi4vYWxsLXV0aWxzXCIpO1xuY29uc3QgcXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dCA9ICguLi5hcmdzKSA9PiB7XG4gICgwLCBfaGVscGVycy5jaGVja0NvbnRhaW5lclR5cGUpKGFyZ3NbMF0pO1xuICByZXR1cm4gKDAsIF9hbGxVdGlscy5xdWVyeUFsbEJ5QXR0cmlidXRlKSgncGxhY2Vob2xkZXInLCAuLi5hcmdzKTtcbn07XG5jb25zdCBnZXRNdWx0aXBsZUVycm9yID0gKGMsIHRleHQpID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHRoZSBwbGFjZWhvbGRlciB0ZXh0IG9mOiAke3RleHR9YDtcbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IChjLCB0ZXh0KSA9PiBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCB3aXRoIHRoZSBwbGFjZWhvbGRlciB0ZXh0IG9mOiAke3RleHR9YDtcbmNvbnN0IHF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHRXaXRoU3VnZ2VzdGlvbnMgPSBleHBvcnRzLnF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQgPSAoMCwgX3F1ZXJ5SGVscGVycy53cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uKShxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0LCBxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0Lm5hbWUsICdxdWVyeUFsbCcpO1xuY29uc3QgW3F1ZXJ5QnlQbGFjZWhvbGRlclRleHQsIGdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0LCBnZXRCeVBsYWNlaG9sZGVyVGV4dCwgZmluZEFsbEJ5UGxhY2Vob2xkZXJUZXh0LCBmaW5kQnlQbGFjZWhvbGRlclRleHRdID0gKDAsIF9hbGxVdGlscy5idWlsZFF1ZXJpZXMpKHF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQsIGdldE11bHRpcGxlRXJyb3IsIGdldE1pc3NpbmdFcnJvcik7XG5leHBvcnRzLmZpbmRCeVBsYWNlaG9sZGVyVGV4dCA9IGZpbmRCeVBsYWNlaG9sZGVyVGV4dDtcbmV4cG9ydHMuZmluZEFsbEJ5UGxhY2Vob2xkZXJUZXh0ID0gZmluZEFsbEJ5UGxhY2Vob2xkZXJUZXh0O1xuZXhwb3J0cy5nZXRCeVBsYWNlaG9sZGVyVGV4dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0O1xuZXhwb3J0cy5nZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCA9IGdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0O1xuZXhwb3J0cy5xdWVyeUJ5UGxhY2Vob2xkZXJUZXh0ID0gcXVlcnlCeVBsYWNlaG9sZGVyVGV4dDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQUMsU0FBQUEsZUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFdBQUFDLGVBQUEsQ0FBQUYsQ0FBQSxLQUFBRyxxQkFBQSxDQUFBSCxDQUFBLEVBQUFDLENBQUEsS0FBQUcsMkJBQUEsQ0FBQUosQ0FBQSxFQUFBQyxDQUFBLEtBQUFJLGdCQUFBO0FBQUEsU0FBQUEsaUJBQUEsY0FBQUMsU0FBQTtBQUFBLFNBQUFGLDRCQUFBSixDQUFBLEVBQUFPLENBQUEsUUFBQVAsQ0FBQSwyQkFBQUEsQ0FBQSxTQUFBUSxpQkFBQSxDQUFBUixDQUFBLEVBQUFPLENBQUEsT0FBQUUsQ0FBQSxNQUFB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