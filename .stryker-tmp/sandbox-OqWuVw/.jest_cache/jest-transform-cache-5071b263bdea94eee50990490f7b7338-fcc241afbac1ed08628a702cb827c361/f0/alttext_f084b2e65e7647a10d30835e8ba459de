0d62d5dbd0d8c5407e840eca5bbc0c89
"use strict";

function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByAltText = exports.queryAllByAltText = exports.getByAltText = exports.getAllByAltText = exports.findByAltText = exports.findAllByAltText = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
// Valid tags are img, input, area and custom elements
var VALID_TAG_REGEXP = /^(img|input|area|.+-.+)$/i;
var queryAllByAltText = function queryAllByAltText(container, alt) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  (0, _helpers.checkContainerType)(container);
  return (0, _queryHelpers.queryAllByAttribute)('alt', container, alt, options).filter(function (node) {
    return VALID_TAG_REGEXP.test(node.tagName);
  });
};
var getMultipleError = function getMultipleError(c, alt) {
  return "Found multiple elements with the alt text: ".concat(alt);
};
var getMissingError = function getMissingError(c, alt) {
  return "Unable to find an element with the alt text: ".concat(alt);
};
var queryAllByAltTextWithSuggestions = exports.queryAllByAltText = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByAltText, queryAllByAltText.name, 'queryAll');
var _ref = (0, _allUtils.buildQueries)(queryAllByAltText, getMultipleError, getMissingError),
  _ref2 = _slicedToArray(_ref, 5),
  queryByAltText = _ref2[0],
  getAllByAltText = _ref2[1],
  getByAltText = _ref2[2],
  findAllByAltText = _ref2[3],
  findByAltText = _ref2[4];
exports.findByAltText = findByAltText;
exports.findAllByAltText = findAllByAltText;
exports.getByAltText = getByAltText;
exports.getAllByAltText = getAllByAltText;
exports.queryByAltText = queryByAltText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc2xpY2VkVG9BcnJheSIsInIiLCJlIiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIlR5cGVFcnJvciIsImEiLCJfYXJyYXlMaWtlVG9BcnJheSIsInQiLCJ0b1N0cmluZyIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIkFycmF5IiwiZnJvbSIsInRlc3QiLCJsZW5ndGgiLCJuIiwibCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiaSIsInUiLCJmIiwibyIsIm5leHQiLCJPYmplY3QiLCJkb25lIiwicHVzaCIsInZhbHVlIiwiaXNBcnJheSIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInF1ZXJ5QnlBbHRUZXh0IiwicXVlcnlBbGxCeUFsdFRleHQiLCJnZXRCeUFsdFRleHQiLCJnZXRBbGxCeUFsdFRleHQiLCJmaW5kQnlBbHRUZXh0IiwiZmluZEFsbEJ5QWx0VGV4dCIsIl9xdWVyeUhlbHBlcnMiLCJyZXF1aXJlIiwiX2hlbHBlcnMiLCJfYWxsVXRpbHMiLCJWQUxJRF9UQUdfUkVHRVhQIiwiY29udGFpbmVyIiwiYWx0Iiwib3B0aW9ucyIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsImNoZWNrQ29udGFpbmVyVHlwZSIsInF1ZXJ5QWxsQnlBdHRyaWJ1dGUiLCJmaWx0ZXIiLCJub2RlIiwidGFnTmFtZSIsImdldE11bHRpcGxlRXJyb3IiLCJjIiwiY29uY2F0IiwiZ2V0TWlzc2luZ0Vycm9yIiwicXVlcnlBbGxCeUFsdFRleHRXaXRoU3VnZ2VzdGlvbnMiLCJ3cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uIiwiX3JlZiIsImJ1aWxkUXVlcmllcyIsIl9yZWYyIl0sInNvdXJjZXMiOlsiYWx0LXRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlBbHRUZXh0ID0gZXhwb3J0cy5xdWVyeUFsbEJ5QWx0VGV4dCA9IGV4cG9ydHMuZ2V0QnlBbHRUZXh0ID0gZXhwb3J0cy5nZXRBbGxCeUFsdFRleHQgPSBleHBvcnRzLmZpbmRCeUFsdFRleHQgPSBleHBvcnRzLmZpbmRBbGxCeUFsdFRleHQgPSB2b2lkIDA7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX2FsbFV0aWxzID0gcmVxdWlyZShcIi4vYWxsLXV0aWxzXCIpO1xuLy8gVmFsaWQgdGFncyBhcmUgaW1nLCBpbnB1dCwgYXJlYSBhbmQgY3VzdG9tIGVsZW1lbnRzXG5jb25zdCBWQUxJRF9UQUdfUkVHRVhQID0gL14oaW1nfGlucHV0fGFyZWF8ListLispJC9pO1xuY29uc3QgcXVlcnlBbGxCeUFsdFRleHQgPSAoY29udGFpbmVyLCBhbHQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAoMCwgX2hlbHBlcnMuY2hlY2tDb250YWluZXJUeXBlKShjb250YWluZXIpO1xuICByZXR1cm4gKDAsIF9xdWVyeUhlbHBlcnMucXVlcnlBbGxCeUF0dHJpYnV0ZSkoJ2FsdCcsIGNvbnRhaW5lciwgYWx0LCBvcHRpb25zKS5maWx0ZXIobm9kZSA9PiBWQUxJRF9UQUdfUkVHRVhQLnRlc3Qobm9kZS50YWdOYW1lKSk7XG59O1xuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9IChjLCBhbHQpID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHRoZSBhbHQgdGV4dDogJHthbHR9YDtcbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IChjLCBhbHQpID0+IGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggdGhlIGFsdCB0ZXh0OiAke2FsdH1gO1xuY29uc3QgcXVlcnlBbGxCeUFsdFRleHRXaXRoU3VnZ2VzdGlvbnMgPSBleHBvcnRzLnF1ZXJ5QWxsQnlBbHRUZXh0ID0gKDAsIF9xdWVyeUhlbHBlcnMud3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbikocXVlcnlBbGxCeUFsdFRleHQsIHF1ZXJ5QWxsQnlBbHRUZXh0Lm5hbWUsICdxdWVyeUFsbCcpO1xuY29uc3QgW3F1ZXJ5QnlBbHRUZXh0LCBnZXRBbGxCeUFsdFRleHQsIGdldEJ5QWx0VGV4dCwgZmluZEFsbEJ5QWx0VGV4dCwgZmluZEJ5QWx0VGV4dF0gPSAoMCwgX2FsbFV0aWxzLmJ1aWxkUXVlcmllcykocXVlcnlBbGxCeUFsdFRleHQsIGdldE11bHRpcGxlRXJyb3IsIGdldE1pc3NpbmdFcnJvcik7XG5leHBvcnRzLmZpbmRCeUFsdFRleHQgPSBmaW5kQnlBbHRUZXh0O1xuZXhwb3J0cy5maW5kQWxsQnlBbHRUZXh0ID0gZmluZEFsbEJ5QWx0VGV4dDtcbmV4cG9ydHMuZ2V0QnlBbHRUZXh0ID0gZ2V0QnlBbHRUZXh0O1xuZXhwb3J0cy5nZXRBbGxCeUFsdFRleHQgPSBnZXRBbGxCeUFsdFRleHQ7XG5leHBvcnRzLnF1ZXJ5QnlBbHRUZXh0ID0gcXVlcnlCeUFsdFRleHQ7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUFDLFNBQUFBLGVBQUFDLENBQUEsRUFBQUMsQ0FBQSxXQUFBQyxlQUFBLENBQUFGLENBQUEsS0FBQUcscUJBQUEsQ0FBQUgsQ0FBQSxFQUFBQyxDQUFBLEtBQUFHLDJCQUFBLENBQUFKLENBQUEsRUFBQUMsQ0FBQSxLQUFBSSxnQkFBQTtBQUFBLFNBQUFBLGlCQUFBLGNBQUFDLFNBQUE7QUFBQSxTQUFBRiw0QkFBQUosQ0FBQSxFQUFBTyxDQUFBLFFBQUFQLENBQUEsMkJBQUFBLENBQUEsU0FBQVEsaUJBQUEsQ0FBQVIsQ0FBQSxFQUFBTyxDQUFBLE9BQUFFLENBQUEsTUFBQUMsUUFBQSxDQUFBQyxJQUFBLENBQUFYLENBQUEsRUFBQVksS0FBQSw2QkFBQUgsQ0FBQSxJQUFBVCxD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