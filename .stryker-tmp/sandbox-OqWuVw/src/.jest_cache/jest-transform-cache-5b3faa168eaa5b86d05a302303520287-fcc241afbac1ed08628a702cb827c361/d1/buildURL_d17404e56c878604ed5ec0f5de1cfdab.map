{"version":3,"names":["Object","defineProperty","exports","value","buildURL","_utils","_interopRequireDefault","require","_AxiosURLSearchParams","e","__esModule","encode","val","encodeURIComponent","replace","url","params","options","_encode","utils","isFunction","serialize","serializeFn","serializedParams","isURLSearchParams","toString","AxiosURLSearchParams","hashmarkIndex","indexOf","slice"],"sources":["buildURL.js"],"sourcesContent":["'use strict';\n\nimport utils from '../utils.js';\nimport AxiosURLSearchParams from '../helpers/AxiosURLSearchParams.js';\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?(object|Function)} options\n *\n * @returns {string} The formatted url\n */\nexport default function buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || encode;\n\n  if (utils.isFunction(options)) {\n    options = {\n      serialize: options\n    };\n  } \n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n}\n"],"mappings":"AAAA,YAAY;;AAACA,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,cAAAE,QAAA;AAEb,IAAAC,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,qBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAAsE,SAAAD,uBAAAG,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,gBAAAA,CAAA;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,MAAMA,CAACC,GAAG,EAAE;EACnB,OAAOC,kBAAkB,CAACD,GAAG,CAAC,CAC5BE,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CACrBA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACpBA,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CACrBA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACpBA,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CACrBA,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASV,QAAQA,CAACW,GAAG,EAAEC,MAAM,EAAEC,OAAO,EAAE;EACrD;EACA,IAAI,CAACD,MAAM,EAAE;IACX,OAAOD,GAAG;EACZ;EAEA,IAAMG,OAAO,GAAGD,OAAO,IAAIA,OAAO,CAACN,MAAM,IAAIA,MAAM;EAEnD,IAAIQ,iBAAK,CAACC,UAAU,CAACH,OAAO,CAAC,EAAE;IAC7BA,OAAO,GAAG;MACRI,SAAS,EAAEJ;IACb,CAAC;EACH;EAEA,IAAMK,WAAW,GAAGL,OAAO,IAAIA,OAAO,CAACI,SAAS;EAEhD,IAAIE,gBAAgB;EAEpB,IAAID,WAAW,EAAE;IACfC,gBAAgB,GAAGD,WAAW,CAACN,MAAM,EAAEC,OAAO,CAAC;EACjD,CAAC,MAAM;IACLM,gBAAgB,GAAGJ,iBAAK,CAACK,iBAAiB,CAACR,MAAM,CAAC,GAChDA,MAAM,CAACS,QAAQ,CAAC,CAAC,GACjB,IAAIC,gCAAoB,CAACV,MAAM,EAAEC,OAAO,CAAC,CAACQ,QAAQ,CAACP,OAAO,CAAC;EAC/D;EAEA,IAAIK,gBAAgB,EAAE;IACpB,IAAMI,aAAa,GAAGZ,GAAG,CAACa,OAAO,CAAC,GAAG,CAAC;IAEtC,IAAID,aAAa,KAAK,CAAC,CAAC,EAAE;MACxBZ,GAAG,GAAGA,GAAG,CAACc,KAAK,CAAC,CAAC,EAAEF,aAAa,CAAC;IACnC;IACAZ,GAAG,IAAI,CAACA,GAAG,CAACa,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,IAAIL,gBAAgB;EACjE;EAEA,OAAOR,GAAG;AACZ","ignoreList":[]}