43137ca33d30475549d97d6d4c3c82cf
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUserCodeFrame = getUserCodeFrame;
// We try to load node dependencies
var chalk = null;
var readFileSync = null;
var codeFrameColumns = null;
try {
  var nodeRequire = module && module.require;
  readFileSync = nodeRequire.call(module, 'fs').readFileSync;
  codeFrameColumns = nodeRequire.call(module, '@babel/code-frame').codeFrameColumns;
  chalk = nodeRequire.call(module, 'chalk');
} catch (_unused) {
  // We're in a browser environment
}

// frame has the form "at myMethod (location/to/my/file.js:10:2)"
function getCodeFrame(frame) {
  var locationStart = frame.indexOf('(') + 1;
  var locationEnd = frame.indexOf(')');
  var frameLocation = frame.slice(locationStart, locationEnd);
  var frameLocationElements = frameLocation.split(':');
  var _ref = [frameLocationElements[0], parseInt(frameLocationElements[1], 10), parseInt(frameLocationElements[2], 10)],
    filename = _ref[0],
    line = _ref[1],
    column = _ref[2];
  var rawFileContents = '';
  try {
    rawFileContents = readFileSync(filename, 'utf-8');
  } catch (_unused2) {
    return '';
  }
  var codeFrame = codeFrameColumns(rawFileContents, {
    start: {
      line: line,
      column: column
    }
  }, {
    highlightCode: true,
    linesBelow: 0
  });
  return "".concat(chalk.dim(frameLocation), "\n").concat(codeFrame, "\n");
}
function getUserCodeFrame() {
  // If we couldn't load dependencies, we can't generate the user trace
  /* istanbul ignore next */
  if (!readFileSync || !codeFrameColumns) {
    return '';
  }
  var err = new Error();
  var firstClientCodeFrame = err.stack.split('\n').slice(1) // Remove first line which has the form "Error: TypeError"
  .find(function (frame) {
    return !frame.includes('node_modules/');
  }); // Ignore frames from 3rd party libraries

  return getCodeFrame(firstClientCodeFrame);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFVzZXJDb2RlRnJhbWUiLCJjaGFsayIsInJlYWRGaWxlU3luYyIsImNvZGVGcmFtZUNvbHVtbnMiLCJub2RlUmVxdWlyZSIsIm1vZHVsZSIsInJlcXVpcmUiLCJjYWxsIiwiX3VudXNlZCIsImdldENvZGVGcmFtZSIsImZyYW1lIiwibG9jYXRpb25TdGFydCIsImluZGV4T2YiLCJsb2NhdGlvbkVuZCIsImZyYW1lTG9jYXRpb24iLCJzbGljZSIsImZyYW1lTG9jYXRpb25FbGVtZW50cyIsInNwbGl0IiwiX3JlZiIsInBhcnNlSW50IiwiZmlsZW5hbWUiLCJsaW5lIiwiY29sdW1uIiwicmF3RmlsZUNvbnRlbnRzIiwiX3VudXNlZDIiLCJjb2RlRnJhbWUiLCJzdGFydCIsImhpZ2hsaWdodENvZGUiLCJsaW5lc0JlbG93IiwiY29uY2F0IiwiZGltIiwiZXJyIiwiRXJyb3IiLCJmaXJzdENsaWVudENvZGVGcmFtZSIsInN0YWNrIiwiZmluZCIsImluY2x1ZGVzIl0sInNvdXJjZXMiOlsiZ2V0LXVzZXItY29kZS1mcmFtZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0VXNlckNvZGVGcmFtZSA9IGdldFVzZXJDb2RlRnJhbWU7XG4vLyBXZSB0cnkgdG8gbG9hZCBub2RlIGRlcGVuZGVuY2llc1xubGV0IGNoYWxrID0gbnVsbDtcbmxldCByZWFkRmlsZVN5bmMgPSBudWxsO1xubGV0IGNvZGVGcmFtZUNvbHVtbnMgPSBudWxsO1xudHJ5IHtcbiAgY29uc3Qgbm9kZVJlcXVpcmUgPSBtb2R1bGUgJiYgbW9kdWxlLnJlcXVpcmU7XG4gIHJlYWRGaWxlU3luYyA9IG5vZGVSZXF1aXJlLmNhbGwobW9kdWxlLCAnZnMnKS5yZWFkRmlsZVN5bmM7XG4gIGNvZGVGcmFtZUNvbHVtbnMgPSBub2RlUmVxdWlyZS5jYWxsKG1vZHVsZSwgJ0BiYWJlbC9jb2RlLWZyYW1lJykuY29kZUZyYW1lQ29sdW1ucztcbiAgY2hhbGsgPSBub2RlUmVxdWlyZS5jYWxsKG1vZHVsZSwgJ2NoYWxrJyk7XG59IGNhdGNoIHtcbiAgLy8gV2UncmUgaW4gYSBicm93c2VyIGVudmlyb25tZW50XG59XG5cbi8vIGZyYW1lIGhhcyB0aGUgZm9ybSBcImF0IG15TWV0aG9kIChsb2NhdGlvbi90by9teS9maWxlLmpzOjEwOjIpXCJcbmZ1bmN0aW9uIGdldENvZGVGcmFtZShmcmFtZSkge1xuICBjb25zdCBsb2NhdGlvblN0YXJ0ID0gZnJhbWUuaW5kZXhPZignKCcpICsgMTtcbiAgY29uc3QgbG9jYXRpb25FbmQgPSBmcmFtZS5pbmRleE9mKCcpJyk7XG4gIGNvbnN0IGZyYW1lTG9jYXRpb24gPSBmcmFtZS5zbGljZShsb2NhdGlvblN0YXJ0LCBsb2NhdGlvbkVuZCk7XG4gIGNvbnN0IGZyYW1lTG9jYXRpb25FbGVtZW50cyA9IGZyYW1lTG9jYXRpb24uc3BsaXQoJzonKTtcbiAgY29uc3QgW2ZpbGVuYW1lLCBsaW5lLCBjb2x1bW5dID0gW2ZyYW1lTG9jYXRpb25FbGVtZW50c1swXSwgcGFyc2VJbnQoZnJhbWVMb2NhdGlvbkVsZW1lbnRzWzFdLCAxMCksIHBhcnNlSW50KGZyYW1lTG9jYXRpb25FbGVtZW50c1syXSwgMTApXTtcbiAgbGV0IHJhd0ZpbGVDb250ZW50cyA9ICcnO1xuICB0cnkge1xuICAgIHJhd0ZpbGVDb250ZW50cyA9IHJlYWRGaWxlU3luYyhmaWxlbmFtZSwgJ3V0Zi04Jyk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBjb25zdCBjb2RlRnJhbWUgPSBjb2RlRnJhbWVDb2x1bW5zKHJhd0ZpbGVDb250ZW50cywge1xuICAgIHN0YXJ0OiB7XG4gICAgICBsaW5lLFxuICAgICAgY29sdW1uXG4gICAgfVxuICB9LCB7XG4gICAgaGlnaGxpZ2h0Q29kZTogdHJ1ZSxcbiAgICBsaW5lc0JlbG93OiAwXG4gIH0pO1xuICByZXR1cm4gYCR7Y2hhbGsuZGltKGZyYW1lTG9jYXRpb24pfVxcbiR7Y29kZUZyYW1lfVxcbmA7XG59XG5mdW5jdGlvbiBnZXRVc2VyQ29kZUZyYW1lKCkge1xuICAvLyBJZiB3ZSBjb3VsZG4ndCBsb2FkIGRlcGVuZGVuY2llcywgd2UgY2FuJ3QgZ2VuZXJhdGUgdGhlIHVzZXIgdHJhY2VcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKCFyZWFkRmlsZVN5bmMgfHwgIWNvZGVGcmFtZUNvbHVtbnMpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgY29uc3QgZXJyID0gbmV3IEVycm9yKCk7XG4gIGNvbnN0IGZpcnN0Q2xpZW50Q29kZUZyYW1lID0gZXJyLnN0YWNrLnNwbGl0KCdcXG4nKS5zbGljZSgxKSAvLyBSZW1vdmUgZmlyc3QgbGluZSB3aGljaCBoYXMgdGhlIGZvcm0gXCJFcnJvcjogVHlwZUVycm9yXCJcbiAgLmZpbmQoZnJhbWUgPT4gIWZyYW1lLmluY2x1ZGVzKCdub2RlX21vZHVsZXMvJykpOyAvLyBJZ25vcmUgZnJhbWVzIGZyb20gM3JkIHBhcnR5IGxpYnJhcmllc1xuXG4gIHJldHVybiBnZXRDb2RlRnJhbWUoZmlyc3RDbGllbnRDb2RlRnJhbWUpO1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLGdCQUFnQixHQUFHQSxnQkFBZ0I7QUFDM0M7QUFDQSxJQUFJQyxLQUFLLEdBQUcsSUFBSTtBQUNoQixJQUFJQyxZQUFZLEdBQUcsSUFBSTtBQUN2QixJQUFJQyxnQkFBZ0IsR0FBRyxJQUFJO0FBQzNCLElBQUk7RUFDRixJQUFNQyxXQUFXLEdBQUdDLE1BQU0sSUFBSUEsTUFBTSxD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