7f9e39eb2f14f2b1b9777a26d4747870
"use strict";

exports.__esModule = true;
exports.computeAccessibleDescription = computeAccessibleDescription;
var _accessibleNameAndDescription = require("./accessible-name-and-description");
var _util = require("./util");
function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
/**
 * @param root
 * @param options
 * @returns
 */
function computeAccessibleDescription(root) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var description = (0, _util.queryIdRefs)(root, "aria-describedby").map(function (element) {
    return (0, _accessibleNameAndDescription.computeTextAlternative)(element, _objectSpread(_objectSpread({}, options), {}, {
      compute: "description"
    }));
  }).join(" ");

  // TODO: Technically we need to make sure that node wasn't used for the accessible name
  //       This causes `description_1.0_combobox-focusable-manual` to fail
  //
  // https://www.w3.org/TR/html-aam-1.0/#accessible-name-and-description-computation
  // says for so many elements to use the `title` that we assume all elements are considered
  if (description === "") {
    var title = root.getAttribute("title");
    description = title === null ? "" : title;
  }
  return description;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYWNjZXNzaWJsZU5hbWVBbmREZXNjcmlwdGlvbiIsInJlcXVpcmUiLCJfdXRpbCIsIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsIk9iamVjdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJmb3JFYWNoIiwia2V5IiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJjb21wdXRlQWNjZXNzaWJsZURlc2NyaXB0aW9uIiwicm9vdCIsIm9wdGlvbnMiLCJkZXNjcmlwdGlvbiIsInF1ZXJ5SWRSZWZzIiwibWFwIiwiZWxlbWVudCIsImNvbXB1dGVUZXh0QWx0ZXJuYXRpdmUiLCJjb21wdXRlIiwiam9pbiIsInRpdGxlIiwiZ2V0QXR0cmlidXRlIl0sInNvdXJjZXMiOlsiLi4vc291cmNlcy9hY2Nlc3NpYmxlLWRlc2NyaXB0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdGNvbXB1dGVUZXh0QWx0ZXJuYXRpdmUsXG5cdENvbXB1dGVUZXh0QWx0ZXJuYXRpdmVPcHRpb25zLFxufSBmcm9tIFwiLi9hY2Nlc3NpYmxlLW5hbWUtYW5kLWRlc2NyaXB0aW9uXCI7XG5pbXBvcnQgeyBxdWVyeUlkUmVmcyB9IGZyb20gXCIuL3V0aWxcIjtcblxuLyoqXG4gKiBAcGFyYW0gcm9vdFxuICogQHBhcmFtIG9wdGlvbnNcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlQWNjZXNzaWJsZURlc2NyaXB0aW9uKFxuXHRyb290OiBFbGVtZW50LFxuXHRvcHRpb25zOiBDb21wdXRlVGV4dEFsdGVybmF0aXZlT3B0aW9ucyA9IHt9XG4pOiBzdHJpbmcge1xuXHRsZXQgZGVzY3JpcHRpb24gPSBxdWVyeUlkUmVmcyhyb290LCBcImFyaWEtZGVzY3JpYmVkYnlcIilcblx0XHQubWFwKChlbGVtZW50KSA9PiB7XG5cdFx0XHRyZXR1cm4gY29tcHV0ZVRleHRBbHRlcm5hdGl2ZShlbGVtZW50LCB7XG5cdFx0XHRcdC4uLm9wdGlvbnMsXG5cdFx0XHRcdGNvbXB1dGU6IFwiZGVzY3JpcHRpb25cIixcblx0XHRcdH0pO1xuXHRcdH0pXG5cdFx0LmpvaW4oXCIgXCIpO1xuXG5cdC8vIFRPRE86IFRlY2huaWNhbGx5IHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgbm9kZSB3YXNuJ3QgdXNlZCBmb3IgdGhlIGFjY2Vzc2libGUgbmFtZVxuXHQvLyAgICAgICBUaGlzIGNhdXNlcyBgZGVzY3JpcHRpb25fMS4wX2NvbWJvYm94LWZvY3VzYWJsZS1tYW51YWxgIHRvIGZhaWxcblx0Ly9cblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWwtYWFtLTEuMC8jYWNjZXNzaWJsZS1uYW1lLWFuZC1kZXNjcmlwdGlvbi1jb21wdXRhdGlvblxuXHQvLyBzYXlzIGZvciBzbyBtYW55IGVsZW1lbnRzIHRvIHVzZSB0aGUgYHRpdGxlYCB0aGF0IHdlIGFzc3VtZSBhbGwgZWxlbWVudHMgYXJlIGNvbnNpZGVyZWRcblx0aWYgKGRlc2NyaXB0aW9uID09PSBcIlwiKSB7XG5cdFx0Y29uc3QgdGl0bGUgPSByb290LmdldEF0dHJpYnV0ZShcInRpdGxlXCIpO1xuXHRcdGRlc2NyaXB0aW9uID0gdGl0bGUgPT09IG51bGwgPyBcIlwiIDogdGl0bGU7XG5cdH1cblxuXHRyZXR1cm4gZGVzY3JpcHRpb247XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFBQSw2QkFBQSxHQUFBQyxPQUFBO0FBSUEsSUFBQUMsS0FBQSxHQUFBRCxPQUFBO0FBQXFDLFNBQUFFLFFBQUFDLEdBQUE7RUFBQTs7RUFBQSxPQUFBRCxPQUFBLHdCQUFBRSxNQUFBLHVCQUFBQSxNQUFBLENBQUFDLFFBQUEsYUFBQUYsR0FBQTtJQUFBLGNBQUFBLEdBQUE7RUFBQSxjQUFBQSxHQUFBO0lBQUEsT0FBQUEsR0FBQSx5QkFBQUMsTUFBQSxJQUFBRCxHQUFBLENBQUFHLFdBQUEsS0FBQUYsTUFBQSxJQUFBRCxHQUFBLEtBQUFDLE1BQUEsQ0FBQUcsU0FBQSxxQkFBQUosR0FBQTtFQUFBLEdBQUFELE9BQUEsQ0FBQUMsR0FBQTtBQUFBO0FBQUEsU0FBQUssUUFBQUMsTUFBQSxFQUFBQyxjQUFBO0VBQUEsSUFBQUMsSUFBQSxHQUFBQyxNQUFBLENBQUFELElBQUEsQ0FBQUYsTUFBQTtFQUFBLElBQUFHLE1BQUEsQ0FBQUMscUJBQUE7SUFBQSxJQUFBQyxPQUFBLEdBQUFGLE1BQUEsQ0FBQUMscUJBQUEsQ0FBQUosTUFBQTtJQUFBQyxjQUFBLEtBQUFJLE9BQUEsR0FBQUEsT0FBQSxDQUFBQyxNQUFBLFdBQUFDLEdBQUE7TUFBQSxPQUFBSixNQUFBLENBQUFLLHdCQUFBLENBQUFSLE1BQUEsRUFBQU8sR0FBQSxFQUFBRSxVQUFBO0lBQUEsS0FBQVAsSUFBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsSUFBQSxFQUFBRyxPQUFBO0VBQUE7RUFBQSxPQUFBSCxJQUFBO0FBQUE7QUFBQSxTQUFBVSxjQUFBQyxNQUFBO0VBQUEsU0FBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxFQUFB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