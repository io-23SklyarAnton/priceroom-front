49e4991399e03be4d39d39626960f396
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _axios = _interopRequireDefault(require("axios"));
var _reactRouterDom = require("react-router-dom");
var _useAuth = _interopRequireDefault(require("../../hooks/useAuth"));
require("./DataInput.css");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
// @ts-nocheck
function stryNS_9fa48() {
  var g = (typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === 'object' && globalThis && globalThis.Math === Math && globalThis || new Function("return this")();
  var ns = g.__stryker__ || (g.__stryker__ = {});
  if (ns.activeMutant === undefined && g.process && g.process.env && g.process.env.__STRYKER_ACTIVE_MUTANT__) {
    ns.activeMutant = g.process.env.__STRYKER_ACTIVE_MUTANT__;
  }
  function retrieveNS() {
    return ns;
  }
  stryNS_9fa48 = retrieveNS;
  return retrieveNS();
}
stryNS_9fa48();
function stryCov_9fa48() {
  var ns = stryNS_9fa48();
  var cov = ns.mutantCoverage || (ns.mutantCoverage = {
    "static": {},
    perTest: {}
  });
  function cover() {
    var c = cov["static"];
    if (ns.currentTestId) {
      c = cov.perTest[ns.currentTestId] = cov.perTest[ns.currentTestId] || {};
    }
    var a = arguments;
    for (var i = 0; i < a.length; i++) {
      c[a[i]] = (c[a[i]] || 0) + 1;
    }
  }
  stryCov_9fa48 = cover;
  cover.apply(null, arguments);
}
function stryMutAct_9fa48(id) {
  var ns = stryNS_9fa48();
  function isActive(id) {
    if (ns.activeMutant === id) {
      if (ns.hitCount !== void 0 && ++ns.hitCount > ns.hitLimit) {
        throw new Error('Stryker: Hit count limit reached (' + ns.hitCount + ')');
      }
      return true;
    }
    return false;
  }
  stryMutAct_9fa48 = isActive;
  return isActive(id);
}
var DataInput = function DataInput() {
  if (stryMutAct_9fa48("43")) {
    {}
  } else {
    stryCov_9fa48("43");
    (0, _useAuth["default"])();
    var _useState = (0, _react.useState)(stryMutAct_9fa48("44") ? {} : (stryCov_9fa48("44"), {
        district: stryMutAct_9fa48("45") ? "Stryker was here!" : (stryCov_9fa48("45"), ''),
        floor: stryMutAct_9fa48("46") ? "Stryker was here!" : (stryCov_9fa48("46"), ''),
        floors_count: stryMutAct_9fa48("47") ? "Stryker was here!" : (stryCov_9fa48("47"), ''),
        rooms_count: stryMutAct_9fa48("48") ? "Stryker was here!" : (stryCov_9fa48("48"), ''),
        total_square_meters: stryMutAct_9fa48("49") ? "Stryker was here!" : (stryCov_9fa48("49"), '')
      })),
      _useState2 = _slicedToArray(_useState, 2),
      formData = _useState2[0],
      setFormData = _useState2[1];
    var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      price = _useState4[0],
      setPrice = _useState4[1];
    var _useState5 = (0, _react.useState)(stryMutAct_9fa48("50") ? "Stryker was here!" : (stryCov_9fa48("50"), '')),
      _useState6 = _slicedToArray(_useState5, 2),
      errorMessage = _useState6[0],
      setErrorMessage = _useState6[1];
    var _useState7 = (0, _react.useState)(stryMutAct_9fa48("51") ? {} : (stryCov_9fa48("51"), {
        district: stryMutAct_9fa48("52") ? "Stryker was here!" : (stryCov_9fa48("52"), ''),
        floor: stryMutAct_9fa48("53") ? "Stryker was here!" : (stryCov_9fa48("53"), ''),
        floors_count: stryMutAct_9fa48("54") ? "Stryker was here!" : (stryCov_9fa48("54"), ''),
        rooms_count: stryMutAct_9fa48("55") ? "Stryker was here!" : (stryCov_9fa48("55"), ''),
        total_square_meters: stryMutAct_9fa48("56") ? "Stryker was here!" : (stryCov_9fa48("56"), '')
      })),
      _useState8 = _slicedToArray(_useState7, 2),
      formErrors = _useState8[0],
      setFormErrors = _useState8[1];
    var _useState9 = (0, _react.useState)(stryMutAct_9fa48("57") ? true : (stryCov_9fa48("57"), false)),
      _useState10 = _slicedToArray(_useState9, 2),
      isSubmitting = _useState10[0],
      setIsSubmitting = _useState10[1];
    var navigate = (0, _reactRouterDom.useNavigate)();
    (0, _react.useEffect)(function () {
      if (stryMutAct_9fa48("58")) {
        {}
      } else {
        stryCov_9fa48("58");
        var token = localStorage.getItem(stryMutAct_9fa48("59") ? "" : (stryCov_9fa48("59"), 'token'));
        if (stryMutAct_9fa48("62") ? false : stryMutAct_9fa48("61") ? true : stryMutAct_9fa48("60") ? token : (stryCov_9fa48("60", "61", "62"), !token)) {
          if (stryMutAct_9fa48("63")) {
            {}
          } else {
            stryCov_9fa48("63");
            navigate(stryMutAct_9fa48("64") ? "" : (stryCov_9fa48("64"), '/auth'));
          }
        }
      }
    }, stryMutAct_9fa48("65") ? [] : (stryCov_9fa48("65"), [navigate]));
    var handleInputChange = function handleInputChange(e) {
      if (stryMutAct_9fa48("66")) {
        {}
      } else {
        stryCov_9fa48("66");
        var _e$target = e.target,
          name = _e$target.name,
          value = _e$target.value;
        setFormData(stryMutAct_9fa48("67") ? {} : (stryCov_9fa48("67"), _objectSpread(_objectSpread({}, formData), {}, _defineProperty({}, name, value))));
        setFormErrors(stryMutAct_9fa48("68") ? {} : (stryCov_9fa48("68"), _objectSpread(_objectSpread({}, formErrors), {}, _defineProperty({}, name, validateField(name, value)))));
      }
    };
    var validateField = function validateField(fieldName, value) {
      if (stryMutAct_9fa48("69")) {
        {}
      } else {
        stryCov_9fa48("69");
        if (stryMutAct_9fa48("72") ? fieldName === 'district' || !value : stryMutAct_9fa48("71") ? false : stryMutAct_9fa48("70") ? true : (stryCov_9fa48("70", "71", "72"), (stryMutAct_9fa48("74") ? fieldName !== 'district' : stryMutAct_9fa48("73") ? true : (stryCov_9fa48("73", "74"), fieldName === (stryMutAct_9fa48("75") ? "" : (stryCov_9fa48("75"), 'district')))) && (stryMutAct_9fa48("76") ? value : (stryCov_9fa48("76"), !value)))) {
          if (stryMutAct_9fa48("77")) {
            {}
          } else {
            stryCov_9fa48("77");
            return stryMutAct_9fa48("78") ? "" : (stryCov_9fa48("78"), "Це поле обов'язкове");
          }
        }
        if (stryMutAct_9fa48("81") ? fieldName === 'floor' || value < 1 || value > 100 : stryMutAct_9fa48("80") ? false : stryMutAct_9fa48("79") ? true : (stryCov_9fa48("79", "80", "81"), (stryMutAct_9fa48("83") ? fieldName !== 'floor' : stryMutAct_9fa48("82") ? true : (stryCov_9fa48("82", "83"), fieldName === (stryMutAct_9fa48("84") ? "" : (stryCov_9fa48("84"), 'floor')))) && (stryMutAct_9fa48("86") ? value < 1 && value > 100 : stryMutAct_9fa48("85") ? true : (stryCov_9fa48("85", "86"), (stryMutAct_9fa48("89") ? value >= 1 : stryMutAct_9fa48("88") ? value <= 1 : stryMutAct_9fa48("87") ? false : (stryCov_9fa48("87", "88", "89"), value < 1)) || (stryMutAct_9fa48("92") ? value <= 100 : stryMutAct_9fa48("91") ? value >= 100 : stryMutAct_9fa48("90") ? false : (stryCov_9fa48("90", "91", "92"), value > 100)))))) {
          if (stryMutAct_9fa48("93")) {
            {}
          } else {
            stryCov_9fa48("93");
            return stryMutAct_9fa48("94") ? "" : (stryCov_9fa48("94"), 'Поверх має бути в межах від 1 до 100');
          }
        }
        if (stryMutAct_9fa48("97") ? fieldName === 'floors_count' || value < 1 || value > 100 : stryMutAct_9fa48("96") ? false : stryMutAct_9fa48("95") ? true : (stryCov_9fa48("95", "96", "97"), (stryMutAct_9fa48("99") ? fieldName !== 'floors_count' : stryMutAct_9fa48("98") ? true : (stryCov_9fa48("98", "99"), fieldName === (stryMutAct_9fa48("100") ? "" : (stryCov_9fa48("100"), 'floors_count')))) && (stryMutAct_9fa48("102") ? value < 1 && value > 100 : stryMutAct_9fa48("101") ? true : (stryCov_9fa48("101", "102"), (stryMutAct_9fa48("105") ? value >= 1 : stryMutAct_9fa48("104") ? value <= 1 : stryMutAct_9fa48("103") ? false : (stryCov_9fa48("103", "104", "105"), value < 1)) || (stryMutAct_9fa48("108") ? value <= 100 : stryMutAct_9fa48("107") ? value >= 100 : stryMutAct_9fa48("106") ? false : (stryCov_9fa48("106", "107", "108"), value > 100)))))) {
          if (stryMutAct_9fa48("109")) {
            {}
          } else {
            stryCov_9fa48("109");
            return stryMutAct_9fa48("110") ? "" : (stryCov_9fa48("110"), 'Загальна кількість поверхів має бути в межах від 1 до 100');
          }
        }
        if (stryMutAct_9fa48("113") ? fieldName === 'rooms_count' || value < 1 || value > 10 : stryMutAct_9fa48("112") ? false : stryMutAct_9fa48("111") ? true : (stryCov_9fa48("111", "112", "113"), (stryMutAct_9fa48("115") ? fieldName !== 'rooms_count' : stryMutAct_9fa48("114") ? true : (stryCov_9fa48("114", "115"), fieldName === (stryMutAct_9fa48("116") ? "" : (stryCov_9fa48("116"), 'rooms_count')))) && (stryMutAct_9fa48("118") ? value < 1 && value > 10 : stryMutAct_9fa48("117") ? true : (stryCov_9fa48("117", "118"), (stryMutAct_9fa48("121") ? value >= 1 : stryMutAct_9fa48("120") ? value <= 1 : stryMutAct_9fa48("119") ? false : (stryCov_9fa48("119", "120", "121"), value < 1)) || (stryMutAct_9fa48("124") ? value <= 10 : stryMutAct_9fa48("123") ? value >= 10 : stryMutAct_9fa48("122") ? false : (stryCov_9fa48("122", "123", "124"), value > 10)))))) {
          if (stryMutAct_9fa48("125")) {
            {}
          } else {
            stryCov_9fa48("125");
            return stryMutAct_9fa48("126") ? "" : (stryCov_9fa48("126"), 'Кількість кімнат має бути в межах від 1 до 10');
          }
        }
        if (stryMutAct_9fa48("129") ? fieldName === 'total_square_meters' || value < 1 || value > 1000 : stryMutAct_9fa48("128") ? false : stryMutAct_9fa48("127") ? true : (stryCov_9fa48("127", "128", "129"), (stryMutAct_9fa48("131") ? fieldName !== 'total_square_meters' : stryMutAct_9fa48("130") ? true : (stryCov_9fa48("130", "131"), fieldName === (stryMutAct_9fa48("132") ? "" : (stryCov_9fa48("132"), 'total_square_meters')))) && (stryMutAct_9fa48("134") ? value < 1 && value > 1000 : stryMutAct_9fa48("133") ? true : (stryCov_9fa48("133", "134"), (stryMutAct_9fa48("137") ? value >= 1 : stryMutAct_9fa48("136") ? value <= 1 : stryMutAct_9fa48("135") ? false : (stryCov_9fa48("135", "136", "137"), value < 1)) || (stryMutAct_9fa48("140") ? value <= 1000 : stryMutAct_9fa48("139") ? value >= 1000 : stryMutAct_9fa48("138") ? false : (stryCov_9fa48("138", "139", "140"), value > 1000)))))) {
          if (stryMutAct_9fa48("141")) {
            {}
          } else {
            stryCov_9fa48("141");
            return stryMutAct_9fa48("142") ? "" : (stryCov_9fa48("142"), 'Площа має бути в межах від 1 до 1000 м²');
          }
        }
        return stryMutAct_9fa48("143") ? "Stryker was here!" : (stryCov_9fa48("143"), '');
      }
    };
    var handleSubmit = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(e) {
        var token, errors, response;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!stryMutAct_9fa48("144")) {
                _context.next = 3;
                break;
              }
              _context.next = 43;
              break;
            case 3:
              stryCov_9fa48("144");
              e.preventDefault();
              token = localStorage.getItem(stryMutAct_9fa48("145") ? "" : (stryCov_9fa48("145"), 'token'));
              if (!(stryMutAct_9fa48("148") ? false : stryMutAct_9fa48("147") ? true : stryMutAct_9fa48("146") ? token : (stryCov_9fa48("146", "147", "148"), !token))) {
                _context.next = 13;
                break;
              }
              if (!stryMutAct_9fa48("149")) {
                _context.next = 10;
                break;
              }
              _context.next = 13;
              break;
            case 10:
              stryCov_9fa48("149");
              navigate(stryMutAct_9fa48("150") ? "" : (stryCov_9fa48("150"), '/auth'));
              return _context.abrupt("return");
            case 13:
              errors = Object.keys(formData).reduce(function (acc, key) {
                if (stryMutAct_9fa48("151")) {
                  {}
                } else {
                  stryCov_9fa48("151");
                  var error = validateField(key, formData[key]);
                  if (stryMutAct_9fa48("153") ? false : stryMutAct_9fa48("152") ? true : (stryCov_9fa48("152", "153"), error)) acc[key] = error;
                  return acc;
                }
              }, {});
              setFormErrors(errors);
              if (!(stryMutAct_9fa48("157") ? Object.keys(errors).length <= 0 : stryMutAct_9fa48("156") ? Object.keys(errors).length >= 0 : stryMutAct_9fa48("155") ? false : stryMutAct_9fa48("154") ? true : (stryCov_9fa48("154", "155", "156", "157"), Object.keys(errors).length > 0))) {
                _context.next = 22;
                break;
              }
              if (!stryMutAct_9fa48("158")) {
                _context.next = 19;
                break;
              }
              _context.next = 22;
              break;
            case 19:
              stryCov_9fa48("158");
              setErrorMessage(stryMutAct_9fa48("159") ? "" : (stryCov_9fa48("159"), 'Будь ласка, виправте помилки у формі.'));
              return _context.abrupt("return");
            case 22:
              setIsSubmitting(stryMutAct_9fa48("160") ? false : (stryCov_9fa48("160"), true));
              _context.prev = 23;
              if (!stryMutAct_9fa48("161")) {
                _context.next = 27;
                break;
              }
              _context.next = 35;
              break;
            case 27:
              stryCov_9fa48("161");
              _context.next = 30;
              return _axios["default"].post(stryMutAct_9fa48("162") ? "" : (stryCov_9fa48("162"), 'http://98.83.92.105:8000/api/predict-price/'), formData, stryMutAct_9fa48("163") ? {} : (stryCov_9fa48("163"), {
                headers: stryMutAct_9fa48("164") ? {} : (stryCov_9fa48("164"), {
                  Authorization: stryMutAct_9fa48("165") ? "" : (stryCov_9fa48("165"), "Bearer ".concat(token)),
                  'Content-Type': stryMutAct_9fa48("166") ? "" : (stryCov_9fa48("166"), 'application/json')
                })
              }));
            case 30:
              response = _context.sent;
              setPrice(response.data.price);
              setErrorMessage(stryMutAct_9fa48("167") ? "Stryker was here!" : (stryCov_9fa48("167"), ''));
              _context.next = 35;
              return _axios["default"].post(stryMutAct_9fa48("168") ? "" : (stryCov_9fa48("168"), 'http://localhost:5000/'), stryMutAct_9fa48("169") ? {} : (stryCov_9fa48("169"), _objectSpread(_objectSpread({}, formData), {}, {
                predict_price: response.data.price
              })), stryMutAct_9fa48("170") ? {} : (stryCov_9fa48("170"), {
                headers: stryMutAct_9fa48("171") ? {} : (stryCov_9fa48("171"), {
                  Authorization: stryMutAct_9fa48("172") ? "" : (stryCov_9fa48("172"), "Bearer ".concat(token))
                })
              }));
            case 35:
              _context.next = 40;
              break;
            case 37:
              _context.prev = 37;
              _context.t0 = _context["catch"](23);
              if (stryMutAct_9fa48("173")) {
                {}
              } else {
                stryCov_9fa48("173");
                console.error(stryMutAct_9fa48("174") ? "" : (stryCov_9fa48("174"), 'Error:'), _context.t0);
                setErrorMessage(stryMutAct_9fa48("175") ? "" : (stryCov_9fa48("175"), 'Не вдалося отримати прогноз ціни або зберегти дані.'));
              }
            case 40:
              _context.prev = 40;
              if (stryMutAct_9fa48("176")) {
                {}
              } else {
                stryCov_9fa48("176");
                setIsSubmitting(stryMutAct_9fa48("177") ? true : (stryCov_9fa48("177"), false));
              }
              return _context.finish(40);
            case 43:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[23, 37, 40, 43]]);
      }));
      return function handleSubmit(_x) {
        return _ref.apply(this, arguments);
      };
    }();
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "data-input-container"
    }, /*#__PURE__*/_react["default"].createElement("h2", null, "\u041F\u0440\u043E\u0433\u043D\u043E\u0437\u0443\u0439\u0442\u0435 \u0446\u0456\u043D\u0443 \u043D\u0435\u0440\u0443\u0445\u043E\u043C\u043E\u0441\u0442\u0456"), /*#__PURE__*/_react["default"].createElement("form", {
      className: "data-input-form",
      onSubmit: handleSubmit
    }, /*#__PURE__*/_react["default"].createElement("label", null, "\u0420\u0430\u0439\u043E\u043D:", /*#__PURE__*/_react["default"].createElement("select", {
      name: "district",
      value: formData.district,
      onChange: handleInputChange,
      className: formErrors.district ? stryMutAct_9fa48("178") ? "" : (stryCov_9fa48("178"), 'input-error') : stryMutAct_9fa48("179") ? "Stryker was here!" : (stryCov_9fa48("179"), ''),
      disabled: isSubmitting
    }, /*#__PURE__*/_react["default"].createElement("option", {
      value: ""
    }, "\u041E\u0431\u0435\u0440\u0456\u0442\u044C \u0440\u0430\u0439\u043E\u043D"), (stryMutAct_9fa48("180") ? [] : (stryCov_9fa48("180"), [stryMutAct_9fa48("181") ? "" : (stryCov_9fa48("181"), 'Деснянський'), stryMutAct_9fa48("182") ? "" : (stryCov_9fa48("182"), 'Святошинський'), stryMutAct_9fa48("183") ? "" : (stryCov_9fa48("183"), 'Дніпровський'), stryMutAct_9fa48("184") ? "" : (stryCov_9fa48("184"), 'Печерський'), stryMutAct_9fa48("185") ? "" : (stryCov_9fa48("185"), 'Голосіївський'), stryMutAct_9fa48("186") ? "" : (stryCov_9fa48("186"), 'Дарницький'), stryMutAct_9fa48("187") ? "" : (stryCov_9fa48("187"), 'Солом’янський'), stryMutAct_9fa48("188") ? "" : (stryCov_9fa48("188"), 'Оболонський'), stryMutAct_9fa48("189") ? "" : (stryCov_9fa48("189"), 'Шевченківський'), stryMutAct_9fa48("190") ? "" : (stryCov_9fa48("190"), 'Подільський')])).map(stryMutAct_9fa48("191") ? function () {
      return undefined;
    } : (stryCov_9fa48("191"), function (district) {
      return /*#__PURE__*/_react["default"].createElement("option", {
        key: district,
        value: district
      }, district);
    }))), stryMutAct_9fa48("194") ? formErrors.district || /*#__PURE__*/_react["default"].createElement("p", {
      className: "error-message"
    }, formErrors.district) : stryMutAct_9fa48("193") ? false : stryMutAct_9fa48("192") ? true : (stryCov_9fa48("192", "193", "194"), formErrors.district && /*#__PURE__*/_react["default"].createElement("p", {
      className: "error-message"
    }, formErrors.district))), /*#__PURE__*/_react["default"].createElement("label", null, "\u041F\u043E\u0432\u0435\u0440\u0445:", /*#__PURE__*/_react["default"].createElement("input", {
      type: "number",
      name: "floor",
      value: formData.floor,
      onChange: handleInputChange,
      min: "1",
      max: "100",
      className: formErrors.floor ? stryMutAct_9fa48("195") ? "" : (stryCov_9fa48("195"), 'input-error') : stryMutAct_9fa48("196") ? "Stryker was here!" : (stryCov_9fa48("196"), ''),
      disabled: isSubmitting
    }), stryMutAct_9fa48("199") ? formErrors.floor || /*#__PURE__*/_react["default"].createElement("p", {
      className: "error-message"
    }, formErrors.floor) : stryMutAct_9fa48("198") ? false : stryMutAct_9fa48("197") ? true : (stryCov_9fa48("197", "198", "199"), formErrors.floor && /*#__PURE__*/_react["default"].createElement("p", {
      className: "error-message"
    }, formErrors.floor))), /*#__PURE__*/_react["default"].createElement("label", null, "\u0417\u0430\u0433\u0430\u043B\u044C\u043D\u0430 \u043A\u0456\u043B\u044C\u043A\u0456\u0441\u0442\u044C \u043F\u043E\u0432\u0435\u0440\u0445\u0456\u0432:", /*#__PURE__*/_react["default"].createElement("input", {
      type: "number",
      name: "floors_count",
      value: formData.floors_count,
      onChange: handleInputChange,
      min: "1",
      max: "100",
      className: formErrors.floors_count ? stryMutAct_9fa48("200") ? "" : (stryCov_9fa48("200"), 'input-error') : stryMutAct_9fa48("201") ? "Stryker was here!" : (stryCov_9fa48("201"), ''),
      disabled: isSubmitting
    }), stryMutAct_9fa48("204") ? formErrors.floors_count || /*#__PURE__*/_react["default"].createElement("p", {
      className: "error-message"
    }, formErrors.floors_count) : stryMutAct_9fa48("203") ? false : stryMutAct_9fa48("202") ? true : (stryCov_9fa48("202", "203", "204"), formErrors.floors_count && /*#__PURE__*/_react["default"].createElement("p", {
      className: "error-message"
    }, formErrors.floors_count))), /*#__PURE__*/_react["default"].createElement("label", null, "\u041A\u0456\u043B\u044C\u043A\u0456\u0441\u0442\u044C \u043A\u0456\u043C\u043D\u0430\u0442:", /*#__PURE__*/_react["default"].createElement("input", {
      type: "number",
      name: "rooms_count",
      value: formData.rooms_count,
      onChange: handleInputChange,
      min: "1",
      max: "10",
      className: formErrors.rooms_count ? stryMutAct_9fa48("205") ? "" : (stryCov_9fa48("205"), 'input-error') : stryMutAct_9fa48("206") ? "Stryker was here!" : (stryCov_9fa48("206"), ''),
      disabled: isSubmitting
    }), stryMutAct_9fa48("209") ? formErrors.rooms_count || /*#__PURE__*/_react["default"].createElement("p", {
      className: "error-message"
    }, formErrors.rooms_count) : stryMutAct_9fa48("208") ? false : stryMutAct_9fa48("207") ? true : (stryCov_9fa48("207", "208", "209"), formErrors.rooms_count && /*#__PURE__*/_react["default"].createElement("p", {
      className: "error-message"
    }, formErrors.rooms_count))), /*#__PURE__*/_react["default"].createElement("label", null, "\u0417\u0430\u0433\u0430\u043B\u044C\u043D\u0430 \u043F\u043B\u043E\u0449\u0430 \u043A\u0432\u0430\u0440\u0442\u0438\u0440\u0438 (\u043C\xB2):", /*#__PURE__*/_react["default"].createElement("input", {
      type: "text",
      name: "total_square_meters",
      value: formData.total_square_meters,
      onChange: handleInputChange,
      className: formErrors.total_square_meters ? stryMutAct_9fa48("210") ? "" : (stryCov_9fa48("210"), 'input-error') : stryMutAct_9fa48("211") ? "Stryker was here!" : (stryCov_9fa48("211"), ''),
      disabled: isSubmitting,
      pattern: "^\\d+(\\.\\d{1,2})?$"
    }), stryMutAct_9fa48("214") ? formErrors.total_square_meters || /*#__PURE__*/_react["default"].createElement("p", {
      className: "error-message"
    }, formErrors.total_square_meters) : stryMutAct_9fa48("213") ? false : stryMutAct_9fa48("212") ? true : (stryCov_9fa48("212", "213", "214"), formErrors.total_square_meters && /*#__PURE__*/_react["default"].createElement("p", {
      className: "error-message"
    }, formErrors.total_square_meters))), isSubmitting ? /*#__PURE__*/_react["default"].createElement("div", {
      className: "loading-text"
    }, "\u0417\u0430\u0432\u0430\u043D\u0442\u0430\u0436\u0435\u043D\u043D\u044F...") : /*#__PURE__*/_react["default"].createElement("button", {
      type: "submit"
    }, "\u041F\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0438"), stryMutAct_9fa48("217") ? price !== null && !isSubmitting || /*#__PURE__*/_react["default"].createElement("p", {
      className: "price-output"
    }, "\u041F\u0440\u043E\u0433\u043D\u043E\u0437\u043E\u0432\u0430\u043D\u0430 \u0446\u0456\u043D\u0430: ", price.toFixed(2), " \u0434\u043E\u043B.") : stryMutAct_9fa48("216") ? false : stryMutAct_9fa48("215") ? true : (stryCov_9fa48("215", "216", "217"), (stryMutAct_9fa48("219") ? price !== null || !isSubmitting : stryMutAct_9fa48("218") ? true : (stryCov_9fa48("218", "219"), (stryMutAct_9fa48("221") ? price === null : stryMutAct_9fa48("220") ? true : (stryCov_9fa48("220", "221"), price !== null)) && (stryMutAct_9fa48("222") ? isSubmitting : (stryCov_9fa48("222"), !isSubmitting)))) && /*#__PURE__*/_react["default"].createElement("p", {
      className: "price-output"
    }, "\u041F\u0440\u043E\u0433\u043D\u043E\u0437\u043E\u0432\u0430\u043D\u0430 \u0446\u0456\u043D\u0430: ", price.toFixed(2), " \u0434\u043E\u043B."))), stryMutAct_9fa48("225") ? errorMessage || /*#__PURE__*/_react["default"].createElement("p", {
      className: "error-message"
    }, errorMessage) : stryMutAct_9fa48("224") ? false : stryMutAct_9fa48("223") ? true : (stryCov_9fa48("223", "224", "225"), errorMessage && /*#__PURE__*/_react["default"].createElement("p", {
      className: "error-message"
    }, errorMessage)));
  }
};
var _default = exports["default"] = DataInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,