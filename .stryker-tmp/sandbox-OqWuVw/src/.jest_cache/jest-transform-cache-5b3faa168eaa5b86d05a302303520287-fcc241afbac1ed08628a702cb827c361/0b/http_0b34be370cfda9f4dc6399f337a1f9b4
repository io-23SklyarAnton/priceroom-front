6b267df1a7826494414c040736ccdcbe
'use strict';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.__setProxy = void 0;
var _utils = _interopRequireDefault(require("./../utils.js"));
var _settle = _interopRequireDefault(require("./../core/settle.js"));
var _buildFullPath = _interopRequireDefault(require("../core/buildFullPath.js"));
var _buildURL = _interopRequireDefault(require("./../helpers/buildURL.js"));
var _proxyFromEnv = _interopRequireDefault(require("proxy-from-env"));
var _http = _interopRequireDefault(require("http"));
var _https = _interopRequireDefault(require("https"));
var _util = _interopRequireDefault(require("util"));
var _followRedirects = _interopRequireDefault(require("follow-redirects"));
var _zlib = _interopRequireDefault(require("zlib"));
var _data = require("../env/data.js");
var _transitional = _interopRequireDefault(require("../defaults/transitional.js"));
var _AxiosError = _interopRequireDefault(require("../core/AxiosError.js"));
var _CanceledError = _interopRequireDefault(require("../cancel/CanceledError.js"));
var _index = _interopRequireDefault(require("../platform/index.js"));
var _fromDataURI = _interopRequireDefault(require("../helpers/fromDataURI.js"));
var _stream = _interopRequireDefault(require("stream"));
var _AxiosHeaders = _interopRequireDefault(require("../core/AxiosHeaders.js"));
var _AxiosTransformStream = _interopRequireDefault(require("../helpers/AxiosTransformStream.js"));
var _events = require("events");
var _formDataToStream = _interopRequireDefault(require("../helpers/formDataToStream.js"));
var _readBlob = _interopRequireDefault(require("../helpers/readBlob.js"));
var _ZlibHeaderTransformStream = _interopRequireDefault(require("../helpers/ZlibHeaderTransformStream.js"));
var _callbackify = _interopRequireDefault(require("../helpers/callbackify.js"));
var _progressEventReducer = require("../helpers/progressEventReducer.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var zlibOptions = {
  flush: _zlib["default"].constants.Z_SYNC_FLUSH,
  finishFlush: _zlib["default"].constants.Z_SYNC_FLUSH
};
var brotliOptions = {
  flush: _zlib["default"].constants.BROTLI_OPERATION_FLUSH,
  finishFlush: _zlib["default"].constants.BROTLI_OPERATION_FLUSH
};
var isBrotliSupported = _utils["default"].isFunction(_zlib["default"].createBrotliDecompress);
var httpFollow = _followRedirects["default"].http,
  httpsFollow = _followRedirects["default"].https;
var isHttps = /https:?/;
var supportedProtocols = _index["default"].protocols.map(function (protocol) {
  return protocol + ':';
});
var flushOnFinish = function flushOnFinish(stream, _ref) {
  var _ref2 = _slicedToArray(_ref, 2),
    throttled = _ref2[0],
    flush = _ref2[1];
  stream.on('end', flush).on('error', flush);
  return throttled;
};

/**
 * If the proxy or config beforeRedirects functions are defined, call them with the options
 * object.
 *
 * @param {Object<string, any>} options - The options object that was passed to the request.
 *
 * @returns {Object<string, any>}
 */
function dispatchBeforeRedirect(options, responseDetails) {
  if (options.beforeRedirects.proxy) {
    options.beforeRedirects.proxy(options);
  }
  if (options.beforeRedirects.config) {
    options.beforeRedirects.config(options, responseDetails);
  }
}

/**
 * If the proxy or config afterRedirects functions are defined, call them with the options
 *
 * @param {http.ClientRequestArgs} options
 * @param {AxiosProxyConfig} configProxy configuration from Axios options object
 * @param {string} location
 *
 * @returns {http.ClientRequestArgs}
 */
function setProxy(options, configProxy, location) {
  var proxy = configProxy;
  if (!proxy && proxy !== false) {
    var proxyUrl = _proxyFromEnv["default"].getProxyForUrl(location);
    if (proxyUrl) {
      proxy = new URL(proxyUrl);
    }
  }
  if (proxy) {
    // Basic proxy authorization
    if (proxy.username) {
      proxy.auth = (proxy.username || '') + ':' + (proxy.password || '');
    }
    if (proxy.auth) {
      // Support proxy auth object form
      if (proxy.auth.username || proxy.auth.password) {
        proxy.auth = (proxy.auth.username || '') + ':' + (proxy.auth.password || '');
      }
      var base64 = Buffer.from(proxy.auth, 'utf8').toString('base64');
      options.headers['Proxy-Authorization'] = 'Basic ' + base64;
    }
    options.headers.host = options.hostname + (options.port ? ':' + options.port : '');
    var proxyHost = proxy.hostname || proxy.host;
    options.hostname = proxyHost;
    // Replace 'host' since options is not a URL object
    options.host = proxyHost;
    options.port = proxy.port;
    options.path = location;
    if (proxy.protocol) {
      options.protocol = proxy.protocol.includes(':') ? proxy.protocol : "".concat(proxy.protocol, ":");
    }
  }
  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {
    // Configure proxy for redirected request, passing the original config proxy to apply
    // the exact same logic as if the redirected request was performed by axios directly.
    setProxy(redirectOptions, configProxy, redirectOptions.href);
  };
}
var isHttpAdapterSupported = typeof process !== 'undefined' && _utils["default"].kindOf(process) === 'process';

// temporary hotfix

var wrapAsync = function wrapAsync(asyncExecutor) {
  return new Promise(function (resolve, reject) {
    var onDone;
    var isDone;
    var done = function done(value, isRejected) {
      if (isDone) return;
      isDone = true;
      onDone && onDone(value, isRejected);
    };
    var _resolve = function _resolve(value) {
      done(value);
      resolve(value);
    };
    var _reject = function _reject(reason) {
      done(reason, true);
      reject(reason);
    };
    asyncExecutor(_resolve, _reject, function (onDoneHandler) {
      return onDone = onDoneHandler;
    })["catch"](_reject);
  });
};
var resolveFamily = function resolveFamily(_ref3) {
  var address = _ref3.address,
    family = _ref3.family;
  if (!_utils["default"].isString(address)) {
    throw TypeError('address must be a string');
  }
  return {
    address: address,
    family: family || (address.indexOf('.') < 0 ? 6 : 4)
  };
};
var buildAddressEntry = function buildAddressEntry(address, family) {
  return resolveFamily(_utils["default"].isObject(address) ? address : {
    address: address,
    family: family
  });
};

/*eslint consistent-return:0*/
var _default = exports["default"] = isHttpAdapterSupported && function httpAdapter(config) {
  return wrapAsync(/*#__PURE__*/function () {
    var _dispatchHttpRequest = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject, onDone) {
      var data, lookup, family, responseType, responseEncoding, method, isDone, rejected, req, _lookup, emitter, onFinished, abort, fullPath, parsed, protocol, convertedData, headers, onUploadProgress, onDownloadProgress, maxRate, maxUploadRate, maxDownloadRate, userBoundary, knownLength, contentLength, auth, username, password, urlUsername, urlPassword, path, customErr, options, transport, isHttpsRequest, timeout, ended, errored;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            abort = function _abort(reason) {
              emitter.emit('abort', !reason || reason.type ? new _CanceledError["default"](null, config, req) : reason);
            };
            data = config.data, lookup = config.lookup, family = config.family;
            responseType = config.responseType, responseEncoding = config.responseEncoding;
            method = config.method.toUpperCase();
            rejected = false;
            if (lookup) {
              _lookup = (0, _callbackify["default"])(lookup, function (value) {
                return _utils["default"].isArray(value) ? value : [value];
              }); // hotfix to support opt.all option which is required for node 20.x
              lookup = function lookup(hostname, opt, cb) {
                _lookup(hostname, opt, function (err, arg0, arg1) {
                  if (err) {
                    return cb(err);
                  }
                  var addresses = _utils["default"].isArray(arg0) ? arg0.map(function (addr) {
                    return buildAddressEntry(addr);
                  }) : [buildAddressEntry(arg0, arg1)];
                  opt.all ? cb(err, addresses) : cb(err, addresses[0].address, addresses[0].family);
                });
              };
            }

            // temporary internal emitter until the AxiosRequest class will be implemented
            emitter = new _events.EventEmitter();
            onFinished = function onFinished() {
              if (config.cancelToken) {
                config.cancelToken.unsubscribe(abort);
              }
              if (config.signal) {
                config.signal.removeEventListener('abort', abort);
              }
              emitter.removeAllListeners();
            };
            onDone(function (value, isRejected) {
              isDone = true;
              if (isRejected) {
                rejected = true;
                onFinished();
              }
            });
            emitter.once('abort', reject);
            if (config.cancelToken || config.signal) {
              config.cancelToken && config.cancelToken.subscribe(abort);
              if (config.signal) {
                config.signal.aborted ? abort() : config.signal.addEventListener('abort', abort);
              }
            }

            // Parse url
            fullPath = (0, _buildFullPath["default"])(config.baseURL, config.url);
            parsed = new URL(fullPath, _index["default"].hasBrowserEnv ? _index["default"].origin : undefined);
            protocol = parsed.protocol || supportedProtocols[0];
            if (!(protocol === 'data:')) {
              _context.next = 26;
              break;
            }
            if (!(method !== 'GET')) {
              _context.next = 17;
              break;
            }
            return _context.abrupt("return", (0, _settle["default"])(resolve, reject, {
              status: 405,
              statusText: 'method not allowed',
              headers: {},
              config: config
            }));
          case 17:
            _context.prev = 17;
            convertedData = (0, _fromDataURI["default"])(config.url, responseType === 'blob', {
              Blob: config.env && config.env.Blob
            });
            _context.next = 24;
            break;
          case 21:
            _context.prev = 21;
            _context.t0 = _context["catch"](17);
            throw _AxiosError["default"].from(_context.t0, _AxiosError["default"].ERR_BAD_REQUEST, config);
          case 24:
            if (responseType === 'text') {
              convertedData = convertedData.toString(responseEncoding);
              if (!responseEncoding || responseEncoding === 'utf8') {
                convertedData = _utils["default"].stripBOM(convertedData);
              }
            } else if (responseType === 'stream') {
              convertedData = _stream["default"].Readable.from(convertedData);
            }
            return _context.abrupt("return", (0, _settle["default"])(resolve, reject, {
              data: convertedData,
              status: 200,
              statusText: 'OK',
              headers: new _AxiosHeaders["default"](),
              config: config
            }));
          case 26:
            if (!(supportedProtocols.indexOf(protocol) === -1)) {
              _context.next = 28;
              break;
            }
            return _context.abrupt("return", reject(new _AxiosError["default"]('Unsupported protocol ' + protocol, _AxiosError["default"].ERR_BAD_REQUEST, config)));
          case 28:
            headers = _AxiosHeaders["default"].from(config.headers).normalize(); // Set User-Agent (required by some servers)
            // See https://github.com/axios/axios/issues/69
            // User-Agent is specified; handle case where no UA header is desired
            // Only set header if it hasn't been set in config
            headers.set('User-Agent', 'axios/' + _data.VERSION, false);
            onUploadProgress = config.onUploadProgress, onDownloadProgress = config.onDownloadProgress;
            maxRate = config.maxRate;
            maxUploadRate = undefined;
            maxDownloadRate = undefined; // support for spec compliant FormData objects
            if (!_utils["default"].isSpecCompliantForm(data)) {
              _context.next = 39;
              break;
            }
            userBoundary = headers.getContentType(/boundary=([-_\w\d]{10,70})/i);
            data = (0, _formDataToStream["default"])(data, function (formHeaders) {
              headers.set(formHeaders);
            }, {
              tag: "axios-".concat(_data.VERSION, "-boundary"),
              boundary: userBoundary && userBoundary[1] || undefined
            });
            // support for https://www.npmjs.com/package/form-data api
            _context.next = 75;
            break;
          case 39:
            if (!(_utils["default"].isFormData(data) && _utils["default"].isFunction(data.getHeaders))) {
              _context.next = 53;
              break;
            }
            headers.set(data.getHeaders());
            if (headers.hasContentLength()) {
              _context.next = 51;
              break;
            }
            _context.prev = 42;
            _context.next = 45;
            return _util["default"].promisify(data.getLength).call(data);
          case 45:
            knownLength = _context.sent;
            Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);
            /*eslint no-empty:0*/
            _context.next = 51;
            break;
          case 49:
            _context.prev = 49;
            _context.t1 = _context["catch"](42);
          case 51:
            _context.next = 75;
            break;
          case 53:
            if (!(_utils["default"].isBlob(data) || _utils["default"].isFile(data))) {
              _context.next = 59;
              break;
            }
            data.size && headers.setContentType(data.type || 'application/octet-stream');
            headers.setContentLength(data.size || 0);
            data = _stream["default"].Readable.from((0, _readBlob["default"])(data));
            _context.next = 75;
            break;
          case 59:
            if (!(data && !_utils["default"].isStream(data))) {
              _context.next = 75;
              break;
            }
            if (!Buffer.isBuffer(data)) {
              _context.next = 63;
              break;
            }
            _context.next = 72;
            break;
          case 63:
            if (!_utils["default"].isArrayBuffer(data)) {
              _context.next = 67;
              break;
            }
            data = Buffer.from(new Uint8Array(data));
            _context.next = 72;
            break;
          case 67:
            if (!_utils["default"].isString(data)) {
              _context.next = 71;
              break;
            }
            data = Buffer.from(data, 'utf-8');
            _context.next = 72;
            break;
          case 71:
            return _context.abrupt("return", reject(new _AxiosError["default"]('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', _AxiosError["default"].ERR_BAD_REQUEST, config)));
          case 72:
            // Add Content-Length header if data exists
            headers.setContentLength(data.length, false);
            if (!(config.maxBodyLength > -1 && data.length > config.maxBodyLength)) {
              _context.next = 75;
              break;
            }
            return _context.abrupt("return", reject(new _AxiosError["default"]('Request body larger than maxBodyLength limit', _AxiosError["default"].ERR_BAD_REQUEST, config)));
          case 75:
            contentLength = _utils["default"].toFiniteNumber(headers.getContentLength());
            if (_utils["default"].isArray(maxRate)) {
              maxUploadRate = maxRate[0];
              maxDownloadRate = maxRate[1];
            } else {
              maxUploadRate = maxDownloadRate = maxRate;
            }
            if (data && (onUploadProgress || maxUploadRate)) {
              if (!_utils["default"].isStream(data)) {
                data = _stream["default"].Readable.from(data, {
                  objectMode: false
                });
              }
              data = _stream["default"].pipeline([data, new _AxiosTransformStream["default"]({
                maxRate: _utils["default"].toFiniteNumber(maxUploadRate)
              })], _utils["default"].noop);
              onUploadProgress && data.on('progress', flushOnFinish(data, (0, _progressEventReducer.progressEventDecorator)(contentLength, (0, _progressEventReducer.progressEventReducer)((0, _progressEventReducer.asyncDecorator)(onUploadProgress), false, 3))));
            }

            // HTTP basic authentication
            auth = undefined;
            if (config.auth) {
              username = config.auth.username || '';
              password = config.auth.password || '';
              auth = username + ':' + password;
            }
            if (!auth && parsed.username) {
              urlUsername = parsed.username;
              urlPassword = parsed.password;
              auth = urlUsername + ':' + urlPassword;
            }
            auth && headers["delete"]('authorization');
            _context.prev = 82;
            path = (0, _buildURL["default"])(parsed.pathname + parsed.search, config.params, config.paramsSerializer).replace(/^\?/, '');
            _context.next = 93;
            break;
          case 86:
            _context.prev = 86;
            _context.t2 = _context["catch"](82);
            customErr = new Error(_context.t2.message);
            customErr.config = config;
            customErr.url = config.url;
            customErr.exists = true;
            return _context.abrupt("return", reject(customErr));
          case 93:
            headers.set('Accept-Encoding', 'gzip, compress, deflate' + (isBrotliSupported ? ', br' : ''), false);
            options = {
              path: path,
              method: method,
              headers: headers.toJSON(),
              agents: {
                http: config.httpAgent,
                https: config.httpsAgent
              },
              auth: auth,
              protocol: protocol,
              family: family,
              beforeRedirect: dispatchBeforeRedirect,
              beforeRedirects: {}
            }; // cacheable-lookup integration hotfix
            !_utils["default"].isUndefined(lookup) && (options.lookup = lookup);
            if (config.socketPath) {
              options.socketPath = config.socketPath;
            } else {
              options.hostname = parsed.hostname.startsWith("[") ? parsed.hostname.slice(1, -1) : parsed.hostname;
              options.port = parsed.port;
              setProxy(options, config.proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);
            }
            isHttpsRequest = isHttps.test(options.protocol);
            options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
            if (config.transport) {
              transport = config.transport;
            } else if (config.maxRedirects === 0) {
              transport = isHttpsRequest ? _https["default"] : _http["default"];
            } else {
              if (config.maxRedirects) {
                options.maxRedirects = config.maxRedirects;
              }
              if (config.beforeRedirect) {
                options.beforeRedirects.config = config.beforeRedirect;
              }
              transport = isHttpsRequest ? httpsFollow : httpFollow;
            }
            if (config.maxBodyLength > -1) {
              options.maxBodyLength = config.maxBodyLength;
            } else {
              // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited
              options.maxBodyLength = Infinity;
            }
            if (config.insecureHTTPParser) {
              options.insecureHTTPParser = config.insecureHTTPParser;
            }

            // Create the request
            req = transport.request(options, function handleResponse(res) {
              if (req.destroyed) return;
              var streams = [res];
              var responseLength = +res.headers['content-length'];
              if (onDownloadProgress || maxDownloadRate) {
                var transformStream = new _AxiosTransformStream["default"]({
                  maxRate: _utils["default"].toFiniteNumber(maxDownloadRate)
                });
                onDownloadProgress && transformStream.on('progress', flushOnFinish(transformStream, (0, _progressEventReducer.progressEventDecorator)(responseLength, (0, _progressEventReducer.progressEventReducer)((0, _progressEventReducer.asyncDecorator)(onDownloadProgress), true, 3))));
                streams.push(transformStream);
              }

              // decompress the response body transparently if required
              var responseStream = res;

              // return the last request in case of redirects
              var lastRequest = res.req || req;

              // if decompress disabled we should not decompress
              if (config.decompress !== false && res.headers['content-encoding']) {
                // if no content, but headers still say that it is encoded,
                // remove the header not confuse downstream operations
                if (method === 'HEAD' || res.statusCode === 204) {
                  delete res.headers['content-encoding'];
                }
                switch ((res.headers['content-encoding'] || '').toLowerCase()) {
                  /*eslint default-case:0*/
                  case 'gzip':
                  case 'x-gzip':
                  case 'compress':
                  case 'x-compress':
                    // add the unzipper to the body stream processing pipeline
                    streams.push(_zlib["default"].createUnzip(zlibOptions));

                    // remove the content-encoding in order to not confuse downstream operations
                    delete res.headers['content-encoding'];
                    break;
                  case 'deflate':
                    streams.push(new _ZlibHeaderTransformStream["default"]());

                    // add the unzipper to the body stream processing pipeline
                    streams.push(_zlib["default"].createUnzip(zlibOptions));

                    // remove the content-encoding in order to not confuse downstream operations
                    delete res.headers['content-encoding'];
                    break;
                  case 'br':
                    if (isBrotliSupported) {
                      streams.push(_zlib["default"].createBrotliDecompress(brotliOptions));
                      delete res.headers['content-encoding'];
                    }
                }
              }
              responseStream = streams.length > 1 ? _stream["default"].pipeline(streams, _utils["default"].noop) : streams[0];
              var offListeners = _stream["default"].finished(responseStream, function () {
                offListeners();
                onFinished();
              });
              var response = {
                status: res.statusCode,
                statusText: res.statusMessage,
                headers: new _AxiosHeaders["default"](res.headers),
                config: config,
                request: lastRequest
              };
              if (responseType === 'stream') {
                response.data = responseStream;
                (0, _settle["default"])(resolve, reject, response);
              } else {
                var responseBuffer = [];
                var totalResponseBytes = 0;
                responseStream.on('data', function handleStreamData(chunk) {
                  responseBuffer.push(chunk);
                  totalResponseBytes += chunk.length;

                  // make sure the content length is not over the maxContentLength if specified
                  if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
                    // stream.destroy() emit aborted event before calling reject() on Node.js v16
                    rejected = true;
                    responseStream.destroy();
                    reject(new _AxiosError["default"]('maxContentLength size of ' + config.maxContentLength + ' exceeded', _AxiosError["default"].ERR_BAD_RESPONSE, config, lastRequest));
                  }
                });
                responseStream.on('aborted', function handlerStreamAborted() {
                  if (rejected) {
                    return;
                  }
                  var err = new _AxiosError["default"]('stream has been aborted', _AxiosError["default"].ERR_BAD_RESPONSE, config, lastRequest);
                  responseStream.destroy(err);
                  reject(err);
                });
                responseStream.on('error', function handleStreamError(err) {
                  if (req.destroyed) return;
                  reject(_AxiosError["default"].from(err, null, config, lastRequest));
                });
                responseStream.on('end', function handleStreamEnd() {
                  try {
                    var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
                    if (responseType !== 'arraybuffer') {
                      responseData = responseData.toString(responseEncoding);
                      if (!responseEncoding || responseEncoding === 'utf8') {
                        responseData = _utils["default"].stripBOM(responseData);
                      }
                    }
                    response.data = responseData;
                  } catch (err) {
                    return reject(_AxiosError["default"].from(err, null, config, response.request, response));
                  }
                  (0, _settle["default"])(resolve, reject, response);
                });
              }
              emitter.once('abort', function (err) {
                if (!responseStream.destroyed) {
                  responseStream.emit('error', err);
                  responseStream.destroy();
                }
              });
            });
            emitter.once('abort', function (err) {
              reject(err);
              req.destroy(err);
            });

            // Handle errors
            req.on('error', function handleRequestError(err) {
              // @todo remove
              // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;
              reject(_AxiosError["default"].from(err, null, config, req));
            });

            // set tcp keep alive to prevent drop connection by peer
            req.on('socket', function handleRequestSocket(socket) {
              // default interval of sending ack packet is 1 minute
              socket.setKeepAlive(true, 1000 * 60);
            });

            // Handle request timeout
            if (!config.timeout) {
              _context.next = 112;
              break;
            }
            // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.
            timeout = parseInt(config.timeout, 10);
            if (!Number.isNaN(timeout)) {
              _context.next = 111;
              break;
            }
            reject(new _AxiosError["default"]('error trying to parse `config.timeout` to int', _AxiosError["default"].ERR_BAD_OPTION_VALUE, config, req));
            return _context.abrupt("return");
          case 111:
            // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
            // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
            // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
            // And then these socket which be hang up will devouring CPU little by little.
            // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.
            req.setTimeout(timeout, function handleRequestTimeout() {
              if (isDone) return;
              var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
              var transitional = config.transitional || _transitional["default"];
              if (config.timeoutErrorMessage) {
                timeoutErrorMessage = config.timeoutErrorMessage;
              }
              reject(new _AxiosError["default"](timeoutErrorMessage, transitional.clarifyTimeoutError ? _AxiosError["default"].ETIMEDOUT : _AxiosError["default"].ECONNABORTED, config, req));
              abort();
            });
          case 112:
            // Send the request
            if (_utils["default"].isStream(data)) {
              ended = false;
              errored = false;
              data.on('end', function () {
                ended = true;
              });
              data.once('error', function (err) {
                errored = true;
                req.destroy(err);
              });
              data.on('close', function () {
                if (!ended && !errored) {
                  abort(new _CanceledError["default"]('Request stream has been aborted', config, req));
                }
              });
              data.pipe(req);
            } else {
              req.end(data);
            }
          case 113:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[17, 21], [42, 49], [82, 86]]);
    }));
    function dispatchHttpRequest(_x, _x2, _x3) {
      return _dispatchHttpRequest.apply(this, arguments);
    }
    return dispatchHttpRequest;
  }());
};
var __setProxy = exports.__setProxy = setProxy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,