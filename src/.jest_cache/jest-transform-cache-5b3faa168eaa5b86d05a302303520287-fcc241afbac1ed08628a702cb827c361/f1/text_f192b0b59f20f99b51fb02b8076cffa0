ee4840146578aa037120687dfe2497c5
"use strict";

function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByText = exports.queryAllByText = exports.getByText = exports.getAllByText = exports.findByText = exports.findAllByText = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
var queryAllByText = function queryAllByText(container, text) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
    _ref$selector = _ref.selector,
    selector = _ref$selector === void 0 ? '*' : _ref$selector,
    _ref$exact = _ref.exact,
    exact = _ref$exact === void 0 ? true : _ref$exact,
    collapseWhitespace = _ref.collapseWhitespace,
    trim = _ref.trim,
    _ref$ignore = _ref.ignore,
    ignore = _ref$ignore === void 0 ? (0, _allUtils.getConfig)().defaultIgnore : _ref$ignore,
    normalizer = _ref.normalizer;
  (0, _helpers.checkContainerType)(container);
  var matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
  var matchNormalizer = (0, _allUtils.makeNormalizer)({
    collapseWhitespace: collapseWhitespace,
    trim: trim,
    normalizer: normalizer
  });
  var baseArray = [];
  if (typeof container.matches === 'function' && container.matches(selector)) {
    baseArray = [container];
  }
  return [].concat(_toConsumableArray(baseArray), _toConsumableArray(Array.from(container.querySelectorAll(selector)))) // TODO: `matches` according lib.dom.d.ts can get only `string` but according our code it can handle also boolean :)
  .filter(function (node) {
    return !ignore || !node.matches(ignore);
  }).filter(function (node) {
    return matcher((0, _allUtils.getNodeText)(node), node, text, matchNormalizer);
  });
};
var getMultipleError = function getMultipleError(c, text) {
  return "Found multiple elements with the text: ".concat(text);
};
var getMissingError = function getMissingError(c, text) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var collapseWhitespace = options.collapseWhitespace,
    trim = options.trim,
    normalizer = options.normalizer,
    selector = options.selector;
  var matchNormalizer = (0, _allUtils.makeNormalizer)({
    collapseWhitespace: collapseWhitespace,
    trim: trim,
    normalizer: normalizer
  });
  var normalizedText = matchNormalizer(text.toString());
  var isNormalizedDifferent = normalizedText !== text.toString();
  var isCustomSelector = (selector !== null && selector !== void 0 ? selector : '*') !== '*';
  return "Unable to find an element with the text: ".concat(isNormalizedDifferent ? "".concat(normalizedText, " (normalized from '").concat(text, "')") : text).concat(isCustomSelector ? ", which matches selector '".concat(selector, "'") : '', ". This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.");
};
var queryAllByTextWithSuggestions = exports.queryAllByText = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByText, queryAllByText.name, 'queryAll');
var _ref2 = (0, _allUtils.buildQueries)(queryAllByText, getMultipleError, getMissingError),
  _ref3 = _slicedToArray(_ref2, 5),
  queryByText = _ref3[0],
  getAllByText = _ref3[1],
  getByText = _ref3[2],
  findAllByText = _ref3[3],
  findByText = _ref3[4];
exports.findByText = findByText;
exports.findAllByText = findAllByText;
exports.getByText = getByText;
exports.getAllByText = getAllByText;
exports.queryByText = queryByText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc2xpY2VkVG9BcnJheSIsInIiLCJlIiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIlR5cGVFcnJvciIsImwiLCJ0IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuIiwiaSIsInUiLCJhIiwiZiIsIm8iLCJjYWxsIiwibmV4dCIsIk9iamVjdCIsImRvbmUiLCJwdXNoIiwidmFsdWUiLCJsZW5ndGgiLCJBcnJheSIsImlzQXJyYXkiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJfaXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJ0b1N0cmluZyIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJxdWVyeUJ5VGV4dCIsInF1ZXJ5QWxsQnlUZXh0IiwiZ2V0QnlUZXh0IiwiZ2V0QWxsQnlUZXh0IiwiZmluZEJ5VGV4dCIsImZpbmRBbGxCeVRleHQiLCJfcXVlcnlIZWxwZXJzIiwicmVxdWlyZSIsIl9oZWxwZXJzIiwiX2FsbFV0aWxzIiwiY29udGFpbmVyIiwidGV4dCIsIl9yZWYiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJfcmVmJHNlbGVjdG9yIiwic2VsZWN0b3IiLCJfcmVmJGV4YWN0IiwiZXhhY3QiLCJjb2xsYXBzZVdoaXRlc3BhY2UiLCJ0cmltIiwiX3JlZiRpZ25vcmUiLCJpZ25vcmUiLCJnZXRDb25maWciLCJkZWZhdWx0SWdub3JlIiwibm9ybWFsaXplciIsImNoZWNrQ29udGFpbmVyVHlwZSIsIm1hdGNoZXIiLCJtYXRjaGVzIiwiZnV6enlNYXRjaGVzIiwibWF0Y2hOb3JtYWxpemVyIiwibWFrZU5vcm1hbGl6ZXIiLCJiYXNlQXJyYXkiLCJjb25jYXQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZmlsdGVyIiwibm9kZSIsImdldE5vZGVUZXh0IiwiZ2V0TXVsdGlwbGVFcnJvciIsImMiLCJnZXRNaXNzaW5nRXJyb3IiLCJvcHRpb25zIiwibm9ybWFsaXplZFRleHQiLCJpc05vcm1hbGl6ZWREaWZmZXJlbnQiLCJpc0N1c3RvbVNlbGVjdG9yIiwicXVlcnlBbGxCeVRleHRXaXRoU3VnZ2VzdGlvbnMiLCJ3cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uIiwiX3JlZjIiLCJidWlsZFF1ZXJpZXMiLCJfcmVmMyJdLCJzb3VyY2VzIjpbInRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlUZXh0ID0gZXhwb3J0cy5xdWVyeUFsbEJ5VGV4dCA9IGV4cG9ydHMuZ2V0QnlUZXh0ID0gZXhwb3J0cy5nZXRBbGxCeVRleHQgPSBleHBvcnRzLmZpbmRCeVRleHQgPSBleHBvcnRzLmZpbmRBbGxCeVRleHQgPSB2b2lkIDA7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX2FsbFV0aWxzID0gcmVxdWlyZShcIi4vYWxsLXV0aWxzXCIpO1xuY29uc3QgcXVlcnlBbGxCeVRleHQgPSAoY29udGFpbmVyLCB0ZXh0LCB7XG4gIHNlbGVjdG9yID0gJyonLFxuICBleGFjdCA9IHRydWUsXG4gIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgdHJpbSxcbiAgaWdub3JlID0gKDAsIF9hbGxVdGlscy5nZXRDb25maWcpKCkuZGVmYXVsdElnbm9yZSxcbiAgbm9ybWFsaXplclxufSA9IHt9KSA9PiB7XG4gICgwLCBfaGVscGVycy5jaGVja0NvbnRhaW5lclR5cGUpKGNvbnRhaW5lcik7XG4gIGNvbnN0IG1hdGNoZXIgPSBleGFjdCA/IF9hbGxVdGlscy5tYXRjaGVzIDogX2FsbFV0aWxzLmZ1enp5TWF0Y2hlcztcbiAgY29uc3QgbWF0Y2hOb3JtYWxpemVyID0gKDAsIF9hbGxVdGlscy5tYWtlTm9ybWFsaXplcikoe1xuICAgIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgICB0cmltLFxuICAgIG5vcm1hbGl6ZXJcbiAgfSk7XG4gIGxldCBiYXNlQXJyYXkgPSBbXTtcbiAgaWYgKHR5cGVvZiBjb250YWluZXIubWF0Y2hlcyA9PT0gJ2Z1bmN0aW9uJyAmJiBjb250YWluZXIubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICBiYXNlQXJyYXkgPSBbY29udGFpbmVyXTtcbiAgfVxuICByZXR1cm4gWy4uLmJhc2VBcnJheSwgLi4uQXJyYXkuZnJvbShjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpXVxuICAvLyBUT0RPOiBgbWF0Y2hlc2AgYWNjb3JkaW5nIGxpYi5kb20uZC50cyBjYW4gZ2V0IG9ubHkgYHN0cmluZ2AgYnV0IGFjY29yZGluZyBvdXIgY29kZSBpdCBjYW4gaGFuZGxlIGFsc28gYm9vbGVhbiA6KVxuICAuZmlsdGVyKG5vZGUgPT4gIWlnbm9yZSB8fCAhbm9kZS5tYXRjaGVzKGlnbm9yZSkpLmZpbHRlcihub2RlID0+IG1hdGNoZXIoKDAsIF9hbGxVdGlscy5nZXROb2RlVGV4dCkobm9kZSksIG5vZGUsIHRleHQsIG1hdGNoTm9ybWFsaXplcikpO1xufTtcbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAoYywgdGV4dCkgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGhlIHRleHQ6ICR7dGV4dH1gO1xuY29uc3QgZ2V0TWlzc2luZ0Vycm9yID0gKGMsIHRleHQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCB7XG4gICAgY29sbGFwc2VXaGl0ZXNwYWNlLFxuICAgIHRyaW0sXG4gICAgbm9ybWFsaXplcixcbiAgICBzZWxlY3RvclxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgbWF0Y2hOb3JtYWxpemVyID0gKDAsIF9hbGxVdGlscy5tYWtlTm9ybWFsaXplcikoe1xuICAgIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgICB0cmltLFxuICAgIG5vcm1hbGl6ZXJcbiAgfSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWRUZXh0ID0gbWF0Y2hOb3JtYWxpemVyKHRleHQudG9TdHJpbmcoKSk7XG4gIGNvbnN0IGlzTm9ybWFsaXplZERpZmZlcmVudCA9IG5vcm1hbGl6ZWRUZXh0ICE9PSB0ZXh0LnRvU3RyaW5nKCk7XG4gIGNvbnN0IGlzQ3VzdG9tU2VsZWN0b3IgPSAoc2VsZWN0b3IgPz8gJyonKSAhPT0gJyonO1xuICByZXR1cm4gYFVuYWJsZSB0byBmaW5kIGFuIGVsZW1lbnQgd2l0aCB0aGUgdGV4dDogJHtpc05vcm1hbGl6ZWREaWZmZXJlbnQgPyBgJHtub3JtYWxpemVkVGV4dH0gKG5vcm1hbGl6ZWQgZnJvbSAnJHt0ZXh0fScpYCA6IHRleHR9JHtpc0N1c3RvbVNlbGVjdG9yID8gYCwgd2hpY2ggbWF0Y2hlcyBzZWxlY3RvciAnJHtzZWxlY3Rvcn0nYCA6ICcnfS4gVGhpcyBjb3VsZCBiZSBiZWNhdXNlIHRoZSB0ZXh0IGlzIGJyb2tlbiB1cCBieSBtdWx0aXBsZSBlbGVtZW50cy4gSW4gdGhpcyBjYXNlLCB5b3UgY2FuIHByb3ZpZGUgYSBmdW5jdGlvbiBmb3IgeW91ciB0ZXh0IG1hdGNoZXIgdG8gbWFrZSB5b3VyIG1hdGNoZXIgbW9yZSBmbGV4aWJsZS5gO1xufTtcbmNvbnN0IHF1ZXJ5QWxsQnlUZXh0V2l0aFN1Z2dlc3Rpb25zID0gZXhwb3J0cy5xdWVyeUFsbEJ5VGV4dCA9ICgwLCBfcXVlcnlIZWxwZXJzLndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKHF1ZXJ5QWxsQnlUZXh0LCBxdWVyeUFsbEJ5VGV4dC5uYW1lLCAncXVlcnlBbGwnKTtcbmNvbnN0IFtxdWVyeUJ5VGV4dCwgZ2V0QWxsQnlUZXh0LCBnZXRCeVRleHQsIGZpbmRBbGxCeVRleHQsIGZpbmRCeVRleHRdID0gKDAsIF9hbGxVdGlscy5idWlsZFF1ZXJpZXMpKHF1ZXJ5QWxsQnlUZXh0LCBnZXRNdWx0aXBsZUVycm9yLCBnZXRNaXNzaW5nRXJyb3IpO1xuZXhwb3J0cy5maW5kQnlUZXh0ID0gZmluZEJ5VGV4dDtcbmV4cG9ydHMuZmluZEFsbEJ5VGV4dCA9IGZpbmRBbGxCeVRleHQ7XG5leHBvcnRzLmdldEJ5VGV4dCA9IGdldEJ5VGV4dDtcbmV4cG9ydHMuZ2V0QWxsQnlUZXh0ID0gZ2V0QWxsQnlUZXh0O1xuZXhwb3J0cy5xdWVyeUJ5VGV4dCA9IHF1ZXJ5QnlUZXh0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFBQyxTQUFBQSxlQUFBQyxDQUFBLEVBQUFDLENBQUEsV0FBQUMsZUFBQSxDQUFBRixDQUFBLEtBQUFHLHFCQUFBLENBQUFILENBQUEsRUFBQUMsQ0FBQSxLQUFBRywyQkFBQSxDQUFBSixDQUFBLEVBQUFDLENBQUEsS0FBQUksZ0JBQUE7QUFBQSxTQUFBQSxpQkFBQSxjQUFBQyxTQUFBO0FBQUEsU0FBQUgsc0JBQUFILENBQUEsRUFBQU8sQ0FBQSxRQUFBQyxDQUFBLFdBQUFSLENBQUEsZ0NBQUFTLE1BQUEsSUFBQVQsQ0FBQSxDQUFBUyxNQUFBLENBQUFDLFFBQUEsS0FBQVYsQ0FBQSw0QkFBQVEsQ0FBQSxRQUFBUCxDQUFBLEVBQUFVLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsT0FBQUMsQ0FBQSxPQUFBQyxDQUFBLGlCQUFBSixDQUFBLElBQUFKLENBQUEsR0FBQUEsQ0FBQSxDQUFBUyxJQUFBLENBQUFqQixDQUFBLEdBQUFrQixJQUFBLFFBQUFYLENBQUEsUUFBQVksTUFBQSxDQUFBWCxDQUFBLE1BQUFBLENBQUEsVUFBQU8sQ0FBQSx1QkFBQUEsQ0FBQSxJQUFBZCxDQUFBLEdBQUFXLENBQUEsQ0FBQUssSUFBQSxDQUFBVCxDQUFBLEdBQUFZLElBQUEsTUFBQU4sQ0FBQSxDQUFBTyxJQUFBLENBQUFwQixDQUFBLENBQUFx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