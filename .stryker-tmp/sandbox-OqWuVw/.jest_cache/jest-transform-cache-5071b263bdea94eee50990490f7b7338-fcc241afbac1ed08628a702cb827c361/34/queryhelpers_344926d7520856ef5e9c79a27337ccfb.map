{"version":3,"names":["_typeof","o","Symbol","iterator","constructor","prototype","_toConsumableArray","r","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","Array","from","isArray","_arrayLikeToArray","_slicedToArray","e","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","a","t","toString","call","slice","name","test","length","n","l","i","u","f","next","Object","done","push","value","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","configurable","writable","_toPrimitive","toPrimitive","String","Number","exports","buildQueries","getElementError","getMultipleElementsFoundError","makeFindQuery","makeGetAllQuery","makeSingleQuery","queryAllByAttribute","queryByAttribute","wrapSingleQueryWithSuggestion","wrapAllByQueryWithSuggestion","_suggestions","require","_matches","_waitFor","_config","message","container","getConfig","concat","attribute","text","_ref","undefined","_ref$exact","exact","collapseWhitespace","trim","normalizer","matcher","matches","fuzzyMatches","matchNormalizer","makeNormalizer","querySelectorAll","node","getAttribute","options","els","allQuery","getMultipleError","_len","args","_key","elementStrings","map","element","join","getSuggestionError","suggestion","getMissingError","_len2","_key2","getter","waitForOptions","waitFor","query","queryAllByName","variant","_len3","_key3","_args$slice","_args$slice2","_args$slice2$","_args$slice2$2","_args$slice2$2$sugges","suggest","throwSuggestions","getSuggestedQuery","endsWith","queryName","_len4","_key4","_args$slice3","_args$slice4","_args$slice4$","_args$slice4$2","_args$slice4$2$sugges","uniqueSuggestionMessages","Set","_ref2","queryAllBy","queryBy","getAllBy","getBy","getByWithSuggestions","getAllWithSuggestions","replace","findAllBy","findBy"],"sources":["query-helpers.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildQueries = buildQueries;\nexports.getElementError = getElementError;\nexports.getMultipleElementsFoundError = getMultipleElementsFoundError;\nexports.makeFindQuery = makeFindQuery;\nexports.makeGetAllQuery = makeGetAllQuery;\nexports.makeSingleQuery = makeSingleQuery;\nexports.queryAllByAttribute = queryAllByAttribute;\nexports.queryByAttribute = queryByAttribute;\nexports.wrapSingleQueryWithSuggestion = exports.wrapAllByQueryWithSuggestion = void 0;\nvar _suggestions = require(\"./suggestions\");\nvar _matches = require(\"./matches\");\nvar _waitFor = require(\"./wait-for\");\nvar _config = require(\"./config\");\nfunction getElementError(message, container) {\n  return (0, _config.getConfig)().getElementError(message, container);\n}\nfunction getMultipleElementsFoundError(message, container) {\n  return getElementError(`${message}\\n\\n(If this is intentional, then use the \\`*AllBy*\\` variant of the query (like \\`queryAllByText\\`, \\`getAllByText\\`, or \\`findAllByText\\`)).`, container);\n}\nfunction queryAllByAttribute(attribute, container, text, {\n  exact = true,\n  collapseWhitespace,\n  trim,\n  normalizer\n} = {}) {\n  const matcher = exact ? _matches.matches : _matches.fuzzyMatches;\n  const matchNormalizer = (0, _matches.makeNormalizer)({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  return Array.from(container.querySelectorAll(`[${attribute}]`)).filter(node => matcher(node.getAttribute(attribute), node, text, matchNormalizer));\n}\nfunction queryByAttribute(attribute, container, text, options) {\n  const els = queryAllByAttribute(attribute, container, text, options);\n  if (els.length > 1) {\n    throw getMultipleElementsFoundError(`Found multiple elements by [${attribute}=${text}]`, container);\n  }\n  return els[0] || null;\n}\n\n// this accepts a query function and returns a function which throws an error\n// if more than one elements is returned, otherwise it returns the first\n// element or null\nfunction makeSingleQuery(allQuery, getMultipleError) {\n  return (container, ...args) => {\n    const els = allQuery(container, ...args);\n    if (els.length > 1) {\n      const elementStrings = els.map(element => getElementError(null, element).message).join('\\n\\n');\n      throw getMultipleElementsFoundError(`${getMultipleError(container, ...args)}\n\nHere are the matching elements:\n\n${elementStrings}`, container);\n    }\n    return els[0] || null;\n  };\n}\nfunction getSuggestionError(suggestion, container) {\n  return (0, _config.getConfig)().getElementError(`A better query is available, try this:\n${suggestion.toString()}\n`, container);\n}\n\n// this accepts a query function and returns a function which throws an error\n// if an empty list of elements is returned\nfunction makeGetAllQuery(allQuery, getMissingError) {\n  return (container, ...args) => {\n    const els = allQuery(container, ...args);\n    if (!els.length) {\n      throw (0, _config.getConfig)().getElementError(getMissingError(container, ...args), container);\n    }\n    return els;\n  };\n}\n\n// this accepts a getter query function and returns a function which calls\n// waitFor and passing a function which invokes the getter.\nfunction makeFindQuery(getter) {\n  return (container, text, options, waitForOptions) => {\n    return (0, _waitFor.waitFor)(() => {\n      return getter(container, text, options);\n    }, {\n      container,\n      ...waitForOptions\n    });\n  };\n}\nconst wrapSingleQueryWithSuggestion = (query, queryAllByName, variant) => (container, ...args) => {\n  const element = query(container, ...args);\n  const [{\n    suggest = (0, _config.getConfig)().throwSuggestions\n  } = {}] = args.slice(-1);\n  if (element && suggest) {\n    const suggestion = (0, _suggestions.getSuggestedQuery)(element, variant);\n    if (suggestion && !queryAllByName.endsWith(suggestion.queryName)) {\n      throw getSuggestionError(suggestion.toString(), container);\n    }\n  }\n  return element;\n};\nexports.wrapSingleQueryWithSuggestion = wrapSingleQueryWithSuggestion;\nconst wrapAllByQueryWithSuggestion = (query, queryAllByName, variant) => (container, ...args) => {\n  const els = query(container, ...args);\n  const [{\n    suggest = (0, _config.getConfig)().throwSuggestions\n  } = {}] = args.slice(-1);\n  if (els.length && suggest) {\n    // get a unique list of all suggestion messages.  We are only going to make a suggestion if\n    // all the suggestions are the same\n    const uniqueSuggestionMessages = [...new Set(els.map(element => (0, _suggestions.getSuggestedQuery)(element, variant)?.toString()))];\n    if (\n    // only want to suggest if all the els have the same suggestion.\n    uniqueSuggestionMessages.length === 1 && !queryAllByName.endsWith(\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- TODO: Can this be null at runtime?\n    (0, _suggestions.getSuggestedQuery)(els[0], variant).queryName)) {\n      throw getSuggestionError(uniqueSuggestionMessages[0], container);\n    }\n  }\n  return els;\n};\n\n// TODO: This deviates from the published declarations\n// However, the implementation always required a dyadic (after `container`) not variadic `queryAllBy` considering the implementation of `makeFindQuery`\n// This is at least statically true and can be verified by accepting `QueryMethod<Arguments, HTMLElement[]>`\nexports.wrapAllByQueryWithSuggestion = wrapAllByQueryWithSuggestion;\nfunction buildQueries(queryAllBy, getMultipleError, getMissingError) {\n  const queryBy = wrapSingleQueryWithSuggestion(makeSingleQuery(queryAllBy, getMultipleError), queryAllBy.name, 'query');\n  const getAllBy = makeGetAllQuery(queryAllBy, getMissingError);\n  const getBy = makeSingleQuery(getAllBy, getMultipleError);\n  const getByWithSuggestions = wrapSingleQueryWithSuggestion(getBy, queryAllBy.name, 'get');\n  const getAllWithSuggestions = wrapAllByQueryWithSuggestion(getAllBy, queryAllBy.name.replace('query', 'get'), 'getAll');\n  const findAllBy = makeFindQuery(wrapAllByQueryWithSuggestion(getAllBy, queryAllBy.name, 'findAll'));\n  const findBy = makeFindQuery(wrapSingleQueryWithSuggestion(getBy, queryAllBy.name, 'find'));\n  return [queryBy, getAllWithSuggestions, getByWithSuggestions, findAllBy, findBy];\n}"],"mappings":"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","ignoreList":[]}