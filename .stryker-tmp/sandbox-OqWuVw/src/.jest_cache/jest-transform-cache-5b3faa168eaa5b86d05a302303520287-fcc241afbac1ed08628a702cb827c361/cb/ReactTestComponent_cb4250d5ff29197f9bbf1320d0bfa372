1a9153cc505175f95e8f3c8514e482de
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.test = exports.serialize = exports["default"] = void 0;
var _markup = require('./lib/markup');
var global = function () {
  if (typeof globalThis !== 'undefined') {
    return globalThis;
  } else if (typeof global !== 'undefined') {
    return global;
  } else if (typeof self !== 'undefined') {
    return self;
  } else if (typeof window !== 'undefined') {
    return window;
  } else {
    return Function('return this')();
  }
}();
var _Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
var testSymbol = typeof _Symbol === 'function' && _Symbol["for"] ? _Symbol["for"]('react.test.json') : 0xea71357;
var getPropKeys = function getPropKeys(object) {
  var props = object.props;
  return props ? Object.keys(props).filter(function (key) {
    return props[key] !== undefined;
  }).sort() : [];
};
var serialize = function serialize(object, config, indentation, depth, refs, printer) {
  return ++depth > config.maxDepth ? (0, _markup.printElementAsLeaf)(object.type, config) : (0, _markup.printElement)(object.type, object.props ? (0, _markup.printProps)(getPropKeys(object), object.props, config, indentation + config.indent, depth, refs, printer) : '', object.children ? (0, _markup.printChildren)(object.children, config, indentation + config.indent, depth, refs, printer) : '', config, indentation);
};
exports.serialize = serialize;
var test = function test(val) {
  return val && val.$$typeof === testSymbol;
};
exports.test = test;
var plugin = {
  serialize: serialize,
  test: test
};
var _default = plugin;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRlc3QiLCJzZXJpYWxpemUiLCJfbWFya3VwIiwicmVxdWlyZSIsImdsb2JhbCIsImdsb2JhbFRoaXMiLCJzZWxmIiwid2luZG93IiwiRnVuY3Rpb24iLCJTeW1ib2wiLCJ0ZXN0U3ltYm9sIiwiZ2V0UHJvcEtleXMiLCJvYmplY3QiLCJwcm9wcyIsImtleXMiLCJmaWx0ZXIiLCJrZXkiLCJ1bmRlZmluZWQiLCJzb3J0IiwiY29uZmlnIiwiaW5kZW50YXRpb24iLCJkZXB0aCIsInJlZnMiLCJwcmludGVyIiwibWF4RGVwdGgiLCJwcmludEVsZW1lbnRBc0xlYWYiLCJ0eXBlIiwicHJpbnRFbGVtZW50IiwicHJpbnRQcm9wcyIsImluZGVudCIsImNoaWxkcmVuIiwicHJpbnRDaGlsZHJlbiIsInZhbCIsIiQkdHlwZW9mIiwicGx1Z2luIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJSZWFjdFRlc3RDb21wb25lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudGVzdCA9IGV4cG9ydHMuc2VyaWFsaXplID0gZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX21hcmt1cCA9IHJlcXVpcmUoJy4vbGliL21hcmt1cCcpO1xuXG52YXIgZ2xvYmFsID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGdsb2JhbDtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4gIH1cbn0pKCk7XG5cbnZhciBTeW1ib2wgPSBnbG9iYWxbJ2plc3Qtc3ltYm9sLWRvLW5vdC10b3VjaCddIHx8IGdsb2JhbC5TeW1ib2w7XG5jb25zdCB0ZXN0U3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yXG4gICAgPyBTeW1ib2wuZm9yKCdyZWFjdC50ZXN0Lmpzb24nKVxuICAgIDogMHhlYTcxMzU3O1xuXG5jb25zdCBnZXRQcm9wS2V5cyA9IG9iamVjdCA9PiB7XG4gIGNvbnN0IHtwcm9wc30gPSBvYmplY3Q7XG4gIHJldHVybiBwcm9wc1xuICAgID8gT2JqZWN0LmtleXMocHJvcHMpXG4gICAgICAgIC5maWx0ZXIoa2V5ID0+IHByb3BzW2tleV0gIT09IHVuZGVmaW5lZClcbiAgICAgICAgLnNvcnQoKVxuICAgIDogW107XG59O1xuXG5jb25zdCBzZXJpYWxpemUgPSAob2JqZWN0LCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcywgcHJpbnRlcikgPT5cbiAgKytkZXB0aCA+IGNvbmZpZy5tYXhEZXB0aFxuICAgID8gKDAsIF9tYXJrdXAucHJpbnRFbGVtZW50QXNMZWFmKShvYmplY3QudHlwZSwgY29uZmlnKVxuICAgIDogKDAsIF9tYXJrdXAucHJpbnRFbGVtZW50KShcbiAgICAgICAgb2JqZWN0LnR5cGUsXG4gICAgICAgIG9iamVjdC5wcm9wc1xuICAgICAgICAgID8gKDAsIF9tYXJrdXAucHJpbnRQcm9wcykoXG4gICAgICAgICAgICAgIGdldFByb3BLZXlzKG9iamVjdCksXG4gICAgICAgICAgICAgIG9iamVjdC5wcm9wcyxcbiAgICAgICAgICAgICAgY29uZmlnLFxuICAgICAgICAgICAgICBpbmRlbnRhdGlvbiArIGNvbmZpZy5pbmRlbnQsXG4gICAgICAgICAgICAgIGRlcHRoLFxuICAgICAgICAgICAgICByZWZzLFxuICAgICAgICAgICAgICBwcmludGVyXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiAnJyxcbiAgICAgICAgb2JqZWN0LmNoaWxkcmVuXG4gICAgICAgICAgPyAoMCwgX21hcmt1cC5wcmludENoaWxkcmVuKShcbiAgICAgICAgICAgICAgb2JqZWN0LmNoaWxkcmVuLFxuICAgICAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgICAgIGluZGVudGF0aW9uICsgY29uZmlnLmluZGVudCxcbiAgICAgICAgICAgICAgZGVwdGgsXG4gICAgICAgICAgICAgIHJlZnMsXG4gICAgICAgICAgICAgIHByaW50ZXJcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6ICcnLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIGluZGVudGF0aW9uXG4gICAgICApO1xuXG5leHBvcnRzLnNlcmlhbGl6ZSA9IHNlcmlhbGl6ZTtcblxuY29uc3QgdGVzdCA9IHZhbCA9PiB2YWwgJiYgdmFsLiQkdHlwZW9mID09PSB0ZXN0U3ltYm9sO1xuXG5leHBvcnRzLnRlc3QgPSB0ZXN0O1xuY29uc3QgcGx1Z2luID0ge1xuICBzZXJpYWxpemUsXG4gIHRlc3Rcbn07XG52YXIgX2RlZmF1bHQgPSBwbHVnaW47XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLElBQUksR0FBR0YsT0FBTyxDQUFDRyxTQUFTLEdBQUdILE9BQU8sV0FBUSxHQUFHLEtBQUssQ0FBQztBQUUzRCxJQUFJSSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFFckMsSUFBSUMsTUFBTSxHQUFJLFlB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