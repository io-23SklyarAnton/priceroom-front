57ceab611ca64c677db06e493cc23778
"use strict";

function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByTestId = exports.queryAllByTestId = exports.getByTestId = exports.getAllByTestId = exports.findByTestId = exports.findAllByTestId = void 0;
var _helpers = require("../helpers");
var _queryHelpers = require("../query-helpers");
var _allUtils = require("./all-utils");
var getTestIdAttribute = function getTestIdAttribute() {
  return (0, _allUtils.getConfig)().testIdAttribute;
};
var queryAllByTestId = function queryAllByTestId() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  (0, _helpers.checkContainerType)(args[0]);
  return (0, _allUtils.queryAllByAttribute).apply(void 0, [getTestIdAttribute()].concat(args));
};
var getMultipleError = function getMultipleError(c, id) {
  return "Found multiple elements by: [".concat(getTestIdAttribute(), "=\"").concat(id, "\"]");
};
var getMissingError = function getMissingError(c, id) {
  return "Unable to find an element by: [".concat(getTestIdAttribute(), "=\"").concat(id, "\"]");
};
var queryAllByTestIdWithSuggestions = exports.queryAllByTestId = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByTestId, queryAllByTestId.name, 'queryAll');
var _ref = (0, _allUtils.buildQueries)(queryAllByTestId, getMultipleError, getMissingError),
  _ref2 = _slicedToArray(_ref, 5),
  queryByTestId = _ref2[0],
  getAllByTestId = _ref2[1],
  getByTestId = _ref2[2],
  findAllByTestId = _ref2[3],
  findByTestId = _ref2[4];
exports.findByTestId = findByTestId;
exports.findAllByTestId = findAllByTestId;
exports.getByTestId = getByTestId;
exports.getAllByTestId = getAllByTestId;
exports.queryByTestId = queryByTestId;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc2xpY2VkVG9BcnJheSIsInIiLCJlIiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIlR5cGVFcnJvciIsImEiLCJfYXJyYXlMaWtlVG9BcnJheSIsInQiLCJ0b1N0cmluZyIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIkFycmF5IiwiZnJvbSIsInRlc3QiLCJsZW5ndGgiLCJuIiwibCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiaSIsInUiLCJmIiwibyIsIm5leHQiLCJPYmplY3QiLCJkb25lIiwicHVzaCIsInZhbHVlIiwiaXNBcnJheSIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInF1ZXJ5QnlUZXN0SWQiLCJxdWVyeUFsbEJ5VGVzdElkIiwiZ2V0QnlUZXN0SWQiLCJnZXRBbGxCeVRlc3RJZCIsImZpbmRCeVRlc3RJZCIsImZpbmRBbGxCeVRlc3RJZCIsIl9oZWxwZXJzIiwicmVxdWlyZSIsIl9xdWVyeUhlbHBlcnMiLCJfYWxsVXRpbHMiLCJnZXRUZXN0SWRBdHRyaWJ1dGUiLCJnZXRDb25maWciLCJ0ZXN0SWRBdHRyaWJ1dGUiLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIl9rZXkiLCJjaGVja0NvbnRhaW5lclR5cGUiLCJxdWVyeUFsbEJ5QXR0cmlidXRlIiwiYXBwbHkiLCJjb25jYXQiLCJnZXRNdWx0aXBsZUVycm9yIiwiYyIsImlkIiwiZ2V0TWlzc2luZ0Vycm9yIiwicXVlcnlBbGxCeVRlc3RJZFdpdGhTdWdnZXN0aW9ucyIsIndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24iLCJfcmVmIiwiYnVpbGRRdWVyaWVzIiwiX3JlZjIiXSwic291cmNlcyI6WyJ0ZXN0LWlkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5xdWVyeUJ5VGVzdElkID0gZXhwb3J0cy5xdWVyeUFsbEJ5VGVzdElkID0gZXhwb3J0cy5nZXRCeVRlc3RJZCA9IGV4cG9ydHMuZ2V0QWxsQnlUZXN0SWQgPSBleHBvcnRzLmZpbmRCeVRlc3RJZCA9IGV4cG9ydHMuZmluZEFsbEJ5VGVzdElkID0gdm9pZCAwO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9hbGxVdGlscyA9IHJlcXVpcmUoXCIuL2FsbC11dGlsc1wiKTtcbmNvbnN0IGdldFRlc3RJZEF0dHJpYnV0ZSA9ICgpID0+ICgwLCBfYWxsVXRpbHMuZ2V0Q29uZmlnKSgpLnRlc3RJZEF0dHJpYnV0ZTtcbmNvbnN0IHF1ZXJ5QWxsQnlUZXN0SWQgPSAoLi4uYXJncykgPT4ge1xuICAoMCwgX2hlbHBlcnMuY2hlY2tDb250YWluZXJUeXBlKShhcmdzWzBdKTtcbiAgcmV0dXJuICgwLCBfYWxsVXRpbHMucXVlcnlBbGxCeUF0dHJpYnV0ZSkoZ2V0VGVzdElkQXR0cmlidXRlKCksIC4uLmFyZ3MpO1xufTtcbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAoYywgaWQpID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyBieTogWyR7Z2V0VGVzdElkQXR0cmlidXRlKCl9PVwiJHtpZH1cIl1gO1xuY29uc3QgZ2V0TWlzc2luZ0Vycm9yID0gKGMsIGlkKSA9PiBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCBieTogWyR7Z2V0VGVzdElkQXR0cmlidXRlKCl9PVwiJHtpZH1cIl1gO1xuY29uc3QgcXVlcnlBbGxCeVRlc3RJZFdpdGhTdWdnZXN0aW9ucyA9IGV4cG9ydHMucXVlcnlBbGxCeVRlc3RJZCA9ICgwLCBfcXVlcnlIZWxwZXJzLndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKHF1ZXJ5QWxsQnlUZXN0SWQsIHF1ZXJ5QWxsQnlUZXN0SWQubmFtZSwgJ3F1ZXJ5QWxsJyk7XG5jb25zdCBbcXVlcnlCeVRlc3RJZCwgZ2V0QWxsQnlUZXN0SWQsIGdldEJ5VGVzdElkLCBmaW5kQWxsQnlUZXN0SWQsIGZpbmRCeVRlc3RJZF0gPSAoMCwgX2FsbFV0aWxzLmJ1aWxkUXVlcmllcykocXVlcnlBbGxCeVRlc3RJZCwgZ2V0TXVsdGlwbGVFcnJvciwgZ2V0TWlzc2luZ0Vycm9yKTtcbmV4cG9ydHMuZmluZEJ5VGVzdElkID0gZmluZEJ5VGVzdElkO1xuZXhwb3J0cy5maW5kQWxsQnlUZXN0SWQgPSBmaW5kQWxsQnlUZXN0SWQ7XG5leHBvcnRzLmdldEJ5VGVzdElkID0gZ2V0QnlUZXN0SWQ7XG5leHBvcnRzLmdldEFsbEJ5VGVzdElkID0gZ2V0QWxsQnlUZXN0SWQ7XG5leHBvcnRzLnF1ZXJ5QnlUZXN0SWQgPSBxdWVyeUJ5VGVzdElkOyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFBQyxTQUFBQSxlQUFBQyxDQUFBLEVBQUFDLENBQUEsV0FBQUMsZUFBQSxDQUFBRixDQUFBLEtBQUFHLHFCQUFBLENBQUFILENBQUEsRUFBQUMsQ0FBQSxLQUFBRywyQkFBQSxDQUFBSixDQUFBLEVBQUFDLENBQUEsS0FBQUksZ0JBQUE7QUFBQSxTQUFBQSxpQkFBQSxjQUFBQyxTQUFBO0FBQUEsU0FBQUYsNEJBQUFKLENBQUEsRUFBQU8sQ0FBQSxRQUFBUCxDQUFBLDJCQUFBQSxDQUFBLFNBQUFRLGlCQUFBLENBQUFSLENBQUEsRUFBQU8sQ0FBQSxPQUFBRSxDQUFBLE1BQUFDLFFBQUEsQ0FBQUMsSUFBQSxDQUFBWCxDQUFBLEVBQUFZLEtBQUEsNkJBQUFILENBQUEsSUFBQVQsQ0FBQSxDQUFBYSxXQUFBLEtBQUFKLENBQUEsR0FBQVQsQ0FBQSxDQUFBYSxXQUFBLENBQUFDLElBQUEsYUFBQUwsQ0FBQSxjQUFBQSxDQUFBLEdBQUFNLEtBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxvQkFBQVMs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