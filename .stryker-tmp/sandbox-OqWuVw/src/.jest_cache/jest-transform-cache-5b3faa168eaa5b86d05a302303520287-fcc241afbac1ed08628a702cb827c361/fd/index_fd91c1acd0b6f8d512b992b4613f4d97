f8ef0db50e02f9f8f5cf42bb9ee37d5d
'use strict';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, '__esModule', {
  value: true
});
Object.defineProperty(exports, 'ErrorWithStack', {
  enumerable: true,
  get: function get() {
    return _ErrorWithStack["default"];
  }
});
Object.defineProperty(exports, 'clearLine', {
  enumerable: true,
  get: function get() {
    return _clearLine["default"];
  }
});
Object.defineProperty(exports, 'convertDescriptorToString', {
  enumerable: true,
  get: function get() {
    return _convertDescriptorToString["default"];
  }
});
Object.defineProperty(exports, 'createDirectory', {
  enumerable: true,
  get: function get() {
    return _createDirectory["default"];
  }
});
Object.defineProperty(exports, 'deepCyclicCopy', {
  enumerable: true,
  get: function get() {
    return _deepCyclicCopy["default"];
  }
});
Object.defineProperty(exports, 'formatTime', {
  enumerable: true,
  get: function get() {
    return _formatTime["default"];
  }
});
Object.defineProperty(exports, 'globsToMatcher', {
  enumerable: true,
  get: function get() {
    return _globsToMatcher["default"];
  }
});
Object.defineProperty(exports, 'installCommonGlobals', {
  enumerable: true,
  get: function get() {
    return _installCommonGlobals["default"];
  }
});
Object.defineProperty(exports, 'interopRequireDefault', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault["default"];
  }
});
Object.defineProperty(exports, 'isInteractive', {
  enumerable: true,
  get: function get() {
    return _isInteractive["default"];
  }
});
Object.defineProperty(exports, 'isPromise', {
  enumerable: true,
  get: function get() {
    return _isPromise["default"];
  }
});
Object.defineProperty(exports, 'pluralize', {
  enumerable: true,
  get: function get() {
    return _pluralize["default"];
  }
});
exports.preRunMessage = void 0;
Object.defineProperty(exports, 'replacePathSepForGlob', {
  enumerable: true,
  get: function get() {
    return _replacePathSepForGlob["default"];
  }
});
Object.defineProperty(exports, 'requireOrImportModule', {
  enumerable: true,
  get: function get() {
    return _requireOrImportModule["default"];
  }
});
Object.defineProperty(exports, 'setGlobal', {
  enumerable: true,
  get: function get() {
    return _setGlobal["default"];
  }
});
exports.specialChars = void 0;
Object.defineProperty(exports, 'testPathPatternToRegExp', {
  enumerable: true,
  get: function get() {
    return _testPathPatternToRegExp["default"];
  }
});
Object.defineProperty(exports, 'tryRealpath', {
  enumerable: true,
  get: function get() {
    return _tryRealpath["default"];
  }
});
var _clearLine = _interopRequireDefault2(require('./clearLine'));
var _createDirectory = _interopRequireDefault2(require('./createDirectory'));
var _ErrorWithStack = _interopRequireDefault2(require('./ErrorWithStack'));
var _installCommonGlobals = _interopRequireDefault2(require('./installCommonGlobals'));
var _interopRequireDefault = _interopRequireDefault2(require('./interopRequireDefault'));
var _isInteractive = _interopRequireDefault2(require('./isInteractive'));
var _isPromise = _interopRequireDefault2(require('./isPromise'));
var _setGlobal = _interopRequireDefault2(require('./setGlobal'));
var _deepCyclicCopy = _interopRequireDefault2(require('./deepCyclicCopy'));
var _convertDescriptorToString = _interopRequireDefault2(require('./convertDescriptorToString'));
var _specialChars = _interopRequireWildcard(require('./specialChars'));
exports.specialChars = _specialChars;
var _replacePathSepForGlob = _interopRequireDefault2(require('./replacePathSepForGlob'));
var _testPathPatternToRegExp = _interopRequireDefault2(require('./testPathPatternToRegExp'));
var _globsToMatcher = _interopRequireDefault2(require('./globsToMatcher'));
var _preRunMessage = _interopRequireWildcard(require('./preRunMessage'));
exports.preRunMessage = _preRunMessage;
var _pluralize = _interopRequireDefault2(require('./pluralize'));
var _formatTime = _interopRequireDefault2(require('./formatTime'));
var _tryRealpath = _interopRequireDefault2(require('./tryRealpath'));
var _requireOrImportModule = _interopRequireDefault2(require('./requireOrImportModule'));
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj["default"] = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _interopRequireDefault2(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJfRXJyb3JXaXRoU3RhY2siLCJfY2xlYXJMaW5lIiwiX2NvbnZlcnREZXNjcmlwdG9yVG9TdHJpbmciLCJfY3JlYXRlRGlyZWN0b3J5IiwiX2RlZXBDeWNsaWNDb3B5IiwiX2Zvcm1hdFRpbWUiLCJfZ2xvYnNUb01hdGNoZXIiLCJfaW5zdGFsbENvbW1vbkdsb2JhbHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2lzSW50ZXJhY3RpdmUiLCJfaXNQcm9taXNlIiwiX3BsdXJhbGl6ZSIsInByZVJ1bk1lc3NhZ2UiLCJfcmVwbGFjZVBhdGhTZXBGb3JHbG9iIiwiX3JlcXVpcmVPckltcG9ydE1vZHVsZSIsIl9zZXRHbG9iYWwiLCJzcGVjaWFsQ2hhcnMiLCJfdGVzdFBhdGhQYXR0ZXJuVG9SZWdFeHAiLCJfdHJ5UmVhbHBhdGgiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MiIsInJlcXVpcmUiLCJfc3BlY2lhbENoYXJzIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcHJlUnVuTWVzc2FnZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjYWNoZSIsImhhcyIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdFcnJvcldpdGhTdGFjaycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9FcnJvcldpdGhTdGFjay5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnY2xlYXJMaW5lJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2NsZWFyTGluZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnY29udmVydERlc2NyaXB0b3JUb1N0cmluZycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9jb252ZXJ0RGVzY3JpcHRvclRvU3RyaW5nLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjcmVhdGVEaXJlY3RvcnknLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfY3JlYXRlRGlyZWN0b3J5LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdkZWVwQ3ljbGljQ29weScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9kZWVwQ3ljbGljQ29weS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnZm9ybWF0VGltZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9mb3JtYXRUaW1lLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdnbG9ic1RvTWF0Y2hlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9nbG9ic1RvTWF0Y2hlci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnaW5zdGFsbENvbW1vbkdsb2JhbHMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5zdGFsbENvbW1vbkdsb2JhbHMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2ludGVyb3BSZXF1aXJlRGVmYXVsdCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2lzSW50ZXJhY3RpdmUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaXNJbnRlcmFjdGl2ZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnaXNQcm9taXNlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzUHJvbWlzZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAncGx1cmFsaXplJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3BsdXJhbGl6ZS5kZWZhdWx0O1xuICB9XG59KTtcbmV4cG9ydHMucHJlUnVuTWVzc2FnZSA9IHZvaWQgMDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAncmVwbGFjZVBhdGhTZXBGb3JHbG9iJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3JlcGxhY2VQYXRoU2VwRm9yR2xvYi5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAncmVxdWlyZU9ySW1wb3J0TW9kdWxlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3JlcXVpcmVPckltcG9ydE1vZHVsZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnc2V0R2xvYmFsJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3NldEdsb2JhbC5kZWZhdWx0O1xuICB9XG59KTtcbmV4cG9ydHMuc3BlY2lhbENoYXJzID0gdm9pZCAwO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICd0ZXN0UGF0aFBhdHRlcm5Ub1JlZ0V4cCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90ZXN0UGF0aFBhdHRlcm5Ub1JlZ0V4cC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAndHJ5UmVhbHBhdGgnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdHJ5UmVhbHBhdGguZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfY2xlYXJMaW5lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZSgnLi9jbGVhckxpbmUnKSk7XG5cbnZhciBfY3JlYXRlRGlyZWN0b3J5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZSgnLi9jcmVhdGVEaXJlY3RvcnknKSk7XG5cbnZhciBfRXJyb3JXaXRoU3RhY2sgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKCcuL0Vycm9yV2l0aFN0YWNrJykpO1xuXG52YXIgX2luc3RhbGxDb21tb25HbG9iYWxzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIoXG4gIHJlcXVpcmUoJy4vaW5zdGFsbENvbW1vbkdsb2JhbHMnKVxuKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihcbiAgcmVxdWlyZSgnLi9pbnRlcm9wUmVxdWlyZURlZmF1bHQnKVxuKTtcblxudmFyIF9pc0ludGVyYWN0aXZlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZSgnLi9pc0ludGVyYWN0aXZlJykpO1xuXG52YXIgX2lzUHJvbWlzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoJy4vaXNQcm9taXNlJykpO1xuXG52YXIgX3NldEdsb2JhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoJy4vc2V0R2xvYmFsJykpO1xuXG52YXIgX2RlZXBDeWNsaWNDb3B5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZSgnLi9kZWVwQ3ljbGljQ29weScpKTtcblxudmFyIF9jb252ZXJ0RGVzY3JpcHRvclRvU3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIoXG4gIHJlcXVpcmUoJy4vY29udmVydERlc2NyaXB0b3JUb1N0cmluZycpXG4pO1xuXG52YXIgX3NwZWNpYWxDaGFycyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoJy4vc3BlY2lhbENoYXJzJykpO1xuXG5leHBvcnRzLnNwZWNpYWxDaGFycyA9IF9zcGVjaWFsQ2hhcnM7XG5cbnZhciBfcmVwbGFjZVBhdGhTZXBGb3JHbG9iID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIoXG4gIHJlcXVpcmUoJy4vcmVwbGFjZVBhdGhTZXBGb3JHbG9iJylcbik7XG5cbnZhciBfdGVzdFBhdGhQYXR0ZXJuVG9SZWdFeHAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihcbiAgcmVxdWlyZSgnLi90ZXN0UGF0aFBhdHRlcm5Ub1JlZ0V4cCcpXG4pO1xuXG52YXIgX2dsb2JzVG9NYXRjaGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZSgnLi9nbG9ic1RvTWF0Y2hlcicpKTtcblxudmFyIF9wcmVSdW5NZXNzYWdlID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgnLi9wcmVSdW5NZXNzYWdlJykpO1xuXG5leHBvcnRzLnByZVJ1bk1lc3NhZ2UgPSBfcHJlUnVuTWVzc2FnZTtcblxudmFyIF9wbHVyYWxpemUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKCcuL3BsdXJhbGl6ZScpKTtcblxudmFyIF9mb3JtYXRUaW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZSgnLi9mb3JtYXRUaW1lJykpO1xuXG52YXIgX3RyeVJlYWxwYXRoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZSgnLi90cnlSZWFscGF0aCcpKTtcblxudmFyIF9yZXF1aXJlT3JJbXBvcnRNb2R1bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihcbiAgcmVxdWlyZSgnLi9yZXF1aXJlT3JJbXBvcnRNb2R1bGUnKVxuKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7XG4gIGlmICh0eXBlb2YgV2Vha01hcCAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG51bGw7XG4gIHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTtcbiAgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAobm9kZUludGVyb3ApIHtcbiAgICByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7XG4gIH0pKG5vZGVJbnRlcm9wKTtcbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkge1xuICBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iaiAhPT0gJ2Z1bmN0aW9uJykpIHtcbiAgICByZXR1cm4ge2RlZmF1bHQ6IG9ian07XG4gIH1cbiAgdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTtcbiAgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7XG4gICAgcmV0dXJuIGNhY2hlLmdldChvYmopO1xuICB9XG4gIHZhciBuZXdPYmogPSB7fTtcbiAgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoa2V5ICE9PSAnZGVmYXVsdCcgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3JcbiAgICAgICAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KVxuICAgICAgICA6IG51bGw7XG4gICAgICBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBuZXdPYmouZGVmYXVsdCA9IG9iajtcbiAgaWYgKGNhY2hlKSB7XG4gICAgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTtcbiAgfVxuICByZXR1cm4gbmV3T2JqO1xufVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtkZWZhdWx0OiBvYmp9O1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUFDLFNBQUFBLFFBQUFDLENBQUEsc0NBQUFELE9BQUEsd0JBQUFFLE1BQUEsdUJBQUFBLE1BQUEsQ0FBQUMsUUFBQSxhQUFBRixDQUFBLGtCQUFBQSxDQUFBLGdCQUFBQSxDQUFBLFdBQUFBLENBQUEseUJBQUFDLE1BQUEsSUFBQUQsQ0FBQSxDQUFBRyxXQUFBLEtBQUFGLE1BQUEsSUFBQUQsQ0FBQSxLQUFBQyxNQUFBLENBQUFHLFNBQUEscUJBQUFKLENBQUEsS0FBQUQsT0FBQSxDQUFBQyxDQUFBO0FBRWJLLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkgsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRTtFQUMvQ0UsVUFBVSxFQUFFLElBQUk7RUFDaEJDLEdBQUcsRUFBRSxTQUFMQSxHQUFHQSxDQUFBLEVBQWM7SUFDZixPQUFPQyxlQUFlLFdBQVE7RUFDaEM7QUFDRixDQUFDLENBQUM7QUFDRk4sTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxXQUFXLEVBQUU7RUFDMUNFLFVBQVUsRUFBRSxJQUFJO0VBQ2hCQyxHQUFHLEVBQUUsU0FBTEEsR0FBR0EsQ0FBQSxFQUFjO0lBQ2YsT0FBT0UsVUFBVSxXQUFRO0VBQzNCO0FBQ0YsQ0FBQyxDQUFDO0FBQ0ZQLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsMkJBQTJCLEVB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