f5fb7a8b95dd824f99d0efb09d1af0aa
'use strict';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _stream = _interopRequireDefault(require("stream"));
var _utils = _interopRequireDefault(require("../utils.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
function _get() { return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) { var p = _superPropBase(e, t); if (p) { var n = Object.getOwnPropertyDescriptor(p, t); return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value; } }, _get.apply(null, arguments); }
function _superPropBase(t, o) { for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));); return t; }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var kInternals = Symbol('internals');
var AxiosTransformStream = /*#__PURE__*/function (_stream$Transform) {
  function AxiosTransformStream(options) {
    var _this;
    _classCallCheck(this, AxiosTransformStream);
    options = _utils["default"].toFlatObject(options, {
      maxRate: 0,
      chunkSize: 64 * 1024,
      minChunkSize: 100,
      timeWindow: 500,
      ticksRate: 2,
      samplesCount: 15
    }, null, function (prop, source) {
      return !_utils["default"].isUndefined(source[prop]);
    });
    _this = _callSuper(this, AxiosTransformStream, [{
      readableHighWaterMark: options.chunkSize
    }]);
    var internals = _this[kInternals] = {
      timeWindow: options.timeWindow,
      chunkSize: options.chunkSize,
      maxRate: options.maxRate,
      minChunkSize: options.minChunkSize,
      bytesSeen: 0,
      isCaptured: false,
      notifiedBytesLoaded: 0,
      ts: Date.now(),
      bytes: 0,
      onReadCallback: null
    };
    _this.on('newListener', function (event) {
      if (event === 'progress') {
        if (!internals.isCaptured) {
          internals.isCaptured = true;
        }
      }
    });
    return _this;
  }
  _inherits(AxiosTransformStream, _stream$Transform);
  return _createClass(AxiosTransformStream, [{
    key: "_read",
    value: function _read(size) {
      var internals = this[kInternals];
      if (internals.onReadCallback) {
        internals.onReadCallback();
      }
      return _superPropGet(AxiosTransformStream, "_read", this, 3)([size]);
    }
  }, {
    key: "_transform",
    value: function _transform(chunk, encoding, callback) {
      var _this2 = this;
      var internals = this[kInternals];
      var maxRate = internals.maxRate;
      var readableHighWaterMark = this.readableHighWaterMark;
      var timeWindow = internals.timeWindow;
      var divider = 1000 / timeWindow;
      var bytesThreshold = maxRate / divider;
      var minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;
      var pushChunk = function pushChunk(_chunk, _callback) {
        var bytes = Buffer.byteLength(_chunk);
        internals.bytesSeen += bytes;
        internals.bytes += bytes;
        internals.isCaptured && _this2.emit('progress', internals.bytesSeen);
        if (_this2.push(_chunk)) {
          process.nextTick(_callback);
        } else {
          internals.onReadCallback = function () {
            internals.onReadCallback = null;
            process.nextTick(_callback);
          };
        }
      };
      var transformChunk = function transformChunk(_chunk, _callback) {
        var chunkSize = Buffer.byteLength(_chunk);
        var chunkRemainder = null;
        var maxChunkSize = readableHighWaterMark;
        var bytesLeft;
        var passed = 0;
        if (maxRate) {
          var now = Date.now();
          if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {
            internals.ts = now;
            bytesLeft = bytesThreshold - internals.bytes;
            internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
            passed = 0;
          }
          bytesLeft = bytesThreshold - internals.bytes;
        }
        if (maxRate) {
          if (bytesLeft <= 0) {
            // next time window
            return setTimeout(function () {
              _callback(null, _chunk);
            }, timeWindow - passed);
          }
          if (bytesLeft < maxChunkSize) {
            maxChunkSize = bytesLeft;
          }
        }
        if (maxChunkSize && chunkSize > maxChunkSize && chunkSize - maxChunkSize > minChunkSize) {
          chunkRemainder = _chunk.subarray(maxChunkSize);
          _chunk = _chunk.subarray(0, maxChunkSize);
        }
        pushChunk(_chunk, chunkRemainder ? function () {
          process.nextTick(_callback, null, chunkRemainder);
        } : _callback);
      };
      transformChunk(chunk, function transformNextChunk(err, _chunk) {
        if (err) {
          return callback(err);
        }
        if (_chunk) {
          transformChunk(_chunk, transformNextChunk);
        } else {
          callback(null);
        }
      });
    }
  }]);
}(_stream["default"].Transform);
var _default = exports["default"] = AxiosTransformStream;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9zdHJlYW0iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl91dGlscyIsImUiLCJfX2VzTW9kdWxlIiwiX2NsYXNzQ2FsbENoZWNrIiwiYSIsIm4iLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInIiLCJ0IiwibGVuZ3RoIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX3RvUHJvcGVydHlLZXkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJpIiwiX3RvUHJpbWl0aXZlIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiU3RyaW5nIiwiTnVtYmVyIiwiX2NhbGxTdXBlciIsIl9nZXRQcm90b3R5cGVPZiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJhcHBseSIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsIkJvb2xlYW4iLCJ2YWx1ZU9mIiwiX3N1cGVyUHJvcEdldCIsInAiLCJfZ2V0IiwiZ2V0IiwiYmluZCIsIl9zdXBlclByb3BCYXNlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiYXJndW1lbnRzIiwiaGFzT3duUHJvcGVydHkiLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2luaGVyaXRzIiwiY3JlYXRlIiwiX3NldFByb3RvdHlwZU9mIiwia0ludGVybmFscyIsIkF4aW9zVHJhbnNmb3JtU3RyZWFtIiwiX3N0cmVhbSRUcmFuc2Zvcm0iLCJvcHRpb25zIiwiX3RoaXMiLCJ1dGlscyIsInRvRmxhdE9iamVjdCIsIm1heFJhdGUiLCJjaHVua1NpemUiLCJtaW5DaHVua1NpemUiLCJ0aW1lV2luZG93IiwidGlja3NSYXRlIiwic2FtcGxlc0NvdW50IiwicHJvcCIsInNvdXJjZSIsImlzVW5kZWZpbmVkIiwicmVhZGFibGVIaWdoV2F0ZXJNYXJrIiwiaW50ZXJuYWxzIiwiYnl0ZXNTZWVuIiwiaXNDYXB0dXJlZCIsIm5vdGlmaWVkQnl0ZXNMb2FkZWQiLCJ0cyIsIkRhdGUiLCJub3ciLCJieXRlcyIsIm9uUmVhZENhbGxiYWNrIiwib24iLCJldmVudCIsIl9yZWFkIiwic2l6ZSIsIl90cmFuc2Zvcm0iLCJjaHVuayIsImVuY29kaW5nIiwiY2FsbGJhY2siLCJfdGhpczIiLCJkaXZpZGVyIiwiYnl0ZXNUaHJlc2hvbGQiLCJNYXRoIiwibWF4IiwicHVzaENodW5rIiwiX2NodW5rIiwiX2NhbGxiYWNrIiwiQnVmZmVyIiwiYnl0ZUxlbmd0aCIsImVtaXQiLCJwdXNoIiwicHJvY2VzcyIsIm5leHRUaWNrIiwidHJhbnNmb3JtQ2h1bmsiLCJjaHVua1JlbWFpbmRlciIsIm1heENodW5rU2l6ZSIsImJ5dGVzTGVmdCIsInBhc3NlZCIsInNldFRpbWVvdXQiLCJzdWJhcnJheSIsInRyYW5zZm9ybU5leHRDaHVuayIsImVyciIsInN0cmVhbSIsIlRyYW5zZm9ybSIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiQXhpb3NUcmFuc2Zvcm1TdHJlYW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgc3RyZWFtIGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG5jb25zdCBrSW50ZXJuYWxzID0gU3ltYm9sKCdpbnRlcm5hbHMnKTtcblxuY2xhc3MgQXhpb3NUcmFuc2Zvcm1TdHJlYW0gZXh0ZW5kcyBzdHJlYW0uVHJhbnNmb3Jte1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHV0aWxzLnRvRmxhdE9iamVjdChvcHRpb25zLCB7XG4gICAgICBtYXhSYXRlOiAwLFxuICAgICAgY2h1bmtTaXplOiA2NCAqIDEwMjQsXG4gICAgICBtaW5DaHVua1NpemU6IDEwMCxcbiAgICAgIHRpbWVXaW5kb3c6IDUwMCxcbiAgICAgIHRpY2tzUmF0ZTogMixcbiAgICAgIHNhbXBsZXNDb3VudDogMTVcbiAgICB9LCBudWxsLCAocHJvcCwgc291cmNlKSA9PiB7XG4gICAgICByZXR1cm4gIXV0aWxzLmlzVW5kZWZpbmVkKHNvdXJjZVtwcm9wXSk7XG4gICAgfSk7XG5cbiAgICBzdXBlcih7XG4gICAgICByZWFkYWJsZUhpZ2hXYXRlck1hcms6IG9wdGlvbnMuY2h1bmtTaXplXG4gICAgfSk7XG5cbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzW2tJbnRlcm5hbHNdID0ge1xuICAgICAgdGltZVdpbmRvdzogb3B0aW9ucy50aW1lV2luZG93LFxuICAgICAgY2h1bmtTaXplOiBvcHRpb25zLmNodW5rU2l6ZSxcbiAgICAgIG1heFJhdGU6IG9wdGlvbnMubWF4UmF0ZSxcbiAgICAgIG1pbkNodW5rU2l6ZTogb3B0aW9ucy5taW5DaHVua1NpemUsXG4gICAgICBieXRlc1NlZW46IDAsXG4gICAgICBpc0NhcHR1cmVkOiBmYWxzZSxcbiAgICAgIG5vdGlmaWVkQnl0ZXNMb2FkZWQ6IDAsXG4gICAgICB0czogRGF0ZS5ub3coKSxcbiAgICAgIGJ5dGVzOiAwLFxuICAgICAgb25SZWFkQ2FsbGJhY2s6IG51bGxcbiAgICB9O1xuXG4gICAgdGhpcy5vbignbmV3TGlzdGVuZXInLCBldmVudCA9PiB7XG4gICAgICBpZiAoZXZlbnQgPT09ICdwcm9ncmVzcycpIHtcbiAgICAgICAgaWYgKCFpbnRlcm5hbHMuaXNDYXB0dXJlZCkge1xuICAgICAgICAgIGludGVybmFscy5pc0NhcHR1cmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgX3JlYWQoc2l6ZSkge1xuICAgIGNvbnN0IGludGVybmFscyA9IHRoaXNba0ludGVybmFsc107XG5cbiAgICBpZiAoaW50ZXJuYWxzLm9uUmVhZENhbGxiYWNrKSB7XG4gICAgICBpbnRlcm5hbHMub25SZWFkQ2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIuX3JlYWQoc2l6ZSk7XG4gIH1cblxuICBfdHJhbnNmb3JtKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzW2tJbnRlcm5hbHNdO1xuICAgIGNvbnN0IG1heFJhdGUgPSBpbnRlcm5hbHMubWF4UmF0ZTtcblxuICAgIGNvbnN0IHJlYWRhYmxlSGlnaFdhdGVyTWFyayA9IHRoaXMucmVhZGFibGVIaWdoV2F0ZXJNYXJrO1xuXG4gICAgY29uc3QgdGltZVdpbmRvdyA9IGludGVybmFscy50aW1lV2luZG93O1xuXG4gICAgY29uc3QgZGl2aWRlciA9IDEwMDAgLyB0aW1lV2luZG93O1xuICAgIGNvbnN0IGJ5dGVzVGhyZXNob2xkID0gKG1heFJhdGUgLyBkaXZpZGVyKTtcbiAgICBjb25zdCBtaW5DaHVua1NpemUgPSBpbnRlcm5hbHMubWluQ2h1bmtTaXplICE9PSBmYWxzZSA/IE1hdGgubWF4KGludGVybmFscy5taW5DaHVua1NpemUsIGJ5dGVzVGhyZXNob2xkICogMC4wMSkgOiAwO1xuXG4gICAgY29uc3QgcHVzaENodW5rID0gKF9jaHVuaywgX2NhbGxiYWNrKSA9PiB7XG4gICAgICBjb25zdCBieXRlcyA9IEJ1ZmZlci5ieXRlTGVuZ3RoKF9jaHVuayk7XG4gICAgICBpbnRlcm5hbHMuYnl0ZXNTZWVuICs9IGJ5dGVzO1xuICAgICAgaW50ZXJuYWxzLmJ5dGVzICs9IGJ5dGVzO1xuXG4gICAgICBpbnRlcm5hbHMuaXNDYXB0dXJlZCAmJiB0aGlzLmVtaXQoJ3Byb2dyZXNzJywgaW50ZXJuYWxzLmJ5dGVzU2Vlbik7XG5cbiAgICAgIGlmICh0aGlzLnB1c2goX2NodW5rKSkge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKF9jYWxsYmFjayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnRlcm5hbHMub25SZWFkQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgICAgaW50ZXJuYWxzLm9uUmVhZENhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKF9jYWxsYmFjayk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgdHJhbnNmb3JtQ2h1bmsgPSAoX2NodW5rLCBfY2FsbGJhY2spID0+IHtcbiAgICAgIGNvbnN0IGNodW5rU2l6ZSA9IEJ1ZmZlci5ieXRlTGVuZ3RoKF9jaHVuayk7XG4gICAgICBsZXQgY2h1bmtSZW1haW5kZXIgPSBudWxsO1xuICAgICAgbGV0IG1heENodW5rU2l6ZSA9IHJlYWRhYmxlSGlnaFdhdGVyTWFyaztcbiAgICAgIGxldCBieXRlc0xlZnQ7XG4gICAgICBsZXQgcGFzc2VkID0gMDtcblxuICAgICAgaWYgKG1heFJhdGUpIHtcbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgICAgICBpZiAoIWludGVybmFscy50cyB8fCAocGFzc2VkID0gKG5vdyAtIGludGVybmFscy50cykpID49IHRpbWVXaW5kb3cpIHtcbiAgICAgICAgICBpbnRlcm5hbHMudHMgPSBub3c7XG4gICAgICAgICAgYnl0ZXNMZWZ0ID0gYnl0ZXNUaHJlc2hvbGQgLSBpbnRlcm5hbHMuYnl0ZXM7XG4gICAgICAgICAgaW50ZXJuYWxzLmJ5dGVzID0gYnl0ZXNMZWZ0IDwgMCA/IC1ieXRlc0xlZnQgOiAwO1xuICAgICAgICAgIHBhc3NlZCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBieXRlc0xlZnQgPSBieXRlc1RocmVzaG9sZCAtIGludGVybmFscy5ieXRlcztcbiAgICAgIH1cblxuICAgICAgaWYgKG1heFJhdGUpIHtcbiAgICAgICAgaWYgKGJ5dGVzTGVmdCA8PSAwKSB7XG4gICAgICAgICAgLy8gbmV4dCB0aW1lIHdpbmRvd1xuICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIF9jYWxsYmFjayhudWxsLCBfY2h1bmspO1xuICAgICAgICAgIH0sIHRpbWVXaW5kb3cgLSBwYXNzZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJ5dGVzTGVmdCA8IG1heENodW5rU2l6ZSkge1xuICAgICAgICAgIG1heENodW5rU2l6ZSA9IGJ5dGVzTGVmdDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWF4Q2h1bmtTaXplICYmIGNodW5rU2l6ZSA+IG1heENodW5rU2l6ZSAmJiAoY2h1bmtTaXplIC0gbWF4Q2h1bmtTaXplKSA+IG1pbkNodW5rU2l6ZSkge1xuICAgICAgICBjaHVua1JlbWFpbmRlciA9IF9jaHVuay5zdWJhcnJheShtYXhDaHVua1NpemUpO1xuICAgICAgICBfY2h1bmsgPSBfY2h1bmsuc3ViYXJyYXkoMCwgbWF4Q2h1bmtTaXplKTtcbiAgICAgIH1cblxuICAgICAgcHVzaENodW5rKF9jaHVuaywgY2h1bmtSZW1haW5kZXIgPyAoKSA9PiB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soX2NhbGxiYWNrLCBudWxsLCBjaHVua1JlbWFpbmRlcik7XG4gICAgICB9IDogX2NhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgdHJhbnNmb3JtQ2h1bmsoY2h1bmssIGZ1bmN0aW9uIHRyYW5zZm9ybU5leHRDaHVuayhlcnIsIF9jaHVuaykge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9jaHVuaykge1xuICAgICAgICB0cmFuc2Zvcm1DaHVuayhfY2h1bmssIHRyYW5zZm9ybU5leHRDaHVuayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBeGlvc1RyYW5zZm9ybVN0cmVhbTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFBQyxTQUFBQSxRQUFB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QjRCLFNBQVMsR0FBR2YsY0FBYyxHQUFHbkIsU0FBUyxDQUFDTyxLQUFLO1lBQzVDUCxTQUFTLENBQUNPLEtBQUssR0FBRzJCLFNBQVMsR0FBRyxDQUFDLEdBQUcsQ0FBQ0EsU0FBUyxHQUFHLENBQUM7WUFDaERDLE1BQU0sR0FBRyxDQUFDO1VBQ1o7VUFFQUQsU0FBUyxHQUFHZixjQUFjLEdBQUduQixTQUFTLENBQUNPLEtBQUs7UUFDOUM7UUFFQSxJQUFJakIsT0FBTyxFQUFFO1VBQ1gsSUFBSTRDLFNBQVMsSUFBSSxDQUFDLEVBQUU7WUFDbEI7WUFDQSxPQUFPRSxVQUFVLENBQUMsWUFBTTtjQUN0QlosU0FBUyxDQUFDLElBQUksRUFBRUQsTUFBTSxDQUFDO1lBQ3pCLENBQUMsRUFBRTlCLFVBQVUsR0FBRzBDLE1BQU0sQ0FBQztVQUN6QjtVQUVBLElBQUlELFNBQVMsR0FBR0QsWUFBWSxFQUFFO1lBQzVCQSxZQUFZLEdBQUdDLFNBQVM7VUFDMUI7UUFDRjtRQUVBLElBQUlELFlBQVksSUFBSTFDLFNBQVMsR0FBRzBDLFlBQVksSUFBSzFDLFNBQVMsR0FBRzBDLFlBQVksR0FBSXpDLFlBQVksRUFBRTtVQUN6RndDLGNBQWMsR0FBR1QsTUFBTSxDQUFDYyxRQUFRLENBQUNKLFlBQVksQ0FBQztVQUM5Q1YsTUFBTSxHQUFHQSxNQUFNLENBQUNjLFFBQVEsQ0FBQyxDQUFDLEVBQUVKLFlBQVksQ0FBQztRQUMzQztRQUVBWCxTQUFTLENBQUNDLE1BQU0sRUFBRVMsY0FBYyxHQUFHLFlBQU07VUFDdkNILE9BQU8sQ0FBQ0MsUUFBUSxDQUFDTixTQUFTLEVBQUUsSUFBSSxFQUFFUSxjQUFjLENBQUM7UUFDbkQsQ0FBQyxHQUFHUixTQUFTLENBQUM7TUFDaEIsQ0FBQztNQUVETyxjQUFjLENBQUNqQixLQUFLLEVBQUUsU0FBU3dCLGtCQUFrQkEsQ0FBQ0MsR0FBRyxFQUFFaEIsTUFBTSxFQUFFO1FBQzdELElBQUlnQixHQUFHLEVBQUU7VUFDUCxPQUFPdkIsUUFBUSxDQUFDdUIsR0FBRyxDQUFDO1FBQ3RCO1FBRUEsSUFBSWhCLE1BQU0sRUFBRTtVQUNWUSxjQUFjLENBQUNSLE1BQU0sRUFBRWUsa0JBQWtCLENBQUM7UUFDNUMsQ0FBQyxNQUFNO1VBQ0x0QixRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ2hCO01BQ0YsQ0FBQyxDQUFDO0lBQ0o7RUFBQztBQUFBLEVBcElnQ3dCLGtCQUFNLENBQUNDLFNBQVM7QUFBQSxJQUFBQyxRQUFBLEdBQUFqSCxPQUFBLGNBdUlwQ3VELG9CQUFvQiIsImlnbm9yZUxpc3QiOltdfQ==