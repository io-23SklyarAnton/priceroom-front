de2ed2f2fc566c0a57233045fd6869d4
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getQueriesForElement = getQueriesForElement;
var defaultQueries = _interopRequireWildcard(require("./queries"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
/**
 * @typedef {{[key: string]: Function}} FuncMap
 */

/**
 * @param {HTMLElement} element container
 * @param {FuncMap} queries object of functions
 * @param {Object} initialValue for reducer
 * @returns {FuncMap} returns object of functions bound to container
 */
function getQueriesForElement(element) {
  var queries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultQueries;
  var initialValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return Object.keys(queries).reduce(function (helpers, key) {
    var fn = queries[key];
    helpers[key] = fn.bind(null, element);
    return helpers;
  }, initialValue);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFF1ZXJpZXNGb3JFbGVtZW50IiwiZGVmYXVsdFF1ZXJpZXMiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJlbGVtZW50IiwicXVlcmllcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImluaXRpYWxWYWx1ZSIsImtleXMiLCJyZWR1Y2UiLCJoZWxwZXJzIiwia2V5IiwiZm4iLCJiaW5kIl0sInNvdXJjZXMiOlsiZ2V0LXF1ZXJpZXMtZm9yLWVsZW1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldFF1ZXJpZXNGb3JFbGVtZW50ID0gZ2V0UXVlcmllc0ZvckVsZW1lbnQ7XG52YXIgZGVmYXVsdFF1ZXJpZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9xdWVyaWVzXCIpKTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApIHJldHVybiBudWxsOyB2YXIgciA9IG5ldyBXZWFrTWFwKCksIHQgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlID8gdCA6IHI7IH0pKGUpOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChlLCByKSB7IGlmICghciAmJiBlICYmIGUuX19lc01vZHVsZSkgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT0gdHlwZW9mIGUgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKSByZXR1cm4geyBkZWZhdWx0OiBlIH07IHZhciB0ID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKHIpOyBpZiAodCAmJiB0LmhhcyhlKSkgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHsgX19wcm90b19fOiBudWxsIH0sIGEgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgdSBpbiBlKSBpZiAoXCJkZWZhdWx0XCIgIT09IHUgJiYge30uaGFzT3duUHJvcGVydHkuY2FsbChlLCB1KSkgeyB2YXIgaSA9IGEgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHUpIDogbnVsbDsgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIHUsIGkpIDogblt1XSA9IGVbdV07IH0gcmV0dXJuIG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbiksIG47IH1cbi8qKlxuICogQHR5cGVkZWYge3tba2V5OiBzdHJpbmddOiBGdW5jdGlvbn19IEZ1bmNNYXBcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgY29udGFpbmVyXG4gKiBAcGFyYW0ge0Z1bmNNYXB9IHF1ZXJpZXMgb2JqZWN0IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IGluaXRpYWxWYWx1ZSBmb3IgcmVkdWNlclxuICogQHJldHVybnMge0Z1bmNNYXB9IHJldHVybnMgb2JqZWN0IG9mIGZ1bmN0aW9ucyBib3VuZCB0byBjb250YWluZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UXVlcmllc0ZvckVsZW1lbnQoZWxlbWVudCwgcXVlcmllcyA9IGRlZmF1bHRRdWVyaWVzLCBpbml0aWFsVmFsdWUgPSB7fSkge1xuICByZXR1cm4gT2JqZWN0LmtleXMocXVlcmllcykucmVkdWNlKChoZWxwZXJzLCBrZXkpID0+IHtcbiAgICBjb25zdCBmbiA9IHF1ZXJpZXNba2V5XTtcbiAgICBoZWxwZXJzW2tleV0gPSBmbi5iaW5kKG51bGwsIGVsZW1lbnQpO1xuICAgIHJldHVybiBoZWxwZXJzO1xuICB9LCBpbml0aWFsVmFsdWUpO1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFBQyxTQUFBQSxRQUFBQyxDQUFBLHNDQUFBRCxPQUFBLHdCQUFBRSxNQUFBLHVCQUFBQSxNQUFBLENBQUFDLFFBQUEsYUFBQUYsQ0FBQSxrQkFBQUEsQ0FBQSxnQkFBQUEsQ0FBQSxXQUFBQSxDQUFBLHlCQUFBQyxNQUFBLElBQUFELENBQUEsQ0FBQUcsV0FBQSxLQUFBRixNQUFBLElBQUFELENBQUEsS0FBQUMsTUFBQSxDQUFBRyxTQUFBLHFCQUFBSixDQUFBLEtBQUFELE9BQUEsQ0FBQUMsQ0FBQTtBQUViSyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0Usb0JBQW9CLEdBQUdBLG9CQUFvQjtBQUNuRCxJQUFJQyxjQUFjLEdBQUdDLHVCQUF1QixDQUFDQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDbEUsU0FBU0Msd0JBQXdCQSxDQUFDQyxDQUFDLEVBQUU7RUFBRSxJQUFJLFVBQVUsSUFBSSxPQUFPQyxPQUFPLEVBQUUsT0FBTyxJQUFJO0VBQUUsSUFBSUMsQ0FBQyxHQUFHLElBQUlELE9BQU8sQ0FBQyxDQUFDO0lBQUVFLENBQUMsR0FBRyxJQUFJRixPQUFPLENBQUMsQ0FBQztFQUFFLE9BQU8sQ0FBQ0Ysd0JBQXdCLEdB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