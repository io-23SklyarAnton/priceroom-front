76839b81d91fc2c230d77e3639dd1179
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _axios = _interopRequireDefault(require("axios"));
var _reactRouterDom = require("react-router-dom");
require("./SignUp.css");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
// @ts-nocheck
function stryNS_9fa48() {
  var g = (typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === 'object' && globalThis && globalThis.Math === Math && globalThis || new Function("return this")();
  var ns = g.__stryker__ || (g.__stryker__ = {});
  if (ns.activeMutant === undefined && g.process && g.process.env && g.process.env.__STRYKER_ACTIVE_MUTANT__) {
    ns.activeMutant = g.process.env.__STRYKER_ACTIVE_MUTANT__;
  }
  function retrieveNS() {
    return ns;
  }
  stryNS_9fa48 = retrieveNS;
  return retrieveNS();
}
stryNS_9fa48();
function stryCov_9fa48() {
  var ns = stryNS_9fa48();
  var cov = ns.mutantCoverage || (ns.mutantCoverage = {
    "static": {},
    perTest: {}
  });
  function cover() {
    var c = cov["static"];
    if (ns.currentTestId) {
      c = cov.perTest[ns.currentTestId] = cov.perTest[ns.currentTestId] || {};
    }
    var a = arguments;
    for (var i = 0; i < a.length; i++) {
      c[a[i]] = (c[a[i]] || 0) + 1;
    }
  }
  stryCov_9fa48 = cover;
  cover.apply(null, arguments);
}
function stryMutAct_9fa48(id) {
  var ns = stryNS_9fa48();
  function isActive(id) {
    if (ns.activeMutant === id) {
      if (ns.hitCount !== void 0 && ++ns.hitCount > ns.hitLimit) {
        throw new Error('Stryker: Hit count limit reached (' + ns.hitCount + ')');
      }
      return true;
    }
    return false;
  }
  stryMutAct_9fa48 = isActive;
  return isActive(id);
}
var SignUp = function SignUp() {
  if (stryMutAct_9fa48("360")) {
    {}
  } else {
    stryCov_9fa48("360");
    var _useState = (0, _react.useState)(stryMutAct_9fa48("361") ? "Stryker was here!" : (stryCov_9fa48("361"), '')),
      _useState2 = _slicedToArray(_useState, 2),
      username = _useState2[0],
      setUsername = _useState2[1];
    var _useState3 = (0, _react.useState)(stryMutAct_9fa48("362") ? "Stryker was here!" : (stryCov_9fa48("362"), '')),
      _useState4 = _slicedToArray(_useState3, 2),
      password = _useState4[0],
      setPassword = _useState4[1];
    var _useState5 = (0, _react.useState)(stryMutAct_9fa48("363") ? "Stryker was here!" : (stryCov_9fa48("363"), '')),
      _useState6 = _slicedToArray(_useState5, 2),
      confirmPassword = _useState6[0],
      setConfirmPassword = _useState6[1];
    var _useState7 = (0, _react.useState)(stryMutAct_9fa48("364") ? "Stryker was here!" : (stryCov_9fa48("364"), '')),
      _useState8 = _slicedToArray(_useState7, 2),
      errorMessage = _useState8[0],
      setErrorMessage = _useState8[1];
    var _useState9 = (0, _react.useState)(stryMutAct_9fa48("365") ? "Stryker was here!" : (stryCov_9fa48("365"), '')),
      _useState10 = _slicedToArray(_useState9, 2),
      successMessage = _useState10[0],
      setSuccessMessage = _useState10[1];
    var navigate = (0, _reactRouterDom.useNavigate)();
    (0, _react.useEffect)(function () {
      if (stryMutAct_9fa48("366")) {
        {}
      } else {
        stryCov_9fa48("366");
        // Перевірка наявності токена в localStorage
        var token = localStorage.getItem(stryMutAct_9fa48("367") ? "" : (stryCov_9fa48("367"), 'token'));
        if (stryMutAct_9fa48("369") ? false : stryMutAct_9fa48("368") ? true : (stryCov_9fa48("368", "369"), token)) {
          if (stryMutAct_9fa48("370")) {
            {}
          } else {
            stryCov_9fa48("370");
            // Якщо токен є, перенаправляємо на домашню сторінку або профіль
            navigate(stryMutAct_9fa48("371") ? "" : (stryCov_9fa48("371"), '/'));
          }
        }
      }
    }, stryMutAct_9fa48("372") ? [] : (stryCov_9fa48("372"), [navigate]));
    var validatePassword = function validatePassword() {
      if (stryMutAct_9fa48("373")) {
        {}
      } else {
        stryCov_9fa48("373");
        return stryMutAct_9fa48("377") ? password.length < 8 : stryMutAct_9fa48("376") ? password.length > 8 : stryMutAct_9fa48("375") ? false : stryMutAct_9fa48("374") ? true : (stryCov_9fa48("374", "375", "376", "377"), password.length >= 8);
      }
    };
    var handleSignUp = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var response;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!stryMutAct_9fa48("378")) {
                _context.next = 3;
                break;
              }
              _context.next = 34;
              break;
            case 3:
              stryCov_9fa48("378");
              setErrorMessage(stryMutAct_9fa48("379") ? "Stryker was here!" : (stryCov_9fa48("379"), ''));
              setSuccessMessage(stryMutAct_9fa48("380") ? "Stryker was here!" : (stryCov_9fa48("380"), ''));
              if (!(stryMutAct_9fa48("383") ? password === confirmPassword : stryMutAct_9fa48("382") ? false : stryMutAct_9fa48("381") ? true : (stryCov_9fa48("381", "382", "383"), password !== confirmPassword))) {
                _context.next = 13;
                break;
              }
              if (!stryMutAct_9fa48("384")) {
                _context.next = 10;
                break;
              }
              _context.next = 13;
              break;
            case 10:
              stryCov_9fa48("384");
              setErrorMessage(stryMutAct_9fa48("385") ? "" : (stryCov_9fa48("385"), 'Паролі не є однаковими.'));
              return _context.abrupt("return");
            case 13:
              if (!(stryMutAct_9fa48("388") ? false : stryMutAct_9fa48("387") ? true : stryMutAct_9fa48("386") ? validatePassword() : (stryCov_9fa48("386", "387", "388"), !validatePassword()))) {
                _context.next = 20;
                break;
              }
              if (!stryMutAct_9fa48("389")) {
                _context.next = 17;
                break;
              }
              _context.next = 20;
              break;
            case 17:
              stryCov_9fa48("389");
              setErrorMessage(stryMutAct_9fa48("390") ? "" : (stryCov_9fa48("390"), 'Пароль має бути довжиною мінімум у 8 символів.'));
              return _context.abrupt("return");
            case 20:
              _context.prev = 20;
              if (!stryMutAct_9fa48("391")) {
                _context.next = 24;
                break;
              }
              _context.next = 29;
              break;
            case 24:
              stryCov_9fa48("391");
              _context.next = 27;
              return _axios["default"].post(stryMutAct_9fa48("392") ? "" : (stryCov_9fa48("392"), 'http://localhost:5000/signup'), stryMutAct_9fa48("393") ? {} : (stryCov_9fa48("393"), {
                username: username,
                password: password
              }));
            case 27:
              response = _context.sent;
              if (stryMutAct_9fa48("395") ? false : stryMutAct_9fa48("394") ? true : (stryCov_9fa48("394", "395"), response.data.success)) {
                if (stryMutAct_9fa48("396")) {
                  {}
                } else {
                  stryCov_9fa48("396");
                  setSuccessMessage(stryMutAct_9fa48("397") ? "" : (stryCov_9fa48("397"), 'Користувача було створено!'));
                  setUsername(stryMutAct_9fa48("398") ? "Stryker was here!" : (stryCov_9fa48("398"), ''));
                  setPassword(stryMutAct_9fa48("399") ? "Stryker was here!" : (stryCov_9fa48("399"), ''));
                  setConfirmPassword(stryMutAct_9fa48("400") ? "Stryker was here!" : (stryCov_9fa48("400"), ''));
                }
              } else {
                if (stryMutAct_9fa48("401")) {
                  {}
                } else {
                  stryCov_9fa48("401");
                  setErrorMessage(stryMutAct_9fa48("404") ? response.data.message && 'Виникла помилка, повторіть спробу.' : stryMutAct_9fa48("403") ? false : stryMutAct_9fa48("402") ? true : (stryCov_9fa48("402", "403", "404"), response.data.message || (stryMutAct_9fa48("405") ? "" : (stryCov_9fa48("405"), 'Виникла помилка, повторіть спробу.'))));
                }
              }
            case 29:
              _context.next = 34;
              break;
            case 31:
              _context.prev = 31;
              _context.t0 = _context["catch"](20);
              if (stryMutAct_9fa48("406")) {
                {}
              } else {
                stryCov_9fa48("406");
                if (stryMutAct_9fa48("409") ? _context.t0.response || _context.t0.response.data : stryMutAct_9fa48("408") ? false : stryMutAct_9fa48("407") ? true : (stryCov_9fa48("407", "408", "409"), _context.t0.response && _context.t0.response.data)) {
                  if (stryMutAct_9fa48("410")) {
                    {}
                  } else {
                    stryCov_9fa48("410");
                    setErrorMessage(stryMutAct_9fa48("413") ? _context.t0.response.data.message && 'Виникла помилка, повторіть спробу.' : stryMutAct_9fa48("412") ? false : stryMutAct_9fa48("411") ? true : (stryCov_9fa48("411", "412", "413"), _context.t0.response.data.message || (stryMutAct_9fa48("414") ? "" : (stryCov_9fa48("414"), 'Виникла помилка, повторіть спробу.'))));
                  }
                } else {
                  if (stryMutAct_9fa48("415")) {
                    {}
                  } else {
                    stryCov_9fa48("415");
                    setErrorMessage(stryMutAct_9fa48("416") ? "" : (stryCov_9fa48("416"), 'Виникла помилка, повторіть спробу.'));
                  }
                }
                console.error(_context.t0);
              }
            case 34:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[20, 31]]);
      }));
      return function handleSignUp() {
        return _ref.apply(this, arguments);
      };
    }();
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "signup-container"
    }, /*#__PURE__*/_react["default"].createElement("h2", {
      className: "signup-title"
    }, "\u0417\u0430\u0440\u0435\u0454\u0441\u0442\u0440\u0443\u0432\u0430\u0442\u0438\u0441\u044C"), /*#__PURE__*/_react["default"].createElement("div", {
      className: "signup-step"
    }, /*#__PURE__*/_react["default"].createElement("input", {
      type: "text",
      placeholder: "\u042E\u0437\u0435\u0440\u043D\u0435\u0439\u043C",
      value: username,
      onChange: stryMutAct_9fa48("417") ? function () {
        return undefined;
      } : (stryCov_9fa48("417"), function (e) {
        return setUsername(e.target.value);
      }),
      className: "signup-input"
    }), /*#__PURE__*/_react["default"].createElement("input", {
      type: "password",
      placeholder: "\u041F\u0430\u0440\u043E\u043B\u044C",
      value: password,
      onChange: stryMutAct_9fa48("418") ? function () {
        return undefined;
      } : (stryCov_9fa48("418"), function (e) {
        return setPassword(e.target.value);
      }),
      className: "signup-input"
    }), stryMutAct_9fa48("421") ? password && password.length < 8 || /*#__PURE__*/_react["default"].createElement("p", {
      className: "error-message"
    }, "\u041F\u0430\u0440\u043E\u043B\u044C \u043C\u0430\u0454 \u0431\u0443\u0442\u0438 \u0434\u043E\u0432\u0436\u0438\u043D\u043E\u044E \u043C\u0456\u043D\u0456\u043C\u0443\u043C \u0443 8 \u0441\u0438\u043C\u0432\u043E\u043B\u0456\u0432.") : stryMutAct_9fa48("420") ? false : stryMutAct_9fa48("419") ? true : (stryCov_9fa48("419", "420", "421"), (stryMutAct_9fa48("423") ? password || password.length < 8 : stryMutAct_9fa48("422") ? true : (stryCov_9fa48("422", "423"), password && (stryMutAct_9fa48("426") ? password.length >= 8 : stryMutAct_9fa48("425") ? password.length <= 8 : stryMutAct_9fa48("424") ? true : (stryCov_9fa48("424", "425", "426"), password.length < 8)))) && /*#__PURE__*/_react["default"].createElement("p", {
      className: "error-message"
    }, "\u041F\u0430\u0440\u043E\u043B\u044C \u043C\u0430\u0454 \u0431\u0443\u0442\u0438 \u0434\u043E\u0432\u0436\u0438\u043D\u043E\u044E \u043C\u0456\u043D\u0456\u043C\u0443\u043C \u0443 8 \u0441\u0438\u043C\u0432\u043E\u043B\u0456\u0432.")), /*#__PURE__*/_react["default"].createElement("input", {
      type: "password",
      placeholder: "\u041F\u0456\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0438 \u043F\u0430\u0440\u043E\u043B\u044C",
      value: confirmPassword,
      onChange: stryMutAct_9fa48("427") ? function () {
        return undefined;
      } : (stryCov_9fa48("427"), function (e) {
        return setConfirmPassword(e.target.value);
      }),
      className: "signup-input"
    }), /*#__PURE__*/_react["default"].createElement("button", {
      className: "auth-button",
      onClick: handleSignUp
    }, "\u0417\u0430\u0440\u0435\u0454\u0441\u0442\u0440\u0443\u0432\u0430\u0442\u0438\u0441\u044C")), stryMutAct_9fa48("430") ? errorMessage || /*#__PURE__*/_react["default"].createElement("p", {
      className: "error-message"
    }, errorMessage) : stryMutAct_9fa48("429") ? false : stryMutAct_9fa48("428") ? true : (stryCov_9fa48("428", "429", "430"), errorMessage && /*#__PURE__*/_react["default"].createElement("p", {
      className: "error-message"
    }, errorMessage)), stryMutAct_9fa48("433") ? successMessage || /*#__PURE__*/_react["default"].createElement("p", {
      className: "success-message"
    }, successMessage) : stryMutAct_9fa48("432") ? false : stryMutAct_9fa48("431") ? true : (stryCov_9fa48("431", "432", "433"), successMessage && /*#__PURE__*/_react["default"].createElement("p", {
      className: "success-message"
    }, successMessage)));
  }
};
var _default = exports["default"] = SignUp;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,