01383292ae2945b6e2887026edbd1ba5
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _utils = _interopRequireDefault(require("../utils.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return _utils["default"].matchAll(/\w+|\[(\w*)]/g, name).map(function (match) {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function arrayToObject(arr) {
  var obj = {};
  var keys = Object.keys(arr);
  var i;
  var len = keys.length;
  var key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    var name = path[index++];
    if (name === '__proto__') return true;
    var isNumericKey = Number.isFinite(+name);
    var isLast = index >= path.length;
    name = !name && _utils["default"].isArray(target) ? target.length : name;
    if (isLast) {
      if (_utils["default"].hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !_utils["default"].isObject(target[name])) {
      target[name] = [];
    }
    var result = buildPath(path, value, target[name], index);
    if (result && _utils["default"].isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (_utils["default"].isFormData(formData) && _utils["default"].isFunction(formData.entries)) {
    var obj = {};
    _utils["default"].forEachEntry(formData, function (name, value) {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var _default = exports["default"] = formDataToJSON;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl91dGlscyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZSIsIl9fZXNNb2R1bGUiLCJwYXJzZVByb3BQYXRoIiwibmFtZSIsInV0aWxzIiwibWF0Y2hBbGwiLCJtYXAiLCJtYXRjaCIsImFycmF5VG9PYmplY3QiLCJhcnIiLCJvYmoiLCJrZXlzIiwiaSIsImxlbiIsImxlbmd0aCIsImtleSIsImZvcm1EYXRhVG9KU09OIiwiZm9ybURhdGEiLCJidWlsZFBhdGgiLCJwYXRoIiwidGFyZ2V0IiwiaW5kZXgiLCJpc051bWVyaWNLZXkiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsImlzTGFzdCIsImlzQXJyYXkiLCJoYXNPd25Qcm9wIiwiaXNPYmplY3QiLCJyZXN1bHQiLCJpc0Zvcm1EYXRhIiwiaXNGdW5jdGlvbiIsImVudHJpZXMiLCJmb3JFYWNoRW50cnkiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbImZvcm1EYXRhVG9KU09OLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZyBsaWtlIGBmb29beF1beV1bel1gIGFuZCByZXR1cm5zIGFuIGFycmF5IGxpa2UgYFsnZm9vJywgJ3gnLCAneScsICd6J11cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKlxuICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQcm9wUGF0aChuYW1lKSB7XG4gIC8vIGZvb1t4XVt5XVt6XVxuICAvLyBmb28ueC55LnpcbiAgLy8gZm9vLXgteS16XG4gIC8vIGZvbyB4IHkgelxuICByZXR1cm4gdXRpbHMubWF0Y2hBbGwoL1xcdyt8XFxbKFxcdyopXS9nLCBuYW1lKS5tYXAobWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNvbnZlcnQgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcyBhcyB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3QoYXJyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgbGV0IGk7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9ialtrZXldID0gYXJyW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIEZvcm1EYXRhIG9iamVjdCBhbmQgcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gY29udmVydCB0byBKU09OLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+IHwgbnVsbH0gVGhlIGNvbnZlcnRlZCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGxldCBuYW1lID0gcGF0aFtpbmRleCsrXTtcblxuICAgIGlmIChuYW1lID09PSAnX19wcm90b19fJykgcmV0dXJuIHRydWU7XG5cbiAgICBjb25zdCBpc051bWVyaWNLZXkgPSBOdW1iZXIuaXNGaW5pdGUoK25hbWUpO1xuICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID49IHBhdGgubGVuZ3RoO1xuICAgIG5hbWUgPSAhbmFtZSAmJiB1dGlscy5pc0FycmF5KHRhcmdldCkgPyB0YXJnZXQubGVuZ3RoIDogbmFtZTtcblxuICAgIGlmIChpc0xhc3QpIHtcbiAgICAgIGlmICh1dGlscy5oYXNPd25Qcm9wKHRhcmdldCwgbmFtZSkpIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gW3RhcmdldFtuYW1lXSwgdmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0W25hbWVdIHx8ICF1dGlscy5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldFtuYW1lXSwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiB1dGlscy5pc0FycmF5KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IGFycmF5VG9PYmplY3QodGFyZ2V0W25hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc0Zvcm1EYXRhKGZvcm1EYXRhKSAmJiB1dGlscy5pc0Z1bmN0aW9uKGZvcm1EYXRhLmVudHJpZXMpKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoRW50cnkoZm9ybURhdGEsIChuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgYnVpbGRQYXRoKHBhcnNlUHJvcFBhdGgobmFtZSksIHZhbHVlLCBvYmosIDApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtRGF0YVRvSlNPTjtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFBQ0EsTUFBQSxDQUFBQyxjQUFBLENBQUFDLE9BQUE7RUFBQUMsS0FBQTtBQUFBO0FBQUFELE9BQUE7QUFFYixJQUFBRSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBZ0MsU0FBQUQsdUJBQUFFLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxnQkFBQUEsQ0FBQTtBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNFLGFBQWFBLENBQUNDLElBQUksRUFBRTtFQUMzQjtFQUNBO0VBQ0E7RUFDQTtFQUNBLE9BQU9DLGlCQUFLLENBQUNDLFFBQVEsQ0FBQyxlQUFlLEVBQUVGLElBQUksQ0FBQyxDQUFDRyxHQUFHLENBQUMsVUFBQUMsS0FBSyxFQUFJO0lBQ3hELE9BQU9BLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsRUFBRSxHQUFHQSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUlBLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDdEQsQ0FBQyxDQUFDO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxhQUFhQSxDQUFDQyxHQUFHLEVBQUU7RUFDMUIsSUFBTUMsR0FBRyxHQUFHLENBQUMsQ0FBQztFQUNkLElBQU1DLElBQUksR0FBR2xCLE1BQU0sQ0FBQ2tCLElBQUksQ0FBQ0YsR0FBRyxDQUFDO0VBQzdCLElBQUlHLENBQUM7RUFDTCxJQUFNQyxHQUFHLEdBQUdGLElBQUksQ0FBQ0csTUFBTTtFQUN2QixJQUFJQyxHQUFHO0VBQ1AsS0FBS0gsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHQyxHQUFHLEVBQUVELENBQUMsRUFBRSxFQUFFO0lBQ3hCRyxHQUFHLEdBQUdKLElBQUksQ0FB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