1a9f9f77480acabcfc5c2baccd46ba1a
"use strict";

exports.__esModule = true;
exports["default"] = arrayFrom;
/**
 * @source {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Polyfill}
 * but without thisArg (too hard to type, no need to `this`)
 */
var toStr = Object.prototype.toString;
function isCallable(fn) {
  return typeof fn === "function" || toStr.call(fn) === "[object Function]";
}
function toInteger(value) {
  var number = Number(value);
  if (isNaN(number)) {
    return 0;
  }
  if (number === 0 || !isFinite(number)) {
    return number;
  }
  return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
}
var maxSafeInteger = Math.pow(2, 53) - 1;
function toLength(value) {
  var len = toInteger(value);
  return Math.min(Math.max(len, 0), maxSafeInteger);
}
/**
 * Creates an array from an iterable object.
 * @param iterable An iterable object to convert to an array.
 */

/**
 * Creates an array from an iterable object.
 * @param iterable An iterable object to convert to an array.
 * @param mapfn A mapping function to call on every element of the array.
 * @param thisArg Value of 'this' used to invoke the mapfn.
 */
function arrayFrom(arrayLike, mapFn) {
  // 1. Let C be the this value.
  // edit(@eps1lon): we're not calling it as Array.from
  var C = Array;

  // 2. Let items be ToObject(arrayLike).
  var items = Object(arrayLike);

  // 3. ReturnIfAbrupt(items).
  if (arrayLike == null) {
    throw new TypeError("Array.from requires an array-like object - not null or undefined");
  }

  // 4. If mapfn is undefined, then let mapping be false.
  // const mapFn = arguments.length > 1 ? arguments[1] : void undefined;

  if (typeof mapFn !== "undefined") {
    // 5. else
    // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
    if (!isCallable(mapFn)) {
      throw new TypeError("Array.from: when provided, the second argument must be a function");
    }
  }

  // 10. Let lenValue be Get(items, "length").
  // 11. Let len be ToLength(lenValue).
  var len = toLength(items.length);

  // 13. If IsConstructor(C) is true, then
  // 13. a. Let A be the result of calling the [[Construct]] internal method
  // of C with an argument list containing the single item len.
  // 14. a. Else, Let A be ArrayCreate(len).
  var A = isCallable(C) ? Object(new C(len)) : new Array(len);

  // 16. Let k be 0.
  var k = 0;
  // 17. Repeat, while k < lenâ€¦ (also steps a - h)
  var kValue;
  while (k < len) {
    kValue = items[k];
    if (mapFn) {
      A[k] = mapFn(kValue, k);
    } else {
      A[k] = kValue;
    }
    k += 1;
  }
  // 18. Let putStatus be Put(A, "length", len, true).
  A.length = len;
  // 20. Return A.
  return A;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0b1N0ciIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiaXNDYWxsYWJsZSIsImZuIiwiY2FsbCIsInRvSW50ZWdlciIsInZhbHVlIiwibnVtYmVyIiwiTnVtYmVyIiwiaXNOYU4iLCJpc0Zpbml0ZSIsIk1hdGgiLCJmbG9vciIsImFicyIsIm1heFNhZmVJbnRlZ2VyIiwicG93IiwidG9MZW5ndGgiLCJsZW4iLCJtaW4iLCJtYXgiLCJhcnJheUZyb20iLCJhcnJheUxpa2UiLCJtYXBGbiIsIkMiLCJBcnJheSIsIml0ZW1zIiwiVHlwZUVycm9yIiwibGVuZ3RoIiwiQSIsImsiLCJrVmFsdWUiXSwic291cmNlcyI6WyIuLi8uLi9zb3VyY2VzL3BvbHlmaWxscy9hcnJheS5mcm9tLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHNvdXJjZSB7aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZnJvbSNQb2x5ZmlsbH1cbiAqIGJ1dCB3aXRob3V0IHRoaXNBcmcgKHRvbyBoYXJkIHRvIHR5cGUsIG5vIG5lZWQgdG8gYHRoaXNgKVxuICovXG5jb25zdCB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5mdW5jdGlvbiBpc0NhbGxhYmxlKGZuOiB1bmtub3duKTogYm9vbGVhbiB7XG5cdHJldHVybiB0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIiB8fCB0b1N0ci5jYWxsKGZuKSA9PT0gXCJbb2JqZWN0IEZ1bmN0aW9uXVwiO1xufVxuZnVuY3Rpb24gdG9JbnRlZ2VyKHZhbHVlOiB1bmtub3duKTogbnVtYmVyIHtcblx0Y29uc3QgbnVtYmVyID0gTnVtYmVyKHZhbHVlKTtcblx0aWYgKGlzTmFOKG51bWJlcikpIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXHRpZiAobnVtYmVyID09PSAwIHx8ICFpc0Zpbml0ZShudW1iZXIpKSB7XG5cdFx0cmV0dXJuIG51bWJlcjtcblx0fVxuXHRyZXR1cm4gKG51bWJlciA+IDAgPyAxIDogLTEpICogTWF0aC5mbG9vcihNYXRoLmFicyhudW1iZXIpKTtcbn1cbmNvbnN0IG1heFNhZmVJbnRlZ2VyID0gTWF0aC5wb3coMiwgNTMpIC0gMTtcbmZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlOiB1bmtub3duKTogbnVtYmVyIHtcblx0Y29uc3QgbGVuID0gdG9JbnRlZ2VyKHZhbHVlKTtcblx0cmV0dXJuIE1hdGgubWluKE1hdGgubWF4KGxlbiwgMCksIG1heFNhZmVJbnRlZ2VyKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBmcm9tIGFuIGl0ZXJhYmxlIG9iamVjdC5cbiAqIEBwYXJhbSBpdGVyYWJsZSBBbiBpdGVyYWJsZSBvYmplY3QgdG8gY29udmVydCB0byBhbiBhcnJheS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXJyYXlGcm9tPFQ+KGl0ZXJhYmxlOiBJdGVyYWJsZTxUPiB8IEFycmF5TGlrZTxUPik6IFRbXTtcbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBmcm9tIGFuIGl0ZXJhYmxlIG9iamVjdC5cbiAqIEBwYXJhbSBpdGVyYWJsZSBBbiBpdGVyYWJsZSBvYmplY3QgdG8gY29udmVydCB0byBhbiBhcnJheS5cbiAqIEBwYXJhbSBtYXBmbiBBIG1hcHBpbmcgZnVuY3Rpb24gdG8gY2FsbCBvbiBldmVyeSBlbGVtZW50IG9mIHRoZSBhcnJheS5cbiAqIEBwYXJhbSB0aGlzQXJnIFZhbHVlIG9mICd0aGlzJyB1c2VkIHRvIGludm9rZSB0aGUgbWFwZm4uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFycmF5RnJvbTxULCBVPihcblx0YXJyYXlMaWtlOiBJdGVyYWJsZTxUPiB8IEFycmF5TGlrZTxUPixcblx0bWFwRm4/OiAodjogVCwgazogbnVtYmVyKSA9PiBVXG4pOiBVW10ge1xuXHQvLyAxLiBMZXQgQyBiZSB0aGUgdGhpcyB2YWx1ZS5cblx0Ly8gZWRpdChAZXBzMWxvbik6IHdlJ3JlIG5vdCBjYWxsaW5nIGl0IGFzIEFycmF5LmZyb21cblx0Y29uc3QgQyA9IEFycmF5O1xuXG5cdC8vIDIuIExldCBpdGVtcyBiZSBUb09iamVjdChhcnJheUxpa2UpLlxuXHRjb25zdCBpdGVtcyA9IE9iamVjdChhcnJheUxpa2UpO1xuXG5cdC8vIDMuIFJldHVybklmQWJydXB0KGl0ZW1zKS5cblx0aWYgKGFycmF5TGlrZSA9PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihcblx0XHRcdFwiQXJyYXkuZnJvbSByZXF1aXJlcyBhbiBhcnJheS1saWtlIG9iamVjdCAtIG5vdCBudWxsIG9yIHVuZGVmaW5lZFwiXG5cdFx0KTtcblx0fVxuXG5cdC8vIDQuIElmIG1hcGZuIGlzIHVuZGVmaW5lZCwgdGhlbiBsZXQgbWFwcGluZyBiZSBmYWxzZS5cblx0Ly8gY29uc3QgbWFwRm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHZvaWQgdW5kZWZpbmVkO1xuXG5cdGlmICh0eXBlb2YgbWFwRm4gIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHQvLyA1LiBlbHNlXG5cdFx0Ly8gNS4gYSBJZiBJc0NhbGxhYmxlKG1hcGZuKSBpcyBmYWxzZSwgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uLlxuXHRcdGlmICghaXNDYWxsYWJsZShtYXBGbikpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXG5cdFx0XHRcdFwiQXJyYXkuZnJvbTogd2hlbiBwcm92aWRlZCwgdGhlIHNlY29uZCBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb25cIlxuXHRcdFx0KTtcblx0XHR9XG5cdH1cblxuXHQvLyAxMC4gTGV0IGxlblZhbHVlIGJlIEdldChpdGVtcywgXCJsZW5ndGhcIikuXG5cdC8vIDExLiBMZXQgbGVuIGJlIFRvTGVuZ3RoKGxlblZhbHVlKS5cblx0Y29uc3QgbGVuID0gdG9MZW5ndGgoaXRlbXMubGVuZ3RoKTtcblxuXHQvLyAxMy4gSWYgSXNDb25zdHJ1Y3RvcihDKSBpcyB0cnVlLCB0aGVuXG5cdC8vIDEzLiBhLiBMZXQgQSBiZSB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIFtbQ29uc3RydWN0XV0gaW50ZXJuYWwgbWV0aG9kXG5cdC8vIG9mIEMgd2l0aCBhbiBhcmd1bWVudCBsaXN0IGNvbnRhaW5pbmcgdGhlIHNpbmdsZSBpdGVtIGxlbi5cblx0Ly8gMTQuIGEuIEVsc2UsIExldCBBIGJlIEFycmF5Q3JlYXRlKGxlbikuXG5cdGNvbnN0IEEgPSBpc0NhbGxhYmxlKEMpID8gT2JqZWN0KG5ldyBDKGxlbikpIDogbmV3IEFycmF5KGxlbik7XG5cblx0Ly8gMTYuIExldCBrIGJlIDAuXG5cdGxldCBrID0gMDtcblx0Ly8gMTcuIFJlcGVhdCwgd2hpbGUgayA8IGxlbuKApiAoYWxzbyBzdGVwcyBhIC0gaClcblx0bGV0IGtWYWx1ZTtcblx0d2hpbGUgKGsgPCBsZW4pIHtcblx0XHRrVmFsdWUgPSBpdGVtc1trXTtcblx0XHRpZiAobWFwRm4pIHtcblx0XHRcdEFba10gPSBtYXBGbihrVmFsdWUsIGspO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBW2tdID0ga1ZhbHVlO1xuXHRcdH1cblx0XHRrICs9IDE7XG5cdH1cblx0Ly8gMTguIExldCBwdXRTdGF0dXMgYmUgUHV0KEEsIFwibGVuZ3RoXCIsIGxlbiwgdHJ1ZSkuXG5cdEEubGVuZ3RoID0gbGVuO1xuXHQvLyAyMC4gUmV0dXJuIEEuXG5cdHJldHVybiBBO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxLQUFLLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDQyxRQUFRO0FBQ3ZDLFNBQVNDLFVBQVVBLENBQUNDLEVBQVcsRUFBVztFQUN6QyxPQUFPLE9BQU9BLEVBQUUsS0FBSyxVQUFVLElBQUlMLEtBQUssQ0FBQ00sSUFBSSxDQUFDRCxFQUFFLENBQUMsS0FBSyxtQkFBbUI7QUFDMUU7QUFDQSxTQUFTRSxTQUFTQSxDQUFDQyxL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