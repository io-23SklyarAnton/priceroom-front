ce020be817065f2e64050865cee817b3
"use strict";

var _excluded = ["value", "files"],
  _excluded2 = ["bubbles", "cancelable", "detail"];
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEvent = createEvent;
exports.fireEvent = fireEvent;
var _config = require("./config");
var _helpers = require("./helpers");
var _eventMap = require("./event-map");
function fireEvent(element, event) {
  return (0, _config.getConfig)().eventWrapper(function () {
    if (!event) {
      throw new Error("Unable to fire an event - please provide an event object.");
    }
    if (!element) {
      throw new Error("Unable to fire a \"".concat(event.type, "\" event - please provide a DOM element."));
    }
    return element.dispatchEvent(event);
  });
}
function createEvent(eventName, node, init) {
  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
    _ref$EventType = _ref.EventType,
    EventType = _ref$EventType === void 0 ? 'Event' : _ref$EventType,
    _ref$defaultInit = _ref.defaultInit,
    defaultInit = _ref$defaultInit === void 0 ? {} : _ref$defaultInit;
  if (!node) {
    throw new Error("Unable to fire a \"".concat(eventName, "\" event - please provide a DOM element."));
  }
  var eventInit = _objectSpread(_objectSpread({}, defaultInit), init);
  var _eventInit$target = eventInit.target,
    _eventInit$target2 = _eventInit$target === void 0 ? {} : _eventInit$target,
    value = _eventInit$target2.value,
    files = _eventInit$target2.files,
    targetProperties = _objectWithoutProperties(_eventInit$target2, _excluded);
  if (value !== undefined) {
    setNativeValue(node, value);
  }
  if (files !== undefined) {
    // input.files is a read-only property so this is not allowed:
    // input.files = [file]
    // so we have to use this workaround to set the property
    Object.defineProperty(node, 'files', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: files
    });
  }
  Object.assign(node, targetProperties);
  var window = (0, _helpers.getWindowFromNode)(node);
  var EventConstructor = window[EventType] || window.Event;
  var event;
  /* istanbul ignore else  */
  if (typeof EventConstructor === 'function') {
    event = new EventConstructor(eventName, eventInit);
  } else {
    // IE11 polyfill from https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill
    event = window.document.createEvent(EventType);
    var bubbles = eventInit.bubbles,
      cancelable = eventInit.cancelable,
      detail = eventInit.detail,
      otherInit = _objectWithoutProperties(eventInit, _excluded2);
    event.initEvent(eventName, bubbles, cancelable, detail);
    Object.keys(otherInit).forEach(function (eventKey) {
      event[eventKey] = otherInit[eventKey];
    });
  }

  // DataTransfer is not supported in jsdom: https://github.com/jsdom/jsdom/issues/1568
  var dataTransferProperties = ['dataTransfer', 'clipboardData'];
  dataTransferProperties.forEach(function (dataTransferKey) {
    var dataTransferValue = eventInit[dataTransferKey];
    if (_typeof(dataTransferValue) === 'object') {
      /* istanbul ignore if  */
      if (typeof window.DataTransfer === 'function') {
        Object.defineProperty(event, dataTransferKey, {
          value: Object.getOwnPropertyNames(dataTransferValue).reduce(function (acc, propName) {
            Object.defineProperty(acc, propName, {
              value: dataTransferValue[propName]
            });
            return acc;
          }, new window.DataTransfer())
        });
      } else {
        Object.defineProperty(event, dataTransferKey, {
          value: dataTransferValue
        });
      }
    }
  });
  return event;
}
Object.keys(_eventMap.eventMap).forEach(function (key) {
  var _eventMap$eventMap$ke = _eventMap.eventMap[key],
    EventType = _eventMap$eventMap$ke.EventType,
    defaultInit = _eventMap$eventMap$ke.defaultInit;
  var eventName = key.toLowerCase();
  createEvent[key] = function (node, init) {
    return createEvent(eventName, node, init, {
      EventType: EventType,
      defaultInit: defaultInit
    });
  };
  fireEvent[key] = function (node, init) {
    return fireEvent(node, createEvent[key](node, init));
  };
});

// function written after some investigation here:
// https://github.com/facebook/react/issues/10135#issuecomment-401496776
function setNativeValue(element, value) {
  var _ref2 = Object.getOwnPropertyDescriptor(element, 'value') || {},
    valueSetter = _ref2.set;
  var prototype = Object.getPrototypeOf(element);
  var _ref3 = Object.getOwnPropertyDescriptor(prototype, 'value') || {},
    prototypeValueSetter = _ref3.set;
  if (prototypeValueSetter && valueSetter !== prototypeValueSetter) {
    prototypeValueSetter.call(element, value);
  } else {
    /* istanbul ignore if */
    // eslint-disable-next-line no-lonely-if -- Can't be ignored by istanbul otherwise
    if (valueSetter) {
      valueSetter.call(element, value);
    } else {
      throw new Error('The given element does not have a value setter');
    }
  }
}
Object.keys(_eventMap.eventAliasMap).forEach(function (aliasKey) {
  var key = _eventMap.eventAliasMap[aliasKey];
  fireEvent[aliasKey] = function () {
    return fireEvent[key].apply(fireEvent, arguments);
  };
});

/* eslint complexity:["error", 9] */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,