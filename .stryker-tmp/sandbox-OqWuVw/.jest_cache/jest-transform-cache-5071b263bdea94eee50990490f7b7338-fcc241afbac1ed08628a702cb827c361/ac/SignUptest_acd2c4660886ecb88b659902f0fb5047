dc3d230f0095d8ea50375cf4f3a5dc37
"use strict";

_getJestObj().mock("axios");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _SignUp = _interopRequireDefault(require("./SignUp"));
var _axios = _interopRequireDefault(require("axios"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe("SignUp Component", function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  test("should display error if passwords don't match", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          (0, _react2.render)(/*#__PURE__*/_react["default"].createElement(_SignUp["default"], null));
          _react2.fireEvent.change(_react2.screen.getByPlaceholderText("Юзернейм"), {
            target: {
              value: "testuser"
            }
          });
          _react2.fireEvent.change(_react2.screen.getByPlaceholderText("Пароль"), {
            target: {
              value: "password123"
            }
          });
          _react2.fireEvent.change(_react2.screen.getByPlaceholderText("Підтвердити пароль"), {
            target: {
              value: "password321"
            }
          });
          _react2.fireEvent.click(_react2.screen.getByText("Зареєструватись"));
          _context.next = 7;
          return (0, _react2.waitFor)(function () {
            expect(_react2.screen.getByText("Паролі не є однаковими.")).toBeInTheDocument();
          });
        case 7:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
  test("should display error if password is too short", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          (0, _react2.render)(/*#__PURE__*/_react["default"].createElement(_SignUp["default"], null));
          _react2.fireEvent.change(_react2.screen.getByPlaceholderText("Юзернейм"), {
            target: {
              value: "testuser"
            }
          });
          _react2.fireEvent.change(_react2.screen.getByPlaceholderText("Пароль"), {
            target: {
              value: "short"
            }
          });
          _react2.fireEvent.change(_react2.screen.getByPlaceholderText("Підтвердити пароль"), {
            target: {
              value: "short"
            }
          });
          _react2.fireEvent.click(_react2.screen.getByText("Зареєструватись"));
          _context2.next = 7;
          return (0, _react2.waitFor)(function () {
            expect(_react2.screen.getByText("Пароль має бути довжиною мінімум у 8 символів.")).toBeInTheDocument();
          });
        case 7:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  })));
  test("should call API and display success message on successful sign-up", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _axios["default"].post.mockResolvedValue({
            data: {
              success: true
            }
          });
          (0, _react2.render)(/*#__PURE__*/_react["default"].createElement(_SignUp["default"], null));
          _react2.fireEvent.change(_react2.screen.getByPlaceholderText("Юзернейм"), {
            target: {
              value: "testuser"
            }
          });
          _react2.fireEvent.change(_react2.screen.getByPlaceholderText("Пароль"), {
            target: {
              value: "password123"
            }
          });
          _react2.fireEvent.change(_react2.screen.getByPlaceholderText("Підтвердити пароль"), {
            target: {
              value: "password123"
            }
          });
          _react2.fireEvent.click(_react2.screen.getByText("Зареєструватись"));
          _context3.next = 8;
          return (0, _react2.waitFor)(function () {
            expect(_react2.screen.getByText("Користувача було створено!")).toBeInTheDocument();
          });
        case 8:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  })));
  test("should display error message if API request fails", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _axios["default"].post.mockRejectedValue({
            response: {
              data: {
                message: "Error occurred"
              }
            }
          });
          (0, _react2.render)(/*#__PURE__*/_react["default"].createElement(_SignUp["default"], null));
          _react2.fireEvent.change(_react2.screen.getByPlaceholderText("Юзернейм"), {
            target: {
              value: "testuser"
            }
          });
          _react2.fireEvent.change(_react2.screen.getByPlaceholderText("Пароль"), {
            target: {
              value: "password123"
            }
          });
          _react2.fireEvent.change(_react2.screen.getByPlaceholderText("Підтвердити пароль"), {
            target: {
              value: "password123"
            }
          });
          _react2.fireEvent.click(_react2.screen.getByText("Зареєструватись"));
          _context4.next = 8;
          return (0, _react2.waitFor)(function () {
            expect(_react2.screen.getByText("Error occurred")).toBeInTheDocument();
          });
        case 8:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  })));
  test("should redirect to homepage if token is present", function () {
    localStorage.setItem("token", "mock-token");
    var _render = (0, _react2.render)(/*#__PURE__*/_react["default"].createElement(_SignUp["default"], null)),
      container = _render.container;
    expect(container).toBeEmptyDOMElement();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfU2lnblVwIiwiX2F4aW9zIiwiZSIsIl9fZXNNb2R1bGUiLCJfcmVnZW5lcmF0b3JSdW50aW1lIiwidCIsInIiLCJPYmplY3QiLCJuIiwiaGFzT3duUHJvcGVydHkiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiaSIsImEiLCJjIiwiYXN5bmNJdGVyYXRvciIsInUiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIndyYXAiLCJHZW5lcmF0b3IiLCJjcmVhdGUiLCJDb250ZXh0IiwibWFrZUludm9rZU1ldGhvZCIsInRyeUNhdGNoIiwidHlwZSIsImFyZyIsImNhbGwiLCJoIiwibCIsImYiLCJzIiwieSIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJwIiwiZCIsImdldFByb3RvdHlwZU9mIiwidiIsInZhbHVlcyIsImciLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiX2ludm9rZSIsIkFzeW5jSXRlcmF0b3IiLCJpbnZva2UiLCJyZXNvbHZlIiwiX19hd2FpdCIsInRoZW4iLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIkVycm9yIiwiZG9uZSIsIm1ldGhvZCIsImRlbGVnYXRlIiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwiVHlwZUVycm9yIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpc05hTiIsImxlbmd0aCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsIm5hbWUiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsImtleXMiLCJyZXZlcnNlIiwicG9wIiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJ2YWwiLCJoYW5kbGUiLCJjb21wbGV0ZSIsImZpbmlzaCIsIl9jYXRjaCIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJfYXN5bmNUb0dlbmVyYXRvciIsImFyZ3VtZW50cyIsImFwcGx5IiwiX25leHQiLCJfdGhyb3ciLCJfcmVxdWlyZSIsImplc3QiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwidGVzdCIsIl9jYWxsZWUiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsImZpcmVFdmVudCIsImNoYW5nZSIsInNjcmVlbiIsImdldEJ5UGxhY2Vob2xkZXJUZXh0IiwidGFyZ2V0IiwiY2xpY2siLCJnZXRCeVRleHQiLCJ3YWl0Rm9yIiwiZXhwZWN0IiwidG9CZUluVGhlRG9jdW1lbnQiLCJfY2FsbGVlMiIsIl9jYWxsZWUyJCIsIl9jb250ZXh0MiIsIl9jYWxsZWUzIiwiX2NhbGxlZTMkIiwiX2NvbnRleHQzIiwiYXhpb3MiLCJwb3N0IiwibW9ja1Jlc29sdmVkVmFsdWUiLCJkYXRhIiwic3VjY2VzcyIsIl9jYWxsZWU0IiwiX2NhbGxlZTQkIiwiX2NvbnRleHQ0IiwibW9ja1JlamVjdGVkVmFsdWUiLCJyZXNwb25zZSIsIm1lc3NhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiX3JlbmRlciIsImNvbnRhaW5lciIsInRvQmVFbXB0eURPTUVsZW1lbnQiXSwic291cmNlcyI6WyJTaWduVXAudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xyXG5pbXBvcnQgU2lnblVwIGZyb20gXCIuL1NpZ25VcFwiO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcblxyXG5qZXN0Lm1vY2soXCJheGlvc1wiKTtcclxuXHJcbmRlc2NyaWJlKFwiU2lnblVwIENvbXBvbmVudFwiLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTsgXHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoXCJzaG91bGQgZGlzcGxheSBlcnJvciBpZiBwYXNzd29yZHMgZG9uJ3QgbWF0Y2hcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgcmVuZGVyKDxTaWduVXAgLz4pO1xyXG5cclxuICAgIGZpcmVFdmVudC5jaGFuZ2Uoc2NyZWVuLmdldEJ5UGxhY2Vob2xkZXJUZXh0KFwi0K7Qt9C10YDQvdC10LnQvFwiKSwge1xyXG4gICAgICB0YXJnZXQ6IHsgdmFsdWU6IFwidGVzdHVzZXJcIiB9LFxyXG4gICAgfSk7XHJcbiAgICBmaXJlRXZlbnQuY2hhbmdlKHNjcmVlbi5nZXRCeVBsYWNlaG9sZGVyVGV4dChcItCf0LDRgNC+0LvRjFwiKSwge1xyXG4gICAgICB0YXJnZXQ6IHsgdmFsdWU6IFwicGFzc3dvcmQxMjNcIiB9LFxyXG4gICAgfSk7XHJcbiAgICBmaXJlRXZlbnQuY2hhbmdlKHNjcmVlbi5nZXRCeVBsYWNlaG9sZGVyVGV4dChcItCf0ZbQtNGC0LLQtdGA0LTQuNGC0Lgg0L/QsNGA0L7Qu9GMXCIpLCB7XHJcbiAgICAgIHRhcmdldDogeyB2YWx1ZTogXCJwYXNzd29yZDMyMVwiIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBmaXJlRXZlbnQuY2xpY2soc2NyZWVuLmdldEJ5VGV4dChcItCX0LDRgNC10ZTRgdGC0YDRg9Cy0LDRgtC40YHRjFwiKSk7XHJcblxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KFwi0J/QsNGA0L7Qu9GWINC90LUg0ZQg0L7QtNC90LDQutC+0LLQuNC80LguXCIpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoXCJzaG91bGQgZGlzcGxheSBlcnJvciBpZiBwYXNzd29yZCBpcyB0b28gc2hvcnRcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgcmVuZGVyKDxTaWduVXAgLz4pO1xyXG5cclxuICAgIGZpcmVFdmVudC5jaGFuZ2Uoc2NyZWVuLmdldEJ5UGxhY2Vob2xkZXJUZXh0KFwi0K7Qt9C10YDQvdC10LnQvFwiKSwge1xyXG4gICAgICB0YXJnZXQ6IHsgdmFsdWU6IFwidGVzdHVzZXJcIiB9LFxyXG4gICAgfSk7XHJcbiAgICBmaXJlRXZlbnQuY2hhbmdlKHNjcmVlbi5nZXRCeVBsYWNlaG9sZGVyVGV4dChcItCf0LDRgNC+0LvRjFwiKSwge1xyXG4gICAgICB0YXJnZXQ6IHsgdmFsdWU6IFwic2hvcnRcIiB9LFxyXG4gICAgfSk7XHJcbiAgICBmaXJlRXZlbnQuY2hhbmdlKHNjcmVlbi5nZXRCeVBsYWNlaG9sZGVyVGV4dChcItCf0ZbQtNGC0LLQtdGA0LTQuNGC0Lgg0L/QsNGA0L7Qu9GMXCIpLCB7XHJcbiAgICAgIHRhcmdldDogeyB2YWx1ZTogXCJzaG9ydFwiIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBmaXJlRXZlbnQuY2xpY2soc2NyZWVuLmdldEJ5VGV4dChcItCX0LDRgNC10ZTRgdGC0YDRg9Cy0LDRgtC40YHRjFwiKSk7XHJcblxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KFwi0J/QsNGA0L7Qu9GMINC80LDRlCDQsdGD0YLQuCDQtNC+0LLQttC40L3QvtGOINC80ZbQvdGW0LzRg9C8INGDIDgg0YHQuNC80LLQvtC70ZbQsi5cIikpLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgdGVzdChcInNob3VsZCBjYWxsIEFQSSBhbmQgZGlzcGxheSBzdWNjZXNzIG1lc3NhZ2Ugb24gc3VjY2Vzc2Z1bCBzaWduLXVwXCIsIGFzeW5jICgpID0+IHtcclxuICAgIGF4aW9zLnBvc3QubW9ja1Jlc29sdmVkVmFsdWUoeyBkYXRhOiB7IHN1Y2Nlc3M6IHRydWUgfSB9KTtcclxuXHJcbiAgICByZW5kZXIoPFNpZ25VcCAvPik7XHJcblxyXG4gICAgZmlyZUV2ZW50LmNoYW5nZShzY3JlZW4uZ2V0QnlQbGFjZWhvbGRlclRleHQoXCLQrtC30LXRgNC90LXQudC8XCIpLCB7XHJcbiAgICAgIHRhcmdldDogeyB2YWx1ZTogXCJ0ZXN0dXNlclwiIH0sXHJcbiAgICB9KTtcclxuICAgIGZpcmVFdmVudC5jaGFuZ2Uoc2NyZWVuLmdldEJ5UGxhY2Vob2xkZXJUZXh0KFwi0J/QsNGA0L7Qu9GMXCIpLCB7XHJcbiAgICAgIHRhcmdldDogeyB2YWx1ZTogXCJwYXNzd29yZDEyM1wiIH0sXHJcbiAgICB9KTtcclxuICAgIGZpcmVFdmVudC5jaGFuZ2Uoc2NyZWVuLmdldEJ5UGxhY2Vob2xkZXJUZXh0KFwi0J/RltC00YLQstC10YDQtNC40YLQuCDQv9Cw0YDQvtC70YxcIiksIHtcclxuICAgICAgdGFyZ2V0OiB7IHZhbHVlOiBcInBhc3N3b3JkMTIzXCIgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIGZpcmVFdmVudC5jbGljayhzY3JlZW4uZ2V0QnlUZXh0KFwi0JfQsNGA0LXRlNGB0YLRgNGD0LLQsNGC0LjRgdGMXCIpKTtcclxuXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoXCLQmtC+0YDQuNGB0YLRg9Cy0LDRh9CwINCx0YPQu9C+INGB0YLQstC+0YDQtdC90L4hXCIpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoXCJzaG91bGQgZGlzcGxheSBlcnJvciBtZXNzYWdlIGlmIEFQSSByZXF1ZXN0IGZhaWxzXCIsIGFzeW5jICgpID0+IHtcclxuICAgIGF4aW9zLnBvc3QubW9ja1JlamVjdGVkVmFsdWUoe1xyXG4gICAgICByZXNwb25zZTogeyBkYXRhOiB7IG1lc3NhZ2U6IFwiRXJyb3Igb2NjdXJyZWRcIiB9IH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICByZW5kZXIoPFNpZ25VcCAvPik7XHJcblxyXG4gICAgZmlyZUV2ZW50LmNoYW5nZShzY3JlZW4uZ2V0QnlQbGFjZWhvbGRlclRleHQoXCLQrtC30LXRgNC90LXQudC8XCIpLCB7XHJcbiAgICAgIHRhcmdldDogeyB2YWx1ZTogXCJ0ZXN0dXNlclwiIH0sXHJcbiAgICB9KTtcclxuICAgIGZpcmVFdmVudC5jaGFuZ2Uoc2NyZWVuLmdldEJ5UGxhY2Vob2xkZXJUZXh0KFwi0J/QsNGA0L7Qu9GMXCIpLCB7XHJcbiAgICAgIHRhcmdldDogeyB2YWx1ZTogXCJwYXNzd29yZDEyM1wiIH0sXHJcbiAgICB9KTtcclxuICAgIGZpcmVFdmVudC5jaGFuZ2Uoc2NyZWVuLmdldEJ5UGxhY2Vob2xkZXJUZXh0KFwi0J/RltC00YLQstC10YDQtNC40YLQuCDQv9Cw0YDQvtC70YxcIiksIHtcclxuICAgICAgdGFyZ2V0OiB7IHZhbHVlOiBcInBhc3N3b3JkMTIzXCIgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIGZpcmVFdmVudC5jbGljayhzY3JlZW4uZ2V0QnlUZXh0KFwi0JfQsNGA0LXRlNGB0YLRgNGD0LLQsNGC0LjRgdGMXCIpKTtcclxuXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoXCJFcnJvciBvY2N1cnJlZFwiKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KFwic2hvdWxkIHJlZGlyZWN0IHRvIGhvbWVwYWdlIGlmIHRva2VuIGlzIHByZXNlbnRcIiwgKCkgPT4ge1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0b2tlblwiLCBcIm1vY2stdG9rZW5cIik7XHJcbiAgICBjb25zdCB7IGNvbnRhaW5lciB9ID0gcmVuZGVyKDxTaWduVXAgLz4pO1xyXG4gICAgZXhwZWN0KGNvbnRhaW5lcikudG9CZUVtcHR5RE9NRWxlbWVudCgpOyBcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFLQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQUMsU0FBQUMsUUFBQUMsQ0FBQSxzQ0FBQUQsT0FBQSx3QkFBQUUsTUFBQSx1QkFBQUEsTUFBQSxDQUFBQyxRQUFBLGFBQUFGLENBQUEsa0JBQUFBLENBQUEsZ0JBQUFBLENBQUEsV0FBQUEsQ0FBQSx5QkFBQUMsTUFBQSxJQUFBRCxDQUFBLENBQUFHLFdBQUEsS0FBQUYsTUFBQSxJQUFBRCxDQUFBLEtBQUFDLE1BQUEsQ0FBQUcsU0FBQSxxQkFBQUosQ0FBQSxLQUFBRCxPQUFBLENBQUFDLENBQUE7QUFMbkIsSUFBQUssTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsTUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQTBCLFNBQUFELHVCQUFBSyxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsZ0JBQUFBLENBQUE7QUFBQSxTQUFBRSxvQkFBQSxrQkFGMUIscUpBQUFBLG1CQUFBLFlBQUFBLG9CQUFBLFdBQUFGLENBQUEsU0FBQUcsQ0FBQSxFQUFBSCxDQUFBLE9BQUFJLENBQUEsR0FBQUMsTUFBQSxDQUFBWixTQUFBLEVBQUFhLENBQUEsR0FBQUYsQ0FBQSxDQUFBRyxjQUFB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