f258be4afcddce86a1cfc5dbbbc85f15
'use strict';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = deepCyclicCopy;

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var EMPTY = new Set();
function deepCyclicCopy(value) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    blacklist: EMPTY,
    keepPrototype: false
  };
  var cycles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new WeakMap();
  if (_typeof(value) !== 'object' || value === null) {
    return value;
  } else if (cycles.has(value)) {
    return cycles.get(value);
  } else if (Array.isArray(value)) {
    return deepCyclicCopyArray(value, options, cycles);
  } else {
    return deepCyclicCopyObject(value, options, cycles);
  }
}
function deepCyclicCopyObject(object, options, cycles) {
  var newObject = options.keepPrototype ? Object.create(Object.getPrototypeOf(object)) : {};
  var descriptors = Object.getOwnPropertyDescriptors(object);
  cycles.set(object, newObject);
  Object.keys(descriptors).forEach(function (key) {
    if (options.blacklist && options.blacklist.has(key)) {
      delete descriptors[key];
      return;
    }
    var descriptor = descriptors[key];
    if (typeof descriptor.value !== 'undefined') {
      descriptor.value = deepCyclicCopy(descriptor.value, {
        blacklist: EMPTY,
        keepPrototype: options.keepPrototype
      }, cycles);
    }
    descriptor.configurable = true;
  });
  return Object.defineProperties(newObject, descriptors);
}
function deepCyclicCopyArray(array, options, cycles) {
  var newArray = options.keepPrototype ? new (Object.getPrototypeOf(array).constructor)(array.length) : [];
  var length = array.length;
  cycles.set(array, newArray);
  for (var i = 0; i < length; i++) {
    newArray[i] = deepCyclicCopy(array[i], {
      blacklist: EMPTY,
      keepPrototype: options.keepPrototype
    }, cycles);
  }
  return newArray;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZXBDeWNsaWNDb3B5IiwiRU1QVFkiLCJTZXQiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiYmxhY2tsaXN0Iiwia2VlcFByb3RvdHlwZSIsImN5Y2xlcyIsIldlYWtNYXAiLCJoYXMiLCJnZXQiLCJBcnJheSIsImlzQXJyYXkiLCJkZWVwQ3ljbGljQ29weUFycmF5IiwiZGVlcEN5Y2xpY0NvcHlPYmplY3QiLCJvYmplY3QiLCJuZXdPYmplY3QiLCJjcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsImRlc2NyaXB0b3JzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsInNldCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsImRlZmluZVByb3BlcnRpZXMiLCJhcnJheSIsIm5ld0FycmF5IiwiaSJdLCJzb3VyY2VzIjpbImRlZXBDeWNsaWNDb3B5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBkZWVwQ3ljbGljQ29weTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuY29uc3QgRU1QVFkgPSBuZXcgU2V0KCk7XG5cbmZ1bmN0aW9uIGRlZXBDeWNsaWNDb3B5KFxuICB2YWx1ZSxcbiAgb3B0aW9ucyA9IHtcbiAgICBibGFja2xpc3Q6IEVNUFRZLFxuICAgIGtlZXBQcm90b3R5cGU6IGZhbHNlXG4gIH0sXG4gIGN5Y2xlcyA9IG5ldyBXZWFrTWFwKClcbikge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSBlbHNlIGlmIChjeWNsZXMuaGFzKHZhbHVlKSkge1xuICAgIHJldHVybiBjeWNsZXMuZ2V0KHZhbHVlKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBkZWVwQ3ljbGljQ29weUFycmF5KHZhbHVlLCBvcHRpb25zLCBjeWNsZXMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBkZWVwQ3ljbGljQ29weU9iamVjdCh2YWx1ZSwgb3B0aW9ucywgY3ljbGVzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWVwQ3ljbGljQ29weU9iamVjdChvYmplY3QsIG9wdGlvbnMsIGN5Y2xlcykge1xuICBjb25zdCBuZXdPYmplY3QgPSBvcHRpb25zLmtlZXBQcm90b3R5cGVcbiAgICA/IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCkpXG4gICAgOiB7fTtcbiAgY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpO1xuICBjeWNsZXMuc2V0KG9iamVjdCwgbmV3T2JqZWN0KTtcbiAgT2JqZWN0LmtleXMoZGVzY3JpcHRvcnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAob3B0aW9ucy5ibGFja2xpc3QgJiYgb3B0aW9ucy5ibGFja2xpc3QuaGFzKGtleSkpIHtcbiAgICAgIGRlbGV0ZSBkZXNjcmlwdG9yc1trZXldO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBkZXNjcmlwdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLnZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IGRlZXBDeWNsaWNDb3B5KFxuICAgICAgICBkZXNjcmlwdG9yLnZhbHVlLFxuICAgICAgICB7XG4gICAgICAgICAgYmxhY2tsaXN0OiBFTVBUWSxcbiAgICAgICAgICBrZWVwUHJvdG90eXBlOiBvcHRpb25zLmtlZXBQcm90b3R5cGVcbiAgICAgICAgfSxcbiAgICAgICAgY3ljbGVzXG4gICAgICApO1xuICAgIH1cblxuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhuZXdPYmplY3QsIGRlc2NyaXB0b3JzKTtcbn1cblxuZnVuY3Rpb24gZGVlcEN5Y2xpY0NvcHlBcnJheShhcnJheSwgb3B0aW9ucywgY3ljbGVzKSB7XG4gIGNvbnN0IG5ld0FycmF5ID0gb3B0aW9ucy5rZWVwUHJvdG90eXBlXG4gICAgPyBuZXcgKE9iamVjdC5nZXRQcm90b3R5cGVPZihhcnJheSkuY29uc3RydWN0b3IpKGFycmF5Lmxlbmd0aClcbiAgICA6IFtdO1xuICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIGN5Y2xlcy5zZXQoYXJyYXksIG5ld0FycmF5KTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgbmV3QXJyYXlbaV0gPSBkZWVwQ3ljbGljQ29weShcbiAgICAgIGFycmF5W2ldLFxuICAgICAge1xuICAgICAgICBibGFja2xpc3Q6IEVNUFRZLFxuICAgICAgICBrZWVwUHJvdG90eXBlOiBvcHRpb25zLmtlZXBQcm90b3R5cGVcbiAgICAgIH0sXG4gICAgICBjeWNsZXNcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIG5ld0FycmF5O1xufVxuIl0sIm1hcHBpbmdz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