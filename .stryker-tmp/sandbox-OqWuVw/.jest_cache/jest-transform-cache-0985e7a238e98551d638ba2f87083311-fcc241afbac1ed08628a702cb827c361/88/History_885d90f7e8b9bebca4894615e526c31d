d4e4c5a5f265a7617fe3959149361e11
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _axios = _interopRequireDefault(require("axios"));
var _useAuth = _interopRequireDefault(require("../../hooks/useAuth"));
require("./History.css");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
// @ts-nocheck
function stryNS_9fa48() {
  var g = (typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === 'object' && globalThis && globalThis.Math === Math && globalThis || new Function("return this")();
  var ns = g.__stryker__ || (g.__stryker__ = {});
  if (ns.activeMutant === undefined && g.process && g.process.env && g.process.env.__STRYKER_ACTIVE_MUTANT__) {
    ns.activeMutant = g.process.env.__STRYKER_ACTIVE_MUTANT__;
  }
  function retrieveNS() {
    return ns;
  }
  stryNS_9fa48 = retrieveNS;
  return retrieveNS();
}
stryNS_9fa48();
function stryCov_9fa48() {
  var ns = stryNS_9fa48();
  var cov = ns.mutantCoverage || (ns.mutantCoverage = {
    "static": {},
    perTest: {}
  });
  function cover() {
    var c = cov["static"];
    if (ns.currentTestId) {
      c = cov.perTest[ns.currentTestId] = cov.perTest[ns.currentTestId] || {};
    }
    var a = arguments;
    for (var i = 0; i < a.length; i++) {
      c[a[i]] = (c[a[i]] || 0) + 1;
    }
  }
  stryCov_9fa48 = cover;
  cover.apply(null, arguments);
}
function stryMutAct_9fa48(id) {
  var ns = stryNS_9fa48();
  function isActive(id) {
    if (ns.activeMutant === id) {
      if (ns.hitCount !== void 0 && ++ns.hitCount > ns.hitLimit) {
        throw new Error('Stryker: Hit count limit reached (' + ns.hitCount + ')');
      }
      return true;
    }
    return false;
  }
  stryMutAct_9fa48 = isActive;
  return isActive(id);
}
var History = function History() {
  if (stryMutAct_9fa48("226")) {
    {}
  } else {
    stryCov_9fa48("226");
    (0, _useAuth["default"])();
    var _useState = (0, _react.useState)(stryMutAct_9fa48("227") ? ["Stryker was here"] : (stryCov_9fa48("227"), [])),
      _useState2 = _slicedToArray(_useState, 2),
      historyData = _useState2[0],
      setHistoryData = _useState2[1];
    var _useState3 = (0, _react.useState)(1),
      _useState4 = _slicedToArray(_useState3, 2),
      currentPage = _useState4[0],
      setCurrentPage = _useState4[1];
    var _useState5 = (0, _react.useState)(1),
      _useState6 = _slicedToArray(_useState5, 2),
      totalPages = _useState6[0],
      setTotalPages = _useState6[1];
    var itemsPerPage = 8;
    (0, _react.useEffect)(function () {
      if (stryMutAct_9fa48("228")) {
        {}
      } else {
        stryCov_9fa48("228");
        var fetchHistory = /*#__PURE__*/function () {
          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var token, response, history;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (!stryMutAct_9fa48("229")) {
                    _context.next = 3;
                    break;
                  }
                  _context.next = 27;
                  break;
                case 3:
                  stryCov_9fa48("229");
                  _context.prev = 4;
                  if (!stryMutAct_9fa48("230")) {
                    _context.next = 8;
                    break;
                  }
                  _context.next = 22;
                  break;
                case 8:
                  stryCov_9fa48("230");
                  token = localStorage.getItem(stryMutAct_9fa48("231") ? "" : (stryCov_9fa48("231"), 'token'));
                  if (!(stryMutAct_9fa48("234") ? false : stryMutAct_9fa48("233") ? true : stryMutAct_9fa48("232") ? token : (stryCov_9fa48("232", "233", "234"), !token))) {
                    _context.next = 16;
                    break;
                  }
                  if (!stryMutAct_9fa48("235")) {
                    _context.next = 14;
                    break;
                  }
                  _context.next = 16;
                  break;
                case 14:
                  stryCov_9fa48("235");
                  throw new Error(stryMutAct_9fa48("236") ? "" : (stryCov_9fa48("236"), 'No token found'));
                case 16:
                  _context.next = 18;
                  return _axios["default"].get(stryMutAct_9fa48("237") ? "" : (stryCov_9fa48("237"), 'http://localhost:5000/history'), stryMutAct_9fa48("238") ? {} : (stryCov_9fa48("238"), {
                    headers: stryMutAct_9fa48("239") ? {} : (stryCov_9fa48("239"), {
                      Authorization: stryMutAct_9fa48("240") ? "" : (stryCov_9fa48("240"), "Bearer ".concat(token))
                    })
                  }));
                case 18:
                  response = _context.sent;
                  history = response.data;
                  setHistoryData(history);
                  setTotalPages(Math.ceil(stryMutAct_9fa48("241") ? history.length * itemsPerPage : (stryCov_9fa48("241"), history.length / itemsPerPage)));
                case 22:
                  _context.next = 27;
                  break;
                case 24:
                  _context.prev = 24;
                  _context.t0 = _context["catch"](4);
                  if (stryMutAct_9fa48("242")) {
                    {}
                  } else {
                    stryCov_9fa48("242");
                    console.error(stryMutAct_9fa48("243") ? "" : (stryCov_9fa48("243"), 'Error fetching history:'), _context.t0);
                  }
                case 27:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[4, 24]]);
          }));
          return function fetchHistory() {
            return _ref.apply(this, arguments);
          };
        }();
        fetchHistory();
      }
    }, stryMutAct_9fa48("244") ? ["Stryker was here"] : (stryCov_9fa48("244"), []));
    var formatDateTime = function formatDateTime(datetime) {
      if (stryMutAct_9fa48("245")) {
        {}
      } else {
        stryCov_9fa48("245");
        var date = new Date(datetime);
        return date.toLocaleString(stryMutAct_9fa48("246") ? "" : (stryCov_9fa48("246"), 'uk-UA'), stryMutAct_9fa48("247") ? {} : (stryCov_9fa48("247"), {
          year: stryMutAct_9fa48("248") ? "" : (stryCov_9fa48("248"), 'numeric'),
          month: stryMutAct_9fa48("249") ? "" : (stryCov_9fa48("249"), 'long'),
          day: stryMutAct_9fa48("250") ? "" : (stryCov_9fa48("250"), 'numeric'),
          hour: stryMutAct_9fa48("251") ? "" : (stryCov_9fa48("251"), '2-digit'),
          minute: stryMutAct_9fa48("252") ? "" : (stryCov_9fa48("252"), '2-digit')
        }));
      }
    };
    var handlePageChange = function handlePageChange(page) {
      if (stryMutAct_9fa48("253")) {
        {}
      } else {
        stryCov_9fa48("253");
        setCurrentPage(page);
      }
    };
    var startIndex = stryMutAct_9fa48("254") ? (currentPage - 1) / itemsPerPage : (stryCov_9fa48("254"), (stryMutAct_9fa48("255") ? currentPage + 1 : (stryCov_9fa48("255"), currentPage - 1)) * itemsPerPage);
    var currentItems = stryMutAct_9fa48("256") ? historyData : (stryCov_9fa48("256"), historyData.slice(startIndex, stryMutAct_9fa48("257") ? startIndex - itemsPerPage : (stryCov_9fa48("257"), startIndex + itemsPerPage)));
    var generatePageNumbers = function generatePageNumbers() {
      if (stryMutAct_9fa48("258")) {
        {}
      } else {
        stryCov_9fa48("258");
        var pageNumbers = stryMutAct_9fa48("259") ? ["Stryker was here"] : (stryCov_9fa48("259"), []);
        var maxPageLinks = 3;
        if (stryMutAct_9fa48("263") ? totalPages > maxPageLinks : stryMutAct_9fa48("262") ? totalPages < maxPageLinks : stryMutAct_9fa48("261") ? false : stryMutAct_9fa48("260") ? true : (stryCov_9fa48("260", "261", "262", "263"), totalPages <= maxPageLinks)) {
          if (stryMutAct_9fa48("264")) {
            {}
          } else {
            stryCov_9fa48("264");
            for (var i = 1; stryMutAct_9fa48("267") ? i > totalPages : stryMutAct_9fa48("266") ? i < totalPages : stryMutAct_9fa48("265") ? false : (stryCov_9fa48("265", "266", "267"), i <= totalPages); stryMutAct_9fa48("268") ? i-- : (stryCov_9fa48("268"), i++)) {
              if (stryMutAct_9fa48("269")) {
                {}
              } else {
                stryCov_9fa48("269");
                pageNumbers.push(i);
              }
            }
          }
        } else {
          if (stryMutAct_9fa48("270")) {
            {}
          } else {
            stryCov_9fa48("270");
            pageNumbers.push(1);
            if (stryMutAct_9fa48("274") ? currentPage <= 2 : stryMutAct_9fa48("273") ? currentPage >= 2 : stryMutAct_9fa48("272") ? false : stryMutAct_9fa48("271") ? true : (stryCov_9fa48("271", "272", "273", "274"), currentPage > 2)) {
              if (stryMutAct_9fa48("275")) {
                {}
              } else {
                stryCov_9fa48("275");
                pageNumbers.push(stryMutAct_9fa48("276") ? "" : (stryCov_9fa48("276"), '•••'));
              }
            }
            var start = stryMutAct_9fa48("277") ? Math.min(2, currentPage - 1) : (stryCov_9fa48("277"), Math.max(2, stryMutAct_9fa48("278") ? currentPage + 1 : (stryCov_9fa48("278"), currentPage - 1)));
            var end = stryMutAct_9fa48("279") ? Math.max(totalPages - 1, currentPage + 1) : (stryCov_9fa48("279"), Math.min(stryMutAct_9fa48("280") ? totalPages + 1 : (stryCov_9fa48("280"), totalPages - 1), stryMutAct_9fa48("281") ? currentPage - 1 : (stryCov_9fa48("281"), currentPage + 1)));
            for (var _i = start; stryMutAct_9fa48("284") ? _i > end : stryMutAct_9fa48("283") ? _i < end : stryMutAct_9fa48("282") ? false : (stryCov_9fa48("282", "283", "284"), _i <= end); stryMutAct_9fa48("285") ? _i-- : (stryCov_9fa48("285"), _i++)) {
              if (stryMutAct_9fa48("286")) {
                {}
              } else {
                stryCov_9fa48("286");
                pageNumbers.push(_i);
              }
            }
            if (stryMutAct_9fa48("290") ? currentPage >= totalPages - 1 : stryMutAct_9fa48("289") ? currentPage <= totalPages - 1 : stryMutAct_9fa48("288") ? false : stryMutAct_9fa48("287") ? true : (stryCov_9fa48("287", "288", "289", "290"), currentPage < (stryMutAct_9fa48("291") ? totalPages + 1 : (stryCov_9fa48("291"), totalPages - 1)))) {
              if (stryMutAct_9fa48("292")) {
                {}
              } else {
                stryCov_9fa48("292");
                pageNumbers.push(stryMutAct_9fa48("293") ? "" : (stryCov_9fa48("293"), '•••'));
              }
            }
            pageNumbers.push(totalPages);
          }
        }
        return pageNumbers;
      }
    };
    var handleEllipsisClick = function handleEllipsisClick(page) {
      if (stryMutAct_9fa48("294")) {
        {}
      } else {
        stryCov_9fa48("294");
        if (stryMutAct_9fa48("297") ? page !== 'afterFirst' : stryMutAct_9fa48("296") ? false : stryMutAct_9fa48("295") ? true : (stryCov_9fa48("295", "296", "297"), page === (stryMutAct_9fa48("298") ? "" : (stryCov_9fa48("298"), 'afterFirst')))) {
          if (stryMutAct_9fa48("299")) {
            {}
          } else {
            stryCov_9fa48("299");
            setCurrentPage(2);
          }
        } else if (stryMutAct_9fa48("302") ? page !== 'beforeLast' : stryMutAct_9fa48("301") ? false : stryMutAct_9fa48("300") ? true : (stryCov_9fa48("300", "301", "302"), page === (stryMutAct_9fa48("303") ? "" : (stryCov_9fa48("303"), 'beforeLast')))) {
          if (stryMutAct_9fa48("304")) {
            {}
          } else {
            stryCov_9fa48("304");
            setCurrentPage(stryMutAct_9fa48("305") ? totalPages + 1 : (stryCov_9fa48("305"), totalPages - 1));
          }
        }
      }
    };
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "history-container"
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "history-header"
    }, /*#__PURE__*/_react["default"].createElement("img", {
      src: "/assets/images/history.png",
      alt: "History Icon",
      className: "history-icon"
    })), /*#__PURE__*/_react["default"].createElement("div", {
      className: "history-grid"
    }, currentItems.map(stryMutAct_9fa48("306") ? function () {
      return undefined;
    } : (stryCov_9fa48("306"), function (item) {
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: "history-card",
        key: item.id
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: "history-card-header"
      }, formatDateTime(item.datetime)), /*#__PURE__*/_react["default"].createElement("ul", {
        className: "history-card-content"
      }, /*#__PURE__*/_react["default"].createElement("li", null, /*#__PURE__*/_react["default"].createElement("strong", null, "\u0420\u0430\u0439\u043E\u043D:"), " ", item.district), /*#__PURE__*/_react["default"].createElement("li", null, /*#__PURE__*/_react["default"].createElement("strong", null, "\u041F\u043E\u0432\u0435\u0440\u0445:"), " ", item.floor), /*#__PURE__*/_react["default"].createElement("li", null, /*#__PURE__*/_react["default"].createElement("strong", null, "\u0417\u0430\u0433\u0430\u043B\u044C\u043D\u0430 \u043A\u0456\u043B\u044C\u043A\u0456\u0441\u0442\u044C \u043F\u043E\u0432\u0435\u0440\u0445\u0456\u0432:"), stryMutAct_9fa48("307") ? "" : (stryCov_9fa48("307"), ' '), item.floors_count), /*#__PURE__*/_react["default"].createElement("li", null, /*#__PURE__*/_react["default"].createElement("strong", null, "\u041A\u0456\u043B\u044C\u043A\u0456\u0441\u0442\u044C \u043A\u0456\u043C\u043D\u0430\u0442:"), " ", item.rooms_count), /*#__PURE__*/_react["default"].createElement("li", null, /*#__PURE__*/_react["default"].createElement("strong", null, "\u0417\u0430\u0433\u0430\u043B\u044C\u043D\u0430 \u043F\u043B\u043E\u0449\u0430 \u043A\u0432\u0430\u0440\u0442\u0438\u0440\u0438 (\u043C\xB2):"), stryMutAct_9fa48("308") ? "" : (stryCov_9fa48("308"), ' '), item.total_square_meters), /*#__PURE__*/_react["default"].createElement("li", null, /*#__PURE__*/_react["default"].createElement("strong", null, "\u0426\u0456\u043D\u0430:"), " ", item.predict_price)));
    }))), /*#__PURE__*/_react["default"].createElement("div", {
      className: "pagination"
    }, generatePageNumbers().map(stryMutAct_9fa48("309") ? function () {
      return undefined;
    } : (stryCov_9fa48("309"), function (page, index) {
      return /*#__PURE__*/_react["default"].createElement("button", {
        key: index,
        className: stryMutAct_9fa48("310") ? "" : (stryCov_9fa48("310"), "pagination-button ".concat((stryMutAct_9fa48("313") ? currentPage !== page : stryMutAct_9fa48("312") ? false : stryMutAct_9fa48("311") ? true : (stryCov_9fa48("311", "312", "313"), currentPage === page)) ? stryMutAct_9fa48("314") ? "" : (stryCov_9fa48("314"), 'active') : stryMutAct_9fa48("315") ? "Stryker was here!" : (stryCov_9fa48("315"), ''))),
        onClick: function onClick() {
          if (stryMutAct_9fa48("316")) {
            {}
          } else {
            stryCov_9fa48("316");
            if (stryMutAct_9fa48("319") ? page === '•••' : stryMutAct_9fa48("318") ? false : stryMutAct_9fa48("317") ? true : (stryCov_9fa48("317", "318", "319"), page !== (stryMutAct_9fa48("320") ? "" : (stryCov_9fa48("320"), '•••')))) {
              if (stryMutAct_9fa48("321")) {
                {}
              } else {
                stryCov_9fa48("321");
                handlePageChange(page);
              }
            }
          }
        }
      }, (stryMutAct_9fa48("324") ? page !== '•••' : stryMutAct_9fa48("323") ? false : stryMutAct_9fa48("322") ? true : (stryCov_9fa48("322", "323", "324"), page === (stryMutAct_9fa48("325") ? "" : (stryCov_9fa48("325"), '•••')))) ? /*#__PURE__*/_react["default"].createElement("span", {
        onClick: function onClick() {
          if (stryMutAct_9fa48("326")) {
            {}
          } else {
            stryCov_9fa48("326");
            var pageNumbers = generatePageNumbers();
            if (stryMutAct_9fa48("329") ? pageNumbers.indexOf('•••') !== 1 : stryMutAct_9fa48("328") ? false : stryMutAct_9fa48("327") ? true : (stryCov_9fa48("327", "328", "329"), pageNumbers.indexOf(stryMutAct_9fa48("330") ? "" : (stryCov_9fa48("330"), '•••')) === 1)) {
              if (stryMutAct_9fa48("331")) {
                {}
              } else {
                stryCov_9fa48("331");
                handleEllipsisClick(stryMutAct_9fa48("332") ? "" : (stryCov_9fa48("332"), 'afterFirst'));
              }
            } else if (stryMutAct_9fa48("335") ? pageNumbers.indexOf('•••') !== pageNumbers.length - 2 : stryMutAct_9fa48("334") ? false : stryMutAct_9fa48("333") ? true : (stryCov_9fa48("333", "334", "335"), pageNumbers.indexOf(stryMutAct_9fa48("336") ? "" : (stryCov_9fa48("336"), '•••')) === (stryMutAct_9fa48("337") ? pageNumbers.length + 2 : (stryCov_9fa48("337"), pageNumbers.length - 2)))) {
              if (stryMutAct_9fa48("338")) {
                {}
              } else {
                stryCov_9fa48("338");
                handleEllipsisClick(stryMutAct_9fa48("339") ? "" : (stryCov_9fa48("339"), 'beforeLast'));
              }
            }
          }
        }
      }, stryMutAct_9fa48("340") ? "" : (stryCov_9fa48("340"), '•••')) : page);
    }))));
  }
};
var _default = exports["default"] = History;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,