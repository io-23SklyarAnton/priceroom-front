2068df97a3ca93f4abcafdc68aad268a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLabelContent = getLabelContent;
exports.getLabels = getLabels;
exports.getRealLabels = getRealLabels;
var _helpers = require("./helpers");
var labelledNodeNames = ['button', 'meter', 'output', 'progress', 'select', 'textarea', 'input'];
function getTextContent(node) {
  if (labelledNodeNames.includes(node.nodeName.toLowerCase())) {
    return '';
  }
  if (node.nodeType === _helpers.TEXT_NODE) return node.textContent;
  return Array.from(node.childNodes).map(function (childNode) {
    return getTextContent(childNode);
  }).join('');
}
function getLabelContent(element) {
  var textContent;
  if (element.tagName.toLowerCase() === 'label') {
    textContent = getTextContent(element);
  } else {
    textContent = element.value || element.textContent;
  }
  return textContent;
}

// Based on https://github.com/eps1lon/dom-accessibility-api/pull/352
function getRealLabels(element) {
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- types are not aware of older browsers that don't implement `labels`
  if (element.labels !== undefined) {
    var _element$labels;
    return (_element$labels = element.labels) !== null && _element$labels !== void 0 ? _element$labels : [];
  }
  if (!isLabelable(element)) return [];
  var labels = element.ownerDocument.querySelectorAll('label');
  return Array.from(labels).filter(function (label) {
    return label.control === element;
  });
}
function isLabelable(element) {
  return /BUTTON|METER|OUTPUT|PROGRESS|SELECT|TEXTAREA/.test(element.tagName) || element.tagName === 'INPUT' && element.getAttribute('type') !== 'hidden';
}
function getLabels(container, element) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
    _ref$selector = _ref.selector,
    selector = _ref$selector === void 0 ? '*' : _ref$selector;
  var ariaLabelledBy = element.getAttribute('aria-labelledby');
  var labelsId = ariaLabelledBy ? ariaLabelledBy.split(' ') : [];
  return labelsId.length ? labelsId.map(function (labelId) {
    var labellingElement = container.querySelector("[id=\"".concat(labelId, "\"]"));
    return labellingElement ? {
      content: getLabelContent(labellingElement),
      formControl: null
    } : {
      content: '',
      formControl: null
    };
  }) : Array.from(getRealLabels(element)).map(function (label) {
    var textToMatch = getLabelContent(label);
    var formControlSelector = 'button, input, meter, output, progress, select, textarea';
    var labelledFormControl = Array.from(label.querySelectorAll(formControlSelector)).filter(function (formControlElement) {
      return formControlElement.matches(selector);
    })[0];
    return {
      content: textToMatch,
      formControl: labelledFormControl
    };
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,