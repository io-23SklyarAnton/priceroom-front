ababff895365645f6fda6013116c6172
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isKeyword = isKeyword;
exports.isReservedWord = isReservedWord;
exports.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
exports.isStrictBindReservedWord = isStrictBindReservedWord;
exports.isStrictReservedWord = isStrictReservedWord;
var reservedWords = {
  keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
  strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
  strictBind: ["eval", "arguments"]
};
var keywords = new Set(reservedWords.keyword);
var reservedWordsStrictSet = new Set(reservedWords.strict);
var reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
function isReservedWord(word, inModule) {
  return inModule && word === "await" || word === "enum";
}
function isStrictReservedWord(word, inModule) {
  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
}
function isStrictBindOnlyReservedWord(word) {
  return reservedWordsStrictBindSet.has(word);
}
function isStrictBindReservedWord(word, inModule) {
  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
}
function isKeyword(word) {
  return keywords.has(word);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXNlcnZlZFdvcmRzIiwia2V5d29yZCIsInN0cmljdCIsInN0cmljdEJpbmQiLCJrZXl3b3JkcyIsIlNldCIsInJlc2VydmVkV29yZHNTdHJpY3RTZXQiLCJyZXNlcnZlZFdvcmRzU3RyaWN0QmluZFNldCIsImlzUmVzZXJ2ZWRXb3JkIiwid29yZCIsImluTW9kdWxlIiwiaXNTdHJpY3RSZXNlcnZlZFdvcmQiLCJoYXMiLCJpc1N0cmljdEJpbmRPbmx5UmVzZXJ2ZWRXb3JkIiwiaXNTdHJpY3RCaW5kUmVzZXJ2ZWRXb3JkIiwiaXNLZXl3b3JkIl0sInNvdXJjZXMiOlsiLi4vc3JjL2tleXdvcmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcmVzZXJ2ZWRXb3JkcyA9IHtcbiAga2V5d29yZDogW1xuICAgIFwiYnJlYWtcIixcbiAgICBcImNhc2VcIixcbiAgICBcImNhdGNoXCIsXG4gICAgXCJjb250aW51ZVwiLFxuICAgIFwiZGVidWdnZXJcIixcbiAgICBcImRlZmF1bHRcIixcbiAgICBcImRvXCIsXG4gICAgXCJlbHNlXCIsXG4gICAgXCJmaW5hbGx5XCIsXG4gICAgXCJmb3JcIixcbiAgICBcImZ1bmN0aW9uXCIsXG4gICAgXCJpZlwiLFxuICAgIFwicmV0dXJuXCIsXG4gICAgXCJzd2l0Y2hcIixcbiAgICBcInRocm93XCIsXG4gICAgXCJ0cnlcIixcbiAgICBcInZhclwiLFxuICAgIFwiY29uc3RcIixcbiAgICBcIndoaWxlXCIsXG4gICAgXCJ3aXRoXCIsXG4gICAgXCJuZXdcIixcbiAgICBcInRoaXNcIixcbiAgICBcInN1cGVyXCIsXG4gICAgXCJjbGFzc1wiLFxuICAgIFwiZXh0ZW5kc1wiLFxuICAgIFwiZXhwb3J0XCIsXG4gICAgXCJpbXBvcnRcIixcbiAgICBcIm51bGxcIixcbiAgICBcInRydWVcIixcbiAgICBcImZhbHNlXCIsXG4gICAgXCJpblwiLFxuICAgIFwiaW5zdGFuY2VvZlwiLFxuICAgIFwidHlwZW9mXCIsXG4gICAgXCJ2b2lkXCIsXG4gICAgXCJkZWxldGVcIixcbiAgXSxcbiAgc3RyaWN0OiBbXG4gICAgXCJpbXBsZW1lbnRzXCIsXG4gICAgXCJpbnRlcmZhY2VcIixcbiAgICBcImxldFwiLFxuICAgIFwicGFja2FnZVwiLFxuICAgIFwicHJpdmF0ZVwiLFxuICAgIFwicHJvdGVjdGVkXCIsXG4gICAgXCJwdWJsaWNcIixcbiAgICBcInN0YXRpY1wiLFxuICAgIFwieWllbGRcIixcbiAgXSxcbiAgc3RyaWN0QmluZDogW1wiZXZhbFwiLCBcImFyZ3VtZW50c1wiXSxcbn07XG5jb25zdCBrZXl3b3JkcyA9IG5ldyBTZXQocmVzZXJ2ZWRXb3Jkcy5rZXl3b3JkKTtcbmNvbnN0IHJlc2VydmVkV29yZHNTdHJpY3RTZXQgPSBuZXcgU2V0KHJlc2VydmVkV29yZHMuc3RyaWN0KTtcbmNvbnN0IHJlc2VydmVkV29yZHNTdHJpY3RCaW5kU2V0ID0gbmV3IFNldChyZXNlcnZlZFdvcmRzLnN0cmljdEJpbmQpO1xuXG4vKipcbiAqIENoZWNrcyBpZiB3b3JkIGlzIGEgcmVzZXJ2ZWQgd29yZCBpbiBub24tc3RyaWN0IG1vZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUmVzZXJ2ZWRXb3JkKHdvcmQ6IHN0cmluZywgaW5Nb2R1bGU6IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgcmV0dXJuIChpbk1vZHVsZSAmJiB3b3JkID09PSBcImF3YWl0XCIpIHx8IHdvcmQgPT09IFwiZW51bVwiO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB3b3JkIGlzIGEgcmVzZXJ2ZWQgd29yZCBpbiBub24tYmluZGluZyBzdHJpY3QgbW9kZVxuICpcbiAqIEluY2x1ZGVzIG5vbi1zdHJpY3QgcmVzZXJ2ZWQgd29yZHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaWN0UmVzZXJ2ZWRXb3JkKHdvcmQ6IHN0cmluZywgaW5Nb2R1bGU6IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzUmVzZXJ2ZWRXb3JkKHdvcmQsIGluTW9kdWxlKSB8fCByZXNlcnZlZFdvcmRzU3RyaWN0U2V0Lmhhcyh3b3JkKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgd29yZCBpcyBhIHJlc2VydmVkIHdvcmQgaW4gYmluZGluZyBzdHJpY3QgbW9kZSwgYnV0IGl0IGlzIGFsbG93ZWQgYXNcbiAqIGEgbm9ybWFsIGlkZW50aWZpZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmljdEJpbmRPbmx5UmVzZXJ2ZWRXb3JkKHdvcmQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gcmVzZXJ2ZWRXb3Jkc1N0cmljdEJpbmRTZXQuaGFzKHdvcmQpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB3b3JkIGlzIGEgcmVzZXJ2ZWQgd29yZCBpbiBiaW5kaW5nIHN0cmljdCBtb2RlXG4gKlxuICogSW5jbHVkZXMgbm9uLXN0cmljdCByZXNlcnZlZCB3b3JkcyBhbmQgbm9uLWJpbmRpbmcgc3RyaWN0IHJlc2VydmVkIHdvcmRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmljdEJpbmRSZXNlcnZlZFdvcmQoXG4gIHdvcmQ6IHN0cmluZyxcbiAgaW5Nb2R1bGU6IGJvb2xlYW4sXG4pOiBib29sZWFuIHtcbiAgcmV0dXJuIChcbiAgICBpc1N0cmljdFJlc2VydmVkV29yZCh3b3JkLCBpbk1vZHVsZSkgfHwgaXNTdHJpY3RCaW5kT25seVJlc2VydmVkV29yZCh3b3JkKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNLZXl3b3JkKHdvcmQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4ga2V5d29yZHMuaGFzKHdvcmQpO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsSUFBTUEsYUFBYSxHQUFHO0VBQ3BCQyxPQUFPLEVBQUUsQ0FDUCxPQUFPLEVBQ1AsTUFBTSxFQUNOLE9BQU8sRUFDUCxVQUFVLEVBQ1YsVUFBVSxFQUNWLFNBQVMsRUFDVCxJQUFJLEVBQ0osTUFBTSxFQUNOLFNBQVMsRUFDVCxLQUFLLEVBQ0wsVUFBVSxFQUNWLElBQUksRUFDSixRQUFRLEVBQ1IsUUFBUSxFQUNSLE9BQU8sRUFDUCxLQUFLLEVBQ0wsS0FBSyxFQUNMLE9BQU8sRUFDUCxPQUFPLEVBQ1AsTUFBTSxFQUNOLEtBQUssRUFDTCxNQUFNLEVBQ04sT0FBTyxFQUNQLE9BQU8sRUFDUCxTQUFTLEVBQ1QsUUFBUSxFQUNSLFFBQVEsRUFDUixNQUFNLEVBQ04sTUFBTSxFQUNOLE9BQU8sRUFDUCxJQUFJLEVBQ0osWUFBWSxFQUNaLFFBQVEsRUFDUixNQUFNLEVBQ04sUUFBUSxDQUNUO0VBQ0RDLE1BQU0sRUFBRSxDQUNOLFlBQVksRUFDWixXQUFXLEVBQ1gsS0FBSyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsV0FBVyxFQUNYLFFBQVEsRUFDUixRQUFRLEVBQ1IsT0FBTyxDQUNSO0VBQ0RDLFVBQVUsRUFBRSxDQUFDLE1BQU0sRUFBRSxXQUFXO0FBQ2xDLENBQUM7QUFDRCxJQUFNQyxRQUFRLEdBQUcsSUFBSUMsR0FBRyxDQUFDTCxhQUFhLENBQUNDLE9BQU8sQ0FBQztBQUMvQyxJQUFNSyxzQkFBc0IsR0FBRyxJQUFJRCxHQUFHLENBQUNMLGFBQWEsQ0FBQ0UsTUFBTSxDQUFDO0FBQzVELElBQU1LLDBCQUEwQixHQUFHLElBQUlGLEdBQUcsQ0FBQ0wsYUFBYSxDQUFDRyxVQUFVLENBQUM7QUFLN0QsU0FBU0ssY0FBY0EsQ0FBQ0MsSUFBWSxFQUFFQyxRQUFpQixFQUFXO0VBQ3ZFLE9BQVFBLFFBQVEsSUFBSUQsSUFBSSxLQUFLLE9BQU8sSUFBS0EsSUFBSSxLQUFLLE1BQU07QUFDMUQ7QUFPTyxTQUFTRSxvQkFBb0JBLENBQUNGLElBQVksRUFBRUMsUUFBaUIsRUFBVztFQUM3RSxPQUFPRixjQUFjLENBQUNDLElBQUksRUFBRUMsUUFBUSxDQUFDLElBQUlKLHNCQUFzQixDQUFDTSxHQUFHLENBQUNILElBQUksQ0FBQztBQUMzRTtBQU1PLFNBQVNJLDRCQUE0QkEsQ0FBQ0osSUFBWSxFQUFXO0VBQ2xFLE9BQU9GLDBCQUEwQixDQUFDSyxHQUFHLENBQUNILElBQUksQ0FBQztBQUM3QztBQU9PLFNBQVNLLHdCQUF3QkEsQ0FDdENMLElBQVksRUFDWkMsUUFBaUIsRUFDUjtFQUNULE9BQ0VDLG9CQUFvQixDQUFDRixJQUFJLEVBQUVDLFFBQVEsQ0FBQyxJQUFJRyw0QkFBNEIsQ0FBQ0osSUFBSSxDQUFDO0FBRTlFO0FBRU8sU0FBU00sU0FBU0EsQ0FBQ04sSUFBWSxFQUFXO0VBQy9DLE9BQU9MLFFBQVEsQ0FBQ1EsR0FBRyxDQUFDSCxJQUFJLENBQUM7QUFDM0IiLCJpZ25vcmVMaXN0IjpbXX0=