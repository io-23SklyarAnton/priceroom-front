79185c2454cc45f8d659597449634763
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _stream = _interopRequireDefault(require("stream"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var ZlibHeaderTransformStream = /*#__PURE__*/function (_stream$Transform) {
  function ZlibHeaderTransformStream() {
    _classCallCheck(this, ZlibHeaderTransformStream);
    return _callSuper(this, ZlibHeaderTransformStream, arguments);
  }
  _inherits(ZlibHeaderTransformStream, _stream$Transform);
  return _createClass(ZlibHeaderTransformStream, [{
    key: "__transform",
    value: function __transform(chunk, encoding, callback) {
      this.push(chunk);
      callback();
    }
  }, {
    key: "_transform",
    value: function _transform(chunk, encoding, callback) {
      if (chunk.length !== 0) {
        this._transform = this.__transform;

        // Add Default Compression headers if no zlib headers are present
        if (chunk[0] !== 120) {
          // Hex: 78
          var header = Buffer.alloc(2);
          header[0] = 120; // Hex: 78
          header[1] = 156; // Hex: 9C 
          this.push(header, encoding);
        }
      }
      this.__transform(chunk, encoding, callback);
    }
  }]);
}(_stream["default"].Transform);
var _default = exports["default"] = ZlibHeaderTransformStream;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9zdHJlYW0iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImUiLCJfX2VzTW9kdWxlIiwiX2NsYXNzQ2FsbENoZWNrIiwiYSIsIm4iLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInIiLCJ0IiwibGVuZ3RoIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX3RvUHJvcGVydHlLZXkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJpIiwiX3RvUHJpbWl0aXZlIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiU3RyaW5nIiwiTnVtYmVyIiwiX2NhbGxTdXBlciIsIl9nZXRQcm90b3R5cGVPZiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJhcHBseSIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsIkJvb2xlYW4iLCJ2YWx1ZU9mIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsImJpbmQiLCJfX3Byb3RvX18iLCJfaW5oZXJpdHMiLCJjcmVhdGUiLCJfc2V0UHJvdG90eXBlT2YiLCJabGliSGVhZGVyVHJhbnNmb3JtU3RyZWFtIiwiX3N0cmVhbSRUcmFuc2Zvcm0iLCJhcmd1bWVudHMiLCJfX3RyYW5zZm9ybSIsImNodW5rIiwiZW5jb2RpbmciLCJjYWxsYmFjayIsInB1c2giLCJfdHJhbnNmb3JtIiwiaGVhZGVyIiwiQnVmZmVyIiwiYWxsb2MiLCJzdHJlYW0iLCJUcmFuc2Zvcm0iLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIlpsaWJIZWFkZXJUcmFuc2Zvcm1TdHJlYW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBzdHJlYW0gZnJvbSBcInN0cmVhbVwiO1xuXG5jbGFzcyBabGliSGVhZGVyVHJhbnNmb3JtU3RyZWFtIGV4dGVuZHMgc3RyZWFtLlRyYW5zZm9ybSB7XG4gIF9fdHJhbnNmb3JtKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgICB0aGlzLnB1c2goY2h1bmspO1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cblxuICBfdHJhbnNmb3JtKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgICBpZiAoY2h1bmsubGVuZ3RoICE9PSAwKSB7XG4gICAgICB0aGlzLl90cmFuc2Zvcm0gPSB0aGlzLl9fdHJhbnNmb3JtO1xuXG4gICAgICAvLyBBZGQgRGVmYXVsdCBDb21wcmVzc2lvbiBoZWFkZXJzIGlmIG5vIHpsaWIgaGVhZGVycyBhcmUgcHJlc2VudFxuICAgICAgaWYgKGNodW5rWzBdICE9PSAxMjApIHsgLy8gSGV4OiA3OFxuICAgICAgICBjb25zdCBoZWFkZXIgPSBCdWZmZXIuYWxsb2MoMik7XG4gICAgICAgIGhlYWRlclswXSA9IDEyMDsgLy8gSGV4OiA3OFxuICAgICAgICBoZWFkZXJbMV0gPSAxNTY7IC8vIEhleDogOUMgXG4gICAgICAgIHRoaXMucHVzaChoZWFkZXIsIGVuY29kaW5nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9fdHJhbnNmb3JtKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFpsaWJIZWFkZXJUcmFuc2Zvcm1TdHJlYW07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQUMsU0FBQUEsUUFBQUMsQ0FBQSxzQ0FBQUQsT0FBQSx3QkFBQUUsTUFBQSx1QkFBQUEsTUFBQSxDQUFBQyxRQUFBLGFBQUFGLENBQUEsa0JBQUFBLENBQUEsZ0JBQUFBLENBQUEsV0FBQUEsQ0FBQSx5QkFBQUMsTUFBQSxJQUFBRCxDQUFBLENBQUFHLFdBQUEsS0FBQUYsTUFBQSxJQUFBRCxDQUFBLEtBQUFDLE1BQUEsQ0FBQUcsU0FBQSxxQkFBQUosQ0FBQSxLQUFBRCxPQUFBLENBQUFDLENBQUE7QUFBQUssTUFBQSxDQUFBQyxjQUFBLENBQUFDLE9BQUE7RUFBQUMsS0FBQTtBQUFBO0FBQUFELE9BQUE7QUFFYixJQUFBRSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBNEIsU0FBQUQsdUJBQUFFLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxnQkFBQUEsQ0FBQTtBQUFBLFNBQUFFLGdCQUFBQyxDQUFBLEVBQUFDLENBQUEsVUFBQUQsQ0FBQSxZQUFBQyxDQUFBLGFBQUFDLFNBQUE7QUFBQSxTQUFBQyxrQkFBQU4sQ0FBQSxFQUFBTyxDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBRCxDQUFBLENBQUFFLE1BQUEsRUFBQUQsQ0FBQSxVQUFBcEIsQ0FBQSxHQUFBbUIsQ0FBQSxDQUFBQyxDQUFBLEdBQUFwQixDQUFBLENBQUFzQixVQUFBLEdBQUF0QixDQUFBLENBQUFzQixVQUFBLFFBQUF0QixDQUFBLENBQUF1QixZQUFBLGtCQUFBdkIsQ0FBQSxLQUFBQSxDQUFBLENBQUF3QixRQUFBLFFBQUFuQixNQUFBLENBQUFDLGNBQUEsQ0FBQU0sQ0FBQSxFQUFBYSxjQUFBLENBQUF6QixDQUFBLENBQUEwQixHQUFBLEdBQUExQixDQUFBO0FBQUEsU0FBQTJCLGFBQUFmLENBQUEsRUFBQU8sQ0FBQSxFQUFBQyxDQUFBLFdBQUFELENBQUEsSUFBQUQsaUJBQUEsQ0FBQU4sQ0FBQSxDQUFBUixTQUFBLEVBQUFlLENBQUEsR0FBQUMsQ0FBQSxJQUFBRixpQkFBQSxDQUFBTixDQUFBLEVBQUFRLENBQUEsR0FBQWYsTUFBQSxDQUFBQyxjQUFBLENBQUFNLENBQUEsaUJBQUFZLFFBQUEsU0FBQVosQ0FBQTtBQUFBLFNBQUFhLGVBQUFMLENBQUEsUUFBQVEsQ0FBQSxHQUFBQyxZQUFBLENBQUFULENBQUEsZ0NBQUFyQixPQUFBLENBQUE2QixDQUFBLElBQUFBLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFDLGFBQUFULENBQUEsRUFBQUQsQ0FBQSxvQkFBQXBCLE9BQUEsQ0FBQXFCLENBQUEsTUFBQUEsQ0FBQSxTQUFBQSxDQUFBLE1BQUFSLENBQUEsR0FBQVEsQ0FBQSxDQUFBbkIsTUFBQSxDQUFBNkIsV0FBQSxrQkFBQWxCLENBQUEsUUFBQWdCLENBQUEsR0FBQWhCLENBQUEsQ0FBQW1CLElBQUEsQ0FBQVgsQ0FBQSxFQUFBRCxDQUFBLGdDQUFBcEIsT0FBQSxDQUFBNkIsQ0FBQSxVQUFBQSxDQUFBLFlBQUFYLFNBQUEseUVBQUFFLENBQUEsR0FBQWEsTUFBQSxHQUFBQyxNQUFBLEVBQUFiLENBQUE7QUFBQSxTQUFBYyxXQUFBZCxDQUFBLEVBQUFwQixDQUFBLEVBQUFZLENBQUEsV0FBQVosQ0FBQSxHQUFBbUMsZUFBQSxDQUFBbkMsQ0FBQSxHQUFBb0MsMEJBQUEsQ0FBQWhCLENBQUEsRUFBQWlCLHlCQUFBLEtBQUFDLE9BQUEsQ0FBQUMsU0FBQSxDQUFBdkMsQ0FBQSxFQUFBWSxDQUFBLFFBQUF1QixlQUFBLENBQUFmLENBQUEsRUFBQWpCLFdBQUEsSUFBQUgsQ0FBQSxDQUFBd0MsS0FBQSxDQUFBcEIsQ0FBQSxFQUFBUixDQUFBO0FBQUEsU0FBQXdCLDJCQUFBaEIsQ0FBQSxFQUFBUixDQUFBLFFBQUFBLENBQUEsaUJBQUFiLE9BQUEsQ0FBQWEsQ0FBQSwwQkFBQUEsQ0FBQSxVQUFBQSxDQUFBLGlCQUFBQSxDQUFBLFlBQUFLLFNBQUEscUVBQUF3QixzQkFBQSxDQUFBckIsQ0FBQTtBQUFBLFNBQUFxQix1QkFBQTdCLENBQUEsbUJBQUFBLENBQUEsWUFBQThCLGNBQUEsc0VBQUE5QixDQUFBO0FBQUEsU0FBQXlCLDBCQUFBLGNBQUFqQixDQUFBLElBQUF1QixPQUFBLENBQUF2QyxTQUFBLENBQUF3QyxPQUFBLENBQUFiLElBQUEsQ0FBQU8sT0FBQSxDQUFBQyxTQUFBLENBQUFJLE9BQUEsaUNBQUF2QixDQUFBLGFBQUFpQix5QkFBQSxZQUFBQSwwQkFBQSxhQUFBakIsQ0FBQTtBQUFBLFNBQUFlLGdCQUFBZixDQUFBLFdBQUFlLGVBQUEsR0FBQTlCLE1BQUEsQ0FBQXdDLGNBQUEsR0FBQXhDLE1BQUEsQ0FBQXlDLGNBQUEsQ0FBQUMsSUFBQSxlQUFBM0IsQ0FBQSxXQUFBQSxDQUFBLENBQUE0QixTQUFBLElBQUEzQyxNQUFBLENBQUF5QyxjQUFBLENBQUExQixDQUFBLE1BQUFlLGVBQUEsQ0FBQWYsQ0FBQTtBQUFBLFNBQUE2QixVQUFBN0IsQ0FBQSxFQUFBUixDQUFBLDZCQUFBQSxDQUFBLGFBQUFBLENBQUEsWUFBQUssU0FBQSx3REFBQUcsQ0FBQSxDQUFBaEIsU0FBQSxHQUFBQyxNQUFBLENBQUE2QyxNQUFBLENBQUF0QyxDQUFBLElBQUFBLENBQUEsQ0FBQVIsU0FBQSxJQUFBRCxXQUFBLElBQUFLLEtBQUEsRUFBQVksQ0FBQSxFQUFBSSxRQUFBLE1BQUFELFlBQUEsV0FBQWxCLE1BQUEsQ0FBQUMsY0FBQSxDQUFBYyxDQUFBLGlCQUFBSSxRQUFBLFNBQUFaLENBQUEsSUFBQXVDLGVBQUEsQ0FBQS9CLENBQUEsRUFBQVIsQ0FBQTtBQUFBLFNBQUF1QyxnQkFBQS9CLENBQUEsRUFBQVIsQ0FBQSxXQUFBdUMsZUFBQSxHQUFBOUMsTUFBQSxDQUFBd0MsY0FBQSxHQUFBeEMsTUFBQSxDQUFBd0MsY0FBQSxDQUFBRSxJQUFBLGVBQUEzQixDQUFBLEVBQUFSLENBQUEsV0FBQVEsQ0FBQSxDQUFBNEIsU0FBQSxHQUFBcEMsQ0FBQSxFQUFBUSxDQUFBLEtBQUErQixlQUFBLENBQUEvQixDQUFBLEVBQUFSLENBQUE7QUFBQSxJQUV0QndDLHlCQUF5QiwwQkFBQUMsaUJBQUE7RUFBQSxTQUFBRCwwQkFBQTtJQUFBdEMsZUFBQSxPQUFBc0MseUJBQUE7SUFBQSxPQUFBbEIsVUFBQSxPQUFBa0IseUJBQUEsRUFBQUUsU0FBQTtFQUFBO0VBQUFMLFNBQUEsQ0FBQUcseUJBQUEsRUFBQUMsaUJBQUE7RUFBQSxPQUFBMUIsWUFBQSxDQUFBeUIseUJBQUE7SUFBQTFCLEdBQUE7SUFBQWxCLEtBQUEsRUFDN0IsU0FBQStDLFdBQVdBLENBQUNDLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUU7TUFDckMsSUFBSSxDQUFDQyxJQUFJLENBQUNILEtBQUssQ0FBQztNQUNoQkUsUUFBUSxDQUFDLENBQUM7SUFDWjtFQUFDO0lBQUFoQyxHQUFBO0lBQUFsQixLQUFBLEVBRUQsU0FBQW9ELFVBQVVBLENBQUNKLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUU7TUFDcEMsSUFBSUYsS0FBSyxDQUFDbkMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN0QixJQUFJLENBQUN1QyxVQUFVLEdBQUcsSUFBSSxDQUFDTCxXQUFXOztRQUVsQztRQUNBLElBQUlDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7VUFBRTtVQUN0QixJQUFNSyxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQztVQUM5QkYsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1VBQ2pCQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7VUFDakIsSUFBSSxDQUFDRixJQUFJLENBQUNFLE1BQU0sRUFBRUosUUFBUSxDQUFDO1FBQzdCO01BQ0Y7TUFFQSxJQUFJLENBQUNGLFdBQVcsQ0FBQ0MsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsQ0FBQztJQUM3QztFQUFDO0FBQUEsRUFwQnFDTSxrQkFBTSxDQUFDQyxTQUFTO0FBQUEsSUFBQUMsUUFBQSxHQUFBM0QsT0FBQSxjQXVCekM2Qyx5QkFBeUIiLCJpZ25vcmVMaXN0IjpbXX0=